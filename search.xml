<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Algorithm-算法</title>
    <url>/2025/03/02/algorithm/</url>
    <content><![CDATA[<p>简介：算法是解决特定问题或执行特定任务的一系列明确步骤或规则。在计算机科学中，算法是指能够被计算机程序实现的解决问题的方法。一个有效的算法应该具有以下特性：</p>
<span id="more"></span>
<p>输入：有一个或多个输入。<br />
输出：至少产生一个输出。<br />
确定性：算法中的每一步都必须明确定义，且只能以一种方式解释。<br />
有限性：算法必须在有限步骤之后结束，即它不能无限期地运行下去。<br />
有效性：算法应在合理的时间和空间内解决问题。</p>
<h1 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法</h1>
<h2 id="算法入门的社会实验"><a class="markdownIt-Anchor" href="#算法入门的社会实验"></a> 算法入门的社会实验</h2>
<p>实验具体过程：<br />
一开始有100人，每个人有100块钱。在每一轮做的事情是，每个人随机给别人一块钱，如果在该轮此人钱数为0，则不给，但可以正常接受<br />
别人给的钱。经过很多人后，这个社会财富很均匀吗？算出经过多少轮后，社会的基尼系数超过0.5？<br />
下面是社会基尼系数的定义：</p>
<blockquote>
<p>基尼系数（Gini Coefficient）是一种用来衡量收入分配或财富分配不平等程度的统计指标。它由意大利统计学家科拉多·基尼（Corrado Gini）1912<br />
年提出，广泛应用于经济学和社会科学领域，尤其是在研究收入分配不平等问题时。<br />
基尼系数的定义<br />
基尼系数的取值范围从0到1（或0%到100%）：</p>
<ul>
<li>0 表示完全平等，即所有人的收入或财富完全相同。</li>
<li>1 表示完全不平等，即一个人拥有所有的收入或财富，其他人一无所有。</li>
</ul>
</blockquote>
<p>代码如下：</p>
<hr />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;format&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gen_random</span><span class="params">(<span class="type">int</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::random_device rd;</span><br><span class="line">    std::mt19937 engine&#123;<span class="built_in">rd</span>()&#125;;</span><br><span class="line">    <span class="function">std::uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">dist</span><span class="params">(<span class="number">0</span>, max)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dist</span>(engine);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">experiment</span><span class="params">(std::vector&lt;<span class="type">double</span>&gt; &amp;all, <span class="type">int</span> loops)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(all.<span class="built_in">size</span>());</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">has_money</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; loops; ++k)</span><br><span class="line">    &#123;</span><br><span class="line">        std::<span class="built_in">fill</span>(has_money.<span class="built_in">begin</span>(), has_money.<span class="built_in">end</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (all[i] &gt; <span class="number">0</span>)</span><br><span class="line">                has_money[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (has_money[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> j = i;</span><br><span class="line">                <span class="keyword">do</span></span><br><span class="line">                &#123;</span><br><span class="line">                    j = <span class="built_in">gen_random</span>(n<span class="number">-1</span>);</span><br><span class="line">                &#125; <span class="keyword">while</span> (j == i);</span><br><span class="line">                --all[i];</span><br><span class="line">                ++all[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc_gini</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">double</span>&gt; &amp;all)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> total_diff = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(all.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += all[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            total_diff += std::<span class="built_in">abs</span>(all[i] - all[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> gini = total_diff / (<span class="number">1.0</span> * <span class="number">2</span> * n * sum);</span><br><span class="line">    <span class="keyword">return</span> gini;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">entry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;一个社会的基尼系数是在0-1之间的小数；&quot;</span>  &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;基尼系数为0代表所有人的财富绝对均匀，&quot;</span>  &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;基尼系数为1代表1个人掌握了社会所有的财富。&quot;</span>  &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;基尼系数越小，代表社会财富分布越均匀；反之，代表社会财富分布越不均匀；&quot;</span>  &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;在2022年，世界各国的平均基尼为0.44。目前普遍认为，&quot;</span>  &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;当基尼系数达到0.5时，就意为着社会财富分布非常不均匀。&quot;</span>  &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;社会可能陷入危机，比如大量的犯罪或社会动荡。&quot;</span>  &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;测试开始......&quot;</span>  &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">double</span>&gt; <span class="title">money</span><span class="params">(n, <span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="type">long</span> t = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> gini = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">experiment</span>(money, t);</span><br><span class="line">        gini = <span class="built_in">calc_gini</span>(money);</span><br><span class="line">        ++t;</span><br><span class="line">    &#125; <span class="keyword">while</span> (gini &lt;= <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;此时社会已经达到很危险的程度了！！！&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; std::format(<span class="string">&quot;此时经历的轮数为：&#123;&#125;， 人数：&#123;&#125;\n&quot;</span>, t, n);</span><br><span class="line">    std::cout &lt;&lt; std::format(<span class="string">&quot;此时社会实验的基尼系数为：&#123;:.6f&#125;.\n&quot;</span>, gini);</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">sort</span>(money.<span class="built_in">begin</span>(), money.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; money.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; money[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; i % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">            std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">entry</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="二进制和位运算"><a class="markdownIt-Anchor" href="#二进制和位运算"></a> 二进制和位运算</h2>
<ol>
<li>正数在计算机内存中的表示比较简单，就是原码的二进制表示</li>
</ol>
<ul>
<li>假设是4位，可以表示多少个数呢？ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup><mo>=</mo><mn>16</mn></mrow><annotation encoding="application/x-tex">2^4 = 16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span></span></span></span></li>
<li>如果是无符号数 0 - 15；如果是有符号数，最高位固定1，后三位的可以表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">2^3 = 8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>，所以负数有8个；</li>
<li>非负数有8个。</li>
</ul>
<ol start="2">
<li>负数计算过程</li>
</ol>
<ul>
<li>比如 -7，先计算 7 的二进制为：0111，减去1为：0110，取反为：1001</li>
<li>比如 -1，先计算 1 的二进制位：0001，减去1为：0000，取反为：1111</li>
<li>或者这样计算：-x= ~x + 1</li>
</ul>
<ol start="3">
<li>根据二进制计算数值的过程</li>
</ol>
<ul>
<li>比如 0111，符号位是：0，非负数，直接进行进制运算：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">2^0 + 2^1 + 2^2 + 0*2^3 = 7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span></li>
<li>比如 1000，符号位是：1，负数，取反为：0111，加上1为：1000，直接进行进制运算为：8，所以为：-8</li>
<li>比如 1001，符号位是：1，负数，取反为：0110，加上1为：0111，直接进行进制运算为：7，所以为：-7</li>
</ul>
<h2 id="选择-冒泡-插入排序"><a class="markdownIt-Anchor" href="#选择-冒泡-插入排序"></a> 选择、冒泡、插入排序</h2>
<ul>
<li>选择排序：i ~ n-1 范围，找到最小值和 i 位置交换，然后 i+1 ~ n-1范围继续</li>
<li>冒泡排序：0 ~ i 范围，相邻位置较大的数滚下去，最大值最终来到 i 位置，然后在 0 ~ i-1 范围继续</li>
<li>插入排序：0 ~ i 范围上以及有序，新来的数从右向左滑到不在小的位置插入</li>
</ul>
<h2 id="二分搜索"><a class="markdownIt-Anchor" href="#二分搜索"></a> 二分搜索</h2>
<ol>
<li>在有序数组中查找特定的元素num存在还是不存在</li>
<li>在有序数组中查找&gt;=num最左的位置</li>
<li>在有序数组中查找&lt;=num最右的位置</li>
<li>二分搜索不一定发生在有序数组上（比如寻找峰值问题）</li>
</ol>
<h2 id="单双链表及其反转-堆栈诠释"><a class="markdownIt-Anchor" href="#单双链表及其反转-堆栈诠释"></a> 单双链表及其反转-堆栈诠释</h2>
<ol>
<li>按值传递，按引用传递</li>
<li>单，双链表的定义</li>
<li>根据反转功能，彻底从系统的角度解释链表是如何调整的</li>
<li>相关题目：<br />
入门题目：<br />
<strong><a href="https://leetcode.cn/problems/merge-two-sorted-lists/description/">21. Merge Two Sorted Lists</a></strong><br />
<strong><a href="https://leetcode.cn/problems/reverse-linked-list/">206. Reverse Linked List</a></strong><br />
<strong><a href="https://leetcode.cn/problems/add-two-numbers/description/">2. Add Two Numbers</a></strong><br />
<strong><a href="https://leetcode.cn/problems/partition-list/description/">86. Partition List</a></strong></li>
</ol>
<h2 id="队列和栈-链表-数组的实现"><a class="markdownIt-Anchor" href="#队列和栈-链表-数组的实现"></a> 队列和栈-链表、数组的实现</h2>
<ul>
<li>队列的介绍</li>
<li>栈的介绍</li>
<li>队列的链表实现和数组实现</li>
<li>栈的数组实现</li>
<li>环形队列用数组实现</li>
<li>用栈实现队列<br />
<strong><a href="https://leetcode.cn/problems/implement-queue-using-stacks/description/">232. Implement Queue using Stacks</a></strong></li>
<li>用队列实现栈<br />
<strong><a href="https://leetcode.cn/problems/implement-stack-using-queues/description/">225. Implement Stack using Queues</a></strong></li>
<li>最小栈<br />
<strong><a href="https://leetcode.cn/problems/min-stack/description/">155. Min Stack</a></strong></li>
</ul>
<h2 id="双端队列"><a class="markdownIt-Anchor" href="#双端队列"></a> 双端队列</h2>
<ul>
<li>双端队队列的介绍</li>
<li>双端队列用双链表的实现</li>
<li>双端队列用固定数组的实现<br />
<strong><a href="https://leetcode.cn/problems/design-circular-deque/description/">641. Design Circular Deque</a></strong></li>
</ul>
<h2 id="二叉树及其三种遍历"><a class="markdownIt-Anchor" href="#二叉树及其三种遍历"></a> 二叉树及其三种遍历</h2>
<ul>
<li>二叉树的节点</li>
<li>二叉树的先序、中序、后序遍历</li>
<li>递归序加工出的三种序的遍历</li>
</ul>
<h2 id="二叉树的非递归三种遍历及其时间复杂度分析"><a class="markdownIt-Anchor" href="#二叉树的非递归三种遍历及其时间复杂度分析"></a> 二叉树的非递归三种遍历及其时间复杂度分析</h2>
<ul>
<li>用栈实现二叉树先序遍历<br />
<strong><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/description/">144. Binary Tree Preorder Traversal</a></strong></li>
<li>用栈实现二叉树中序遍历<br />
<strong><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/description/">94. Binary Tree Inorder Traversal</a></strong></li>
<li>用栈实现二叉树后序遍历<br />
<strong><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/description/">145. Binary Tree Postorder Traversal</a></strong></li>
<li>遍历二叉树时间复杂度分析<br />
a. 时间复杂度O(n)<br />
b. 空间复杂度O(h)<br />
c. 存在时间复杂度O(n),空间复杂度O(1)的方式，Morris遍历</li>
</ul>
<h2 id="递归和master公式"><a class="markdownIt-Anchor" href="#递归和master公式"></a> 递归和Master公式</h2>
<ol>
<li>从思想上理解递归</li>
<li>从实际上理解递归</li>
<li>任何递归函数，都一定可以改成非递归</li>
<li>递归改成非递归的条件<br />
a. 工程上几乎一定要改，除非数据量很大递归深度也很小，归并排序，快速排序，线段树，平衡树<br />
b. 算法笔试中能过就不用该</li>
<li>Master公式<br />
a．所有子问题规模相同的递归才能用master公式，T(n）=a<em>T(n/b）+O(n^c)，a、b、c都是常数<br />
b．如果log(b,a）&lt;c，复杂度为：O(n^c)<br />
c．如果log(b,a）&gt;c，复杂度为：0(n^log(b,a))<br />
d．如果log(b,a）==c，复杂度为：0(n^c</em>logn)</li>
<li>一个补充<br />
<strong>T(n) = 2T(n/2) + O(nlogn),时间复杂度是O(n(logn)^2)</strong></li>
</ol>
<h2 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h2>
<p><a href="https://leetcode.cn/problems/sort-an-array/description/">912. Sort an Array</a></p>
<h2 id="归并分治"><a class="markdownIt-Anchor" href="#归并分治"></a> 归并分治</h2>
<p>1）思考一个问题在大范围上的答案，是否等于，左部分的答案+右部分的答案+跨越左右产生的答案<br />
2）计算“跨越左右产生的答案”时，如果加上左、右各自有序这个设定，会不会获得计算的便利性<br />
<a href="https://leetcode.cn/problems/reverse-pairs/description/">493. Reverse Pairs</a></p>
<h2 id="随机快速排序"><a class="markdownIt-Anchor" href="#随机快速排序"></a> 随机快速排序</h2>
<p><a href="https://leetcode.cn/problems/sort-an-array/description/">912. Sort an Array</a></p>
<h2 id="随机选择算法"><a class="markdownIt-Anchor" href="#随机选择算法"></a> 随机选择算法</h2>
<ul>
<li>无序数组中寻找第K大的数或第K小的数<br />
<a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/description/">215. Kth Largest Element in an Array</a></li>
</ul>
<h2 id="堆结构和堆排序"><a class="markdownIt-Anchor" href="#堆结构和堆排序"></a> 堆结构和堆排序</h2>
<p><a href="https://leetcode.cn/problems/sort-an-array/description/">912. Sort an Array</a></p>
<h2 id="哈希表-有序表和比较器的用法"><a class="markdownIt-Anchor" href="#哈希表-有序表和比较器的用法"></a> 哈希表、有序表和比较器的用法</h2>
<h2 id="堆结构常见题"><a class="markdownIt-Anchor" href="#堆结构常见题"></a> 堆结构常见题</h2>
<ul>
<li>合并K个链表<br />
<a href="https://leetcode.cn/problems/merge-k-sorted-lists/description/">23. Merge k Sorted Lists</a></li>
<li>线段最多重合问题<br />
<a href="https://www.nowcoder.com/questionTerminal/1ae8d0b6bb4e4bcdbf64ec491f63fc37?">线段重合</a></li>
<li>让数组整体累加和减半的最少操作次数<br />
<a href="https://leetcode.cn/problems/minimum-operations-to-halve-array-sum/description/">2208. Minimum Operations to Halve Array Sum</a></li>
</ul>
<h2 id="基数排序"><a class="markdownIt-Anchor" href="#基数排序"></a> 基数排序</h2>
<p><a href="https://leetcode.cn/problems/sort-an-array/description/">912. Sort an Array</a></p>
<h2 id="重要排序算法总结"><a class="markdownIt-Anchor" href="#重要排序算法总结"></a> 重要排序算法总结</h2>
<p>稳定性：同样大小的样本在排序后不改变原有的相对次序。总结如下表：</p>
<table>
<thead>
<tr>
<th>算法</th>
<th>时间</th>
<th>空间</th>
<th>稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td>SelectSort</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>无</td>
</tr>
<tr>
<td>BubbleSort</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>有</td>
</tr>
<tr>
<td>InsertSort</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>有</td>
</tr>
<tr>
<td>MergeSort</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N*logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td>有</td>
</tr>
<tr>
<td>QuickSort</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N*logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>无</td>
</tr>
<tr>
<td>HeapSort</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N*logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>无</td>
</tr>
<tr>
<td>CountSort</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(M)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span></td>
<td>有</td>
</tr>
<tr>
<td>RadixSort</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(M)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span></td>
<td>有</td>
</tr>
</tbody>
</table>
<h2 id="异或运算哪些骚操作"><a class="markdownIt-Anchor" href="#异或运算哪些骚操作"></a> 异或运算哪些骚操作</h2>
<p>异或运算的性质：</p>
<ul>
<li>异或运算可理解为无进位相加</li>
<li>满足交换律、结合律</li>
<li>0^n = n, n^n = 0</li>
<li>整体异或和如果是x，整体中某个部分的异或和如果是y，那么剩下部分的异或和是x^y</li>
<li>a ^ b = c =&gt; a = c ^ b, b = c ^ a;<br />
相关题目：</li>
</ul>
<ol>
<li>交换两个数（注意a, b 地址不能相同）</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap_integers</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b = a ^ b;</span><br><span class="line">    a = a ^ b;</span><br><span class="line">    b = a ^ b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>不用判断和比较，返回两个数的较大值</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * n is 0 or 1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">flip</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n ^ <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 非负为1，负为0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sign</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> bit = ((<span class="number">1</span> &lt;&lt; <span class="number">31</span>) &amp; n) == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">flip</span>(bit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This function has overflow risk.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max_v0</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c = a - b;</span><br><span class="line">    <span class="type">int</span> ra = <span class="built_in">sign</span>(c);</span><br><span class="line">    <span class="type">int</span> rb = <span class="built_in">flip</span>(ra);</span><br><span class="line">    <span class="keyword">return</span> a * ra + b * rb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * better</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max_v1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c = a - b;</span><br><span class="line">    <span class="type">int</span> sa = <span class="built_in">sign</span>(a);</span><br><span class="line">    <span class="type">int</span> sb = <span class="built_in">sign</span>(b);</span><br><span class="line">    <span class="type">int</span> sc = <span class="built_in">sign</span>(c);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> diffab = sa ^ sb;</span><br><span class="line">    <span class="type">int</span> sameab = <span class="built_in">flip</span>(diffab);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ra = diffab * sa + sameab * sc;</span><br><span class="line">    <span class="type">int</span> rb = <span class="built_in">flip</span>(ra);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ra * a + rb * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>找到缺失的数字<br />
<a href="https://leetcode.cn/problems/missing-number/description/">268. Missing Number</a></li>
<li>找到只出现一次的数字<br />
<a href="https://leetcode.cn/problems/single-number/description/">136. Single Number</a></li>
<li>数组中有2个数出现了奇数次，其他的数都出现了偶数次，返回这2个出现了奇数次的数<br />
<a href="https://leetcode.cn/problems/single-number-iii/description/">260. Single Number III</a></li>
<li>数组中只有1种数出现次数少于m次，其他数都出现了m次，返回出现次数小于m次的那种数<br />
<a href="https://leetcode.cn/problems/single-number-ii/description/">137. Single Number II</a></li>
</ol>
<h2 id="位运算的骚操作"><a class="markdownIt-Anchor" href="#位运算的骚操作"></a> 位运算的骚操作</h2>
<ol>
<li>判断一个整数是不是2的幂<br />
<a href="https://leetcode.cn/problems/power-of-two/description/">231. Power of Two</a></li>
<li>判断一个整数是不是3的幂<br />
<a href="https://leetcode.cn/problems/power-of-three/description/">326. Power of Three</a></li>
<li>返回大于等于n的最小的2幂</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">latest2pow</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    --n;</span><br><span class="line"></span><br><span class="line">    n |= n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>区间[left，right]内所有数字&amp;的结果<br />
<a href="https://leetcode.cn/problems/bitwise-and-of-numbers-range/">201. Bitwise AND of Numbers Range</a></li>
<li>反转一个二进制的状态，不是0变1、1变0，是逆序。超自然版<br />
<a href="https://leetcode.cn/problems/reverse-bits/description/">190. Reverse Bits</a></li>
<li>返回一个数二进制中有几个1。超自然版，看完佩服大牛的脑洞，能爽一整天<br />
<a href="https://leetcode.cn/problems/hamming-distance">461. Hamming Distance</a></li>
</ol>
<h2 id="位图"><a class="markdownIt-Anchor" href="#位图"></a> 位图</h2>
<p>位图原理： 其实就是用bit组成的数组来存放值，用bit状态1、0代表存在、不存在，取值和存值操作都用位运算限制是必须为连续范围且不能过大。好处是极大的节省空间，因为1个数字只占用1个bit的空间。<br />
<a href="https://leetcode.cn/problems/design-bitset/description/">2166. Design Bitset</a></p>
<h2 id="位运算实现加减乘除"><a class="markdownIt-Anchor" href="#位运算实现加减乘除"></a> 位运算实现加减乘除</h2>
<p><a href="https://leetcode.cn/problems/divide-two-integers/description/">29. Divide Two Integers</a><br />
代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = a;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = a ^ b;</span><br><span class="line">        b = (a &amp; b) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        a = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">negative</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add</span>(~a, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minus</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add</span>(a, <span class="built_in">negative</span>(b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> bu = b;</span><br><span class="line">    <span class="keyword">while</span> (bu)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((bu &amp; <span class="number">1</span>))</span><br><span class="line">            ans = <span class="built_in">add</span>(ans, a);</span><br><span class="line"></span><br><span class="line">        bu &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a != Integer.min, b != Integer.min</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = a &lt; <span class="number">0</span> ? <span class="built_in">negative</span>(a) : a;</span><br><span class="line">    <span class="type">int</span> y = b &lt; <span class="number">0</span> ? <span class="built_in">negative</span>(b) : b;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i = <span class="built_in">minus</span>(i, <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((x &gt;&gt; i) &gt;= y)</span><br><span class="line">        &#123;</span><br><span class="line">            ans |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            x = <span class="built_in">minus</span>(x, y &lt;&lt; i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a &lt; <span class="number">0</span> ^ b &lt; <span class="number">0</span> ? <span class="built_in">negative</span>(ans) : ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> MIN = std::numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">min</span>();</span><br><span class="line">    <span class="keyword">auto</span> MAX = std::numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="keyword">if</span> (a == MIN &amp;&amp; b == MIN)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a != MIN &amp;&amp; b != MIN)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">div</span>(a, b);</span><br><span class="line">    <span class="keyword">if</span> (b == MIN)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="built_in">negative</span>(<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> MAX;</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">add</span>(a, b &lt; <span class="number">0</span> ? <span class="built_in">negative</span>(b) : b);</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">div</span>(a, b);</span><br><span class="line">    <span class="type">int</span> offset = b &gt; <span class="number">0</span> ? <span class="built_in">negative</span>(<span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add</span>(ans, offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="链表高频题目和必备技巧"><a class="markdownIt-Anchor" href="#链表高频题目和必备技巧"></a> 链表高频题目和必备技巧</h2>
<ol>
<li>返回两个无环链表相交的第一个节点<br />
<a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. Intersection of Two Linked Lists</a></li>
<li>每k个节点一组翻转链表<br />
<a href="https://leetcode.cn/problems/reverse-nodes-in-k-group/">25. Reverse Nodes in k-Group</a></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span> || k &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> tail = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tail == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        tail = tail-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode *pre&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> cur = head;</span><br><span class="line">    <span class="keyword">while</span> (cur != tail)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    head-&gt;next = <span class="built_in">reverseKGroup</span>(tail, k);</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>复制带随机指针的链表<br />
<a href="https://leetcode.cn/problems/copy-list-with-random-pointer/">138. Copy List with Random Pointer</a></li>
<li>判断链表是否是回文结构。这个题的流程设计甚至是考研常用。快慢指针找中点。<br />
<a href="https://leetcode.cn/problems/palindrome-linked-list/">234. Palindrome Linked List</a></li>
<li>返回链表的第一个入环节点。快慢指针找中点。<br />
<a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">142. Linked List Cycle II</a></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> slow = head;</span><br><span class="line">        <span class="keyword">auto</span> fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast &amp;&amp; fast-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="literal">nullptr</span> || fast-&gt;next == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span> (slow != fast)</span><br><span class="line">        &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>在链表上排序。要求时间复杂度0（n*1ogn)，额外空间复杂度0（1），还要求排序有稳定性<br />
<a href="https://leetcode.cn/problems/sort-list/">148. Sort List</a></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">sortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sort_list</span>(head, <span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode *<span class="title">sort_list</span><span class="params">(ListNode *head, ListNode *tail)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">if</span> (head-&gt;next == tail)</span><br><span class="line">    &#123;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> slow = head;</span><br><span class="line">    <span class="keyword">auto</span> fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != tail &amp;&amp; fast-&gt;next != tail)</span><br><span class="line">    &#123;</span><br><span class="line">        slow = slow-&gt;next;</span><br><span class="line">        fast = fast-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> mid = slow;</span><br><span class="line">    <span class="keyword">auto</span> h1 = <span class="built_in">sort_list</span>(head, mid);</span><br><span class="line">    <span class="keyword">auto</span> h2 = <span class="built_in">sort_list</span>(mid, tail);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">merge</span>(h1, h2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode *<span class="title">merge</span><span class="params">(ListNode *h1, ListNode *h2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListNode dummyhead;</span><br><span class="line">    <span class="keyword">auto</span> cur = &amp;dummyhead;</span><br><span class="line">    <span class="keyword">auto</span> cur1 = h1;</span><br><span class="line">    <span class="keyword">auto</span> cur2 = h2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur1 &amp;&amp; cur2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur1-&gt;val &lt;= cur2-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            cur-&gt;next = cur1;</span><br><span class="line">            cur1 = cur1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cur-&gt;next = cur2;</span><br><span class="line">            cur2 = cur2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cur1)</span><br><span class="line">        cur-&gt;next = cur1;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cur2)</span><br><span class="line">        cur-&gt;next = cur2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummyhead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数据结构设计高频题"><a class="markdownIt-Anchor" href="#数据结构设计高频题"></a> 数据结构设计高频题</h2>
<ol>
<li>setAll功能的哈希表<br />
<a href="https://www.nowcoder.com/practice/7c4559f138e74ceb9ba57d76fd169967">设计有setAll功能的哈希表 </a></li>
<li>实现LRU结构<br />
<a href="https://leetcode.cn/problems/lru-cache/">146. LRU Cache</a></li>
<li>插入、删除和获取随机元素0(1)时间的结构<br />
<a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/description/">380. Insert Delete GetRandom O(1)</a></li>
<li>插入、删除和获取随机元素0(1)时间且允许有重复数字的结构<br />
<a href="https://leetcode.cn/problems/insert-delete-getrandom-o1-duplicates-allowed/description/">381. Insert Delete GetRandom O(1) - Duplicates allowed</a></li>
<li>快速获得数据流的中位数的结构<br />
<a href="https://leetcode.cn/problems/find-median-from-data-stream/description/">295. Find Median from Data Stream</a></li>
<li>最大频率栈<br />
<a href="https://leetcode.cn/problems/maximum-frequency-stack/description/">895. Maximum Frequency Stack</a></li>
<li>全0(1)的数据结构<br />
<a href="https://leetcode.cn/problems/all-oone-data-structure/description/">432. All O`one Data Structure</a></li>
</ol>
<h2 id="二叉树高频题目-上-不含树型dp"><a class="markdownIt-Anchor" href="#二叉树高频题目-上-不含树型dp"></a> 二叉树高频题目-上-不含树型dp</h2>
<ol>
<li>二叉树的层序遍历<br />
<a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/description/">102. Binary Tree Level Order Traversal</a></li>
<li>二叉树的锯齿形层序遍历<br />
<a href="https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/description/">103. Binary Tree Zigzag Level Order Traversal</a></li>
<li>二叉树的最大特殊宽度<br />
<a href="https://leetcode.cn/problems/maximum-width-of-binary-tree/description/">662. Maximum Width of Binary Tree</a></li>
<li>求二叉树的最大深度、求二叉树的最小深度<br />
<a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/">104. Maximum Depth of Binary Tree</a><br />
<a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/description/">111. Minimum Depth of Binary Tree</a></li>
<li>二叉树先序序列化和反序列化<br />
<a href="https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/">297. Serialize and Deserialize Binary Tree</a></li>
<li>二叉树按层序列化和反序列化<br />
<a href="https://leetcode.cn/problems/serialize-and-deserialize-bst/">449. Serialize and Deserialize BST</a></li>
<li>利用先序与中序遍历序列构造二叉树<br />
<a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/">105. Construct Binary Tree from Preorder and Inorder Traversal</a></li>
<li>验证完全二叉树<br />
<a href="https://leetcode.cn/problems/check-completeness-of-a-binary-tree/description/">958. Check Completeness of a Binary Tree</a></li>
<li>求完全二叉树的节点个数，要求时间复杂度低于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br />
<a href="https://leetcode.cn/problems/count-complete-tree-nodes/description/">222. Count Complete Tree Nodes</a></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">countNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> level = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> node = root;</span><br><span class="line">        <span class="keyword">while</span> (node-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            node = node-&gt;left;</span><br><span class="line">            ++level;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> low = <span class="number">1</span> &lt;&lt; level;</span><br><span class="line">        <span class="type">int</span> high = (<span class="number">1</span> &lt;&lt; (level<span class="number">+1</span>)) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = (high - low + <span class="number">1</span>) / <span class="number">2</span> + low;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">exists</span>(root, level, mid))</span><br><span class="line">                low = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">exists</span><span class="params">(TreeNode *root, <span class="type">int</span> level, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> bits = <span class="number">1</span> &lt;&lt; (level<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">auto</span> node = root;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; bits)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((k &amp; bits) == <span class="number">0</span>)</span><br><span class="line">                node = node-&gt;left;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                node = node-&gt;right;</span><br><span class="line">            bits &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node != <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="二叉树高频题目-下-不含树型dp"><a class="markdownIt-Anchor" href="#二叉树高频题目-下-不含树型dp"></a> 二叉树高频题目-下-不含树型dp</h2>
<ol>
<li>普通二叉树上寻找两个节点的最近公共祖先。<br />
<a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/description/">236. Lowest Common Ancestor of a Binary Tree</a></li>
<li>搜索二叉树上寻找两个节点的最近公共祖先<br />
<a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/description/">235. Lowest Common Ancestor of a Binary Search Tree</a></li>
<li>收集累加和等于aim的所有路径（递归恢复现场）<br />
<a href="https://leetcode.cn/problems/path-sum-ii/description/">113. Path Sum II</a></li>
<li>验证平衡二叉树（树型dp沾边）<br />
<a href="https://leetcode.cn/problems/balanced-binary-tree/description/">110. Balanced Binary Tree</a></li>
<li>验证搜索二叉树（树型dp沾边）<br />
<a href="https://leetcode.cn/problems/validate-binary-search-tree/description/">98. Validate Binary Search Tree</a></li>
<li>修剪搜索二叉树<br />
<a href="https://leetcode.cn/problems/trim-a-binary-search-tree/description/">669. Trim a Binary Search Tree</a></li>
<li>二叉树打家劫舍问题（树型dp沾边)<br />
<a href="https://leetcode.cn/problems/house-robber-iii/description/">337. House Robber III</a></li>
</ol>
<h2 id="常见经典递归过程解析"><a class="markdownIt-Anchor" href="#常见经典递归过程解析"></a> 常见经典递归过程解析</h2>
<ol>
<li>返回字符串全部子序列，子序列要求去重。时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0(2^n*n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br />
<a href="https://www.nowcoder.com/practice/92e6247998294f2c933906fdedbc6e6a">字符串的全部子序列 </a></li>
<li>返回数组的所有组合，可以无视元素顺序，但要求去重。时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0(2^n*n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br />
<a href="https://leetcode.cn/problems/subsets-ii/description/">90. Subsets II</a></li>
<li>返回没有重复值数组的全部排列。时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0(n!*n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br />
<a href="https://leetcode.cn/problems/permutations/">46. Permutations</a></li>
<li>返回可能有重复值数组的全部排列，排列要求去重。时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo>∗</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0(n!*n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br />
<a href="https://leetcode.cn/problems/permutations-ii/description/">47. Permutations II</a></li>
<li>用递归逆序一个栈。时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(std::stack&lt;<span class="type">int</span>&gt; &amp;stack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stack.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> val = <span class="built_in">bottom_out</span>(stack);</span><br><span class="line">    <span class="built_in">reverse</span>(stack);</span><br><span class="line">    stack.<span class="built_in">push</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bottom_out</span><span class="params">(std::stack&lt;<span class="type">int</span>&gt; &amp;stack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> val = stack.<span class="built_in">top</span>();</span><br><span class="line">    stack.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (stack.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> next = <span class="built_in">bottom_out</span>(stack);</span><br><span class="line">    stack.<span class="built_in">push</span>(val);</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>用递归排序一个栈。时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">deep</span><span class="params">(std::stack&lt;<span class="type">int</span>&gt; &amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(std::stack&lt;<span class="type">int</span>&gt; &amp;, <span class="type">int</span> deep)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">times</span><span class="params">(std::stack&lt;<span class="type">int</span>&gt; &amp;, <span class="type">int</span> max, <span class="type">int</span> deep)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(std::stack&lt;<span class="type">int</span>&gt; &amp;, <span class="type">int</span> max, <span class="type">int</span> times, <span class="type">int</span> deep)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(std::stack&lt;<span class="type">int</span>&gt; &amp;stack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">deep</span>(stack);</span><br><span class="line">    <span class="keyword">while</span> (d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> m = <span class="built_in">max</span>(stack, d);</span><br><span class="line">        <span class="keyword">auto</span> t = <span class="built_in">times</span>(stack, m, d);</span><br><span class="line">        <span class="built_in">down</span>(stack, m, t, d);</span><br><span class="line">        d -= t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">deep</span><span class="params">(std::stack&lt;<span class="type">int</span>&gt; &amp;stack)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stack.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> top = stack.<span class="built_in">top</span>();</span><br><span class="line">    stack.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">auto</span> d = <span class="built_in">deep</span>(stack) + <span class="number">1</span>;</span><br><span class="line">    stack.<span class="built_in">push</span>(top);</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(std::stack&lt;<span class="type">int</span>&gt; &amp;stack, <span class="type">int</span> deep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deep == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> std::numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">min</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> top = stack.<span class="built_in">top</span>();</span><br><span class="line">    stack.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">auto</span> restmax = <span class="built_in">max</span>(stack, deep - <span class="number">1</span>);</span><br><span class="line">    stack.<span class="built_in">push</span>(top);</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">max</span>(top, restmax);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">times</span><span class="params">(std::stack&lt;<span class="type">int</span>&gt; &amp;stack, <span class="type">int</span> max, <span class="type">int</span> deep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deep == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> num = stack.<span class="built_in">top</span>();</span><br><span class="line">    stack.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">auto</span> resttimes = <span class="built_in">times</span>(stack, max, deep - <span class="number">1</span>);</span><br><span class="line">    stack.<span class="built_in">push</span>(num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (num == max ? <span class="number">1</span> : <span class="number">0</span>) + resttimes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(std::stack&lt;<span class="type">int</span>&gt; &amp;stack, <span class="type">int</span> max, <span class="type">int</span> times, <span class="type">int</span> deep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deep == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; times; ++i)</span><br><span class="line">            stack.<span class="built_in">push</span>(max);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> num = stack.<span class="built_in">top</span>();</span><br><span class="line">    stack.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">down</span>(stack, max, times, deep - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (num != max)</span><br><span class="line">        stack.<span class="built_in">push</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>打印n层汉诺塔问题的最优移动轨迹。时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> hanoi &#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> from, <span class="type">char</span> to, <span class="type">char</span> other)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hanoi_do</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    std::cout &lt;&lt; std::format(<span class="string">&quot;注意盘子是从小到大编号为1-&#123;&#125;，移动过程如下:\n&quot;</span>, n);</span><br><span class="line">    <span class="built_in">move</span>(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> from, <span class="type">char</span> to, <span class="type">char</span> other)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; std::format(<span class="string">&quot;圆盘: &#123;&#125;: &#123;&#125; -&gt; &#123;&#125;\n&quot;</span>, n, from, to);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">move</span>(n<span class="number">-1</span>, from, other, to);</span><br><span class="line">    std::cout &lt;&lt; std::format(<span class="string">&quot;圆盘: &#123;&#125;: &#123;&#125; -&gt; &#123;&#125;\n&quot;</span>, n, from, to);</span><br><span class="line">    <span class="built_in">move</span>(n<span class="number">-1</span>, other, to, from);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_hanoi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">hanoi_do</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Output: </span></span><br><span class="line"><span class="comment"> * 注意盘子是从小到大编号为1-3，移动过程如下:</span></span><br><span class="line"><span class="comment"> * 圆盘: 1: A -&gt; B</span></span><br><span class="line"><span class="comment"> * 圆盘: 2: A -&gt; C</span></span><br><span class="line"><span class="comment"> * 圆盘: 1: B -&gt; C</span></span><br><span class="line"><span class="comment"> * 圆盘: 3: A -&gt; B</span></span><br><span class="line"><span class="comment"> * 圆盘: 1: C -&gt; A</span></span><br><span class="line"><span class="comment"> * 圆盘: 2: C -&gt; B</span></span><br><span class="line"><span class="comment"> * 圆盘: 1: A -&gt; B</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="嵌套类问题的递归解题套路"><a class="markdownIt-Anchor" href="#嵌套类问题的递归解题套路"></a> 嵌套类问题的递归解题套路</h2>
<ol>
<li>含有嵌套的表达式求值。时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br />
<a href="https://leetcode.cn/problems/basic-calculator-iii/description/">772. 基本计算器 III - 力扣（LeetCode）Plus会员</a></li>
<li>含有嵌套的字符串解码。时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br />
<a href="https://leetcode.cn/problems/decode-string/description/">394. Decode String</a></li>
<li>含有嵌套的分子式求原子数量。时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span><br />
<a href="https://leetcode.cn/problems/number-of-atoms/description/">726. Number of Atoms</a></li>
</ol>
<h2 id="n皇后问题-重点是位运算的版本"><a class="markdownIt-Anchor" href="#n皇后问题-重点是位运算的版本"></a> N皇后问题-重点是位运算的版本</h2>
<p>[52. N-Queens II](<a href="https://leetcode.cn/problems/n-queens-ii/description">https://leetcode.cn/problems/n-queens-ii/description</a><br />
<strong>用位运算的方法（巧妙、常数时间快，推荐）</strong></p>
<ol>
<li>intcol：0．.i-1行皇后放置的位置因为正下方向延伸的原因，哪些列不能再放皇后</li>
<li>int1eft：0…i-1行皇后放置的位置因为左下方向延伸的原因，哪些列不能再放皇后</li>
<li>intright：0…i-1行皇后放置的位置因为右下方向延伸的原因，哪些列不能再放皇后</li>
<li>根据col、left、right，用位运算快速判断能放哪些列</li>
<li>把能放的列都尝试一遍，每次尝试修改3个数字表示当前的决策，后续返回的答案都累加返回</li>
</ol>
<h2 id="最大公约数-同余原理"><a class="markdownIt-Anchor" href="#最大公约数-同余原理"></a> 最大公约数、同余原理</h2>
<p><a href="https://leetcode.cn/problems/nth-magical-number/"> 878. Nth Magical Number </a><br />
求最大公约数</p>
<ol>
<li>欧几里得算法的过程：辗转相除法</li>
<li>正确性的证明过程见代码注释部分，我润色的证明过程非常好懂，不过直接记忆过程即可</li>
<li>求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">gcd(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span>，其中a&gt;b，时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>a</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O((loga)^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">a</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，时间复杂度证明略，这个复杂度足够好了</li>
<li>简单转化就可以求最小公倍数</li>
<li>更高效求最大公约数的Stein算法、由最大公约数扩展出的“裴蜀定理”，比赛同学有兴趣可以继续研究</li>
<li>不比赛的同学，哪怕你的目标是最顶级的公司应聘、还是考研，掌握这个只有一行的函数已经足够！</li>
</ol>
<p>同余原理</p>
<ol>
<li>绍背景</li>
<li>法、乘法每一步计算完后直接取模，减法则为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">(a-b+m)\%m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathnormal">m</span></span></span></span></li>
<li>要确保过程中不溢出，所以往往乘法运算的用long类型做中间变量</li>
<li>除法的同余需要求逆元，会在【扩展】课程里讲述，较难的题目才会涉及</li>
</ol>
<h2 id="对数器打表找规律的技巧"><a class="markdownIt-Anchor" href="#对数器打表找规律的技巧"></a> 对数器打表找规律的技巧</h2>
<p><em>对数器打表找规律的过程</em></p>
<ol>
<li>可以用最暴力的实现求入参不大情况下的答案，往往只需要最基本的递归能力</li>
<li>打印入参不大情况下的答案，然后观察规律</li>
<li>规律变成代码，就是最优解了</li>
</ol>
<p>题目1：使用规格8和规格6的袋子买苹果问题</p>
<ul>
<li>解法如题目2，不在展示代码；</li>
</ul>
<p>题目2：A和B轮流吃草最终谁会赢</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Onamespace whowineatinggrass &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 草一共有n的重量，两只牛轮流吃草，A牛先吃，B牛后吃</span></span><br><span class="line"><span class="comment"> * 每只牛在自己的回合，吃草的重量必须是4的幂，1、4、16、64。。。</span></span><br><span class="line"><span class="comment"> * 谁在自己的回合正好把草吃完谁赢，根据输入的n，返回谁赢</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">whowin</span><span class="params">(<span class="type">int</span> grassn)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">simple_f</span><span class="params">(<span class="type">int</span> grassn, <span class="type">char</span> cur)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">whowin_v</span><span class="params">(<span class="type">int</span> grassn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">whowin</span><span class="params">(<span class="type">int</span> grassn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">simple_f</span>(grassn, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">simple_f</span><span class="params">(<span class="type">int</span> grassn, <span class="type">char</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> enemy = cur == <span class="string">&#x27;A&#x27;</span> ? <span class="string">&#x27;B&#x27;</span> : <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (grassn &lt; <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">return</span> ( grassn == <span class="number">0</span> || grassn == <span class="number">2</span> ) ? enemy : cur;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pick = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (pick &lt;= grassn)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">simple_f</span>(grassn - pick, enemy) == cur)</span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line"></span><br><span class="line">        pick *= <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> enemy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">whowin_v</span><span class="params">(<span class="type">int</span> grassn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (((grassn % <span class="number">5</span>) &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_who_win</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; std::format(<span class="string">&quot;&#123;&#125;: &#123;&#125;\n&quot;</span>, i, <span class="built_in">whowin</span>(i));</span><br><span class="line">        std::cout &lt;&lt; std::format(<span class="string">&quot;&#123;&#125;: &#123;&#125;\n&quot;</span>, i, <span class="built_in">whowin_v</span>(i));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>题目3：判断一个数字是否是若干数量（数量&gt;1)的连续正整数的和</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> continuous_sum &#123;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_continuous_sum</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; n == (n &amp; -n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_continuous_sum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; std::format(<span class="string">&quot;&#123;&#125;: &#123;&#125;\n&quot;</span>, i, <span class="built_in">is_continuous_sum</span>(i) ? <span class="string">&quot;T&quot;</span> : <span class="string">&quot;F&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>题目4：要求只有一个长度&gt;=2的回文子串，求所有长度为n的red字符串中好串的数量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 可以用r、e、d三种字符拼接字符串，如果拼出来的字符串中</span></span><br><span class="line"><span class="comment"> * 有且仅有1个长度&gt;=2的回文子串，那么这个字符串定义为&quot;好串”</span></span><br><span class="line"><span class="comment"> * 1 7 1/ I/ 1///</span></span><br><span class="line"><span class="comment"> * 返回长度为n的所有可能的字符串中，好串有多少个</span></span><br><span class="line"><span class="comment"> * 结果对1000000007取模，1&lt;=n&lt;=10^9 示例：n =1，输出0 n=2，输出3  n=3，输出18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">namespace</span> palindrome_string &#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count_better_str</span><span class="params">(<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">long</span>)(len + <span class="number">1</span>) * <span class="number">6</span> % <span class="number">1000&#x27;000&#x27;007</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_count_better_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; std::format(<span class="string">&quot;&#123;&#125;: &#123;&#125;\n&quot;</span>, i, <span class="built_in">count_better_str</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="根据数据量猜解法的技巧-天字第一号重要技巧"><a class="markdownIt-Anchor" href="#根据数据量猜解法的技巧-天字第一号重要技巧"></a> 根据数据量猜解法的技巧-天字第一号重要技巧</h2>
<p><em>一个基本的事实</em></p>
<ol>
<li>C/C++运行时间1s，java/python/go等其他语言运行时间1s~2s，对应的常数指令操作量是10<sup>7～10</sup>8，不管什么测试平台，不管什么cpu，都是这个数量级;</li>
<li>题目要给定各个入参的范围最大值，正式笔试、比赛的题目一定都会给，面试中要和面试官确认</li>
<li>对于自己设计的算法，时间复杂度要有准确的估计</li>
</ol>
<p>这个技巧太重要了！既可以提前获知自己的方法能不能通过，也可以对题目的分析有引导作用！</p>
<p>题目1：最优的技能释放顺序<br />
<a href="nowcoder.com/practice/d88ef50f8dab4850be8cd4b95514bbbd"> nowcoder消灭怪物 </a><br />
题目2：超级回文数的数目<br />
<a href="https://leetcode.cn/problems/super-palindromes/"> 906. Super Palindromes </a><br />
<a href="https://leetcode.cn/problems/palindrome-number/description/"> 9. Palindrome Number </a></p>
<h2 id="前缀树原理和代码详解"><a class="markdownIt-Anchor" href="#前缀树原理和代码详解"></a> 前缀树原理和代码详解</h2>
<p><strong>前缀树的使用场景：需要根据前缀信息来查询的场景</strong><br />
<strong>前缀树的优点：根据前缀信息选择树上的分支，可以节省大量的时间</strong><br />
<strong>前缀树的缺点：比较浪费空间，和总字符数量有关前缀树的定制：pass、end等信息</strong><br />
<a href="https://leetcode.cn/problems/implement-trie-ii-prefix-tree/">LeetCode 1804. Implement Trie II (Prefix Tree)-Plus</a></p>
<p>前缀树的实现方式：<br />
1）类描述的实现方式（动态结构）。不推荐！虽然最常用。</p>
<ol>
<li>路的可能性范围较小，用固定数组实现路</li>
<li>路的可能性范围较大，用哈希表实现路</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> prefix_tree &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">trie</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">trie</span>() : <span class="built_in">root</span>(<span class="keyword">new</span> trie_node) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(std::string_view word)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> node = root;</span><br><span class="line">        node-&gt;pass++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, idx; i &lt; word.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            idx = word[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;next[idx] == <span class="literal">nullptr</span>)</span><br><span class="line">                node-&gt;next[idx] = <span class="keyword">new</span> trie_node;</span><br><span class="line">            node = node-&gt;next[idx];</span><br><span class="line">            node-&gt;pass++;</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;end++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]]</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count_words_equal_to</span><span class="params">(std::string_view word)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> node = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> i : word)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> idx = i - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;next[idx] == <span class="literal">nullptr</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            node = node-&gt;next[idx];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [[nodiscard]]</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count_words_starting_with</span><span class="params">(std::string_view prefix)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> node = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, idx; i &lt; prefix.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            idx = prefix[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;next[idx] == <span class="literal">nullptr</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            node = node-&gt;next[idx];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;pass;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(std::string_view word)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">count_words_equal_to</span>(word) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> node = root;</span><br><span class="line">            node-&gt;pass--;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, idx; i &lt; word.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                idx = word[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (--node-&gt;next[idx]-&gt;pass == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">delete_nodes</span>(node-&gt;next[idx], i, word);</span><br><span class="line">                    node-&gt;next[idx] = <span class="literal">nullptr</span>;</span><br><span class="line">                    <span class="keyword">return</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node-&gt;next[idx];</span><br><span class="line">            &#125;</span><br><span class="line">            --node-&gt;end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">trie_node</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pass&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> end&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        trie_node *next[<span class="number">26</span>]&#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">delete_nodes</span><span class="params">(trie_node *node, <span class="type">int</span> start, std::string_view word)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start + <span class="number">1</span>, idx; i &lt; word.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            idx = word[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">auto</span> p = node;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;next[idx])</span><br><span class="line">                node = node-&gt;next[idx];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    trie_node *root;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2）静态数组的实现方式。推荐！不仅笔试，就连比赛也能保证使用。</p>
<ol>
<li>一切都是静态数组来实现，提交准备好够用的空间</li>
<li>如果路的可能性范围较大，就用每一位的信息建树。下节课前缀树的题目里展示<br />
<a href="nowcoder.com/practice/7f8a8553ddbf4eaab749ec988726702b">字典树的实现-nowcoder</a></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> static_trie &#123;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">150000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> trie[N][<span class="number">26</span>];</span><br><span class="line"><span class="type">int</span> pass[N], end[N];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rebuild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        std::<span class="built_in">fill_n</span>(trie[i], <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        pass[i] = end[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(std::string_view word)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> node = <span class="number">1</span>;</span><br><span class="line">    pass[node]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, path; i &lt; word.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        path = word[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (trie[node][path] == <span class="number">0</span>)</span><br><span class="line">            trie[node][path] = ++cnt;</span><br><span class="line">        node = trie[node][path];</span><br><span class="line">        pass[node]++;</span><br><span class="line">    &#125;</span><br><span class="line">    end[node]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(std::string_view word)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> node = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, path; i &lt; word.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        path = word[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (trie[node][path] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        node = trie[node][path];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> end[node];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prefix_number</span><span class="params">(std::string_view word)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> node = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, path; i &lt; word.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        path = word[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (trie[node][path] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        node = trie[node][path];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pass[node];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_word</span><span class="params">(std::string_view word)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">search</span>(word))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> node = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, path; i &lt; word.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            path = word[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (--pass[trie[node][path]] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                trie[node][path] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = trie[node][path];</span><br><span class="line">        &#125;</span><br><span class="line">        end[node]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">entry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, op;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">25</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="built_in">rebuild</span>();</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>, &amp;op, str);</span><br><span class="line">        <span class="keyword">switch</span> (op)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">insert</span>(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">delete_word</span>(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">search</span>(str))</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">prefix_number</span>(str));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="前缀树的相关题目"><a class="markdownIt-Anchor" href="#前缀树的相关题目"></a> 前缀树的相关题目</h2>
<p>题目1：<a href="nowcoder.com/practice/c552d3b4dfda49ccb883a6371d9a6932">接头密匙-nowcoder</a><br />
题目2：数组中两个数的最大异或值<br />
<a href="https://leetcode.cn/problems/maximum-xor-of-two-numbers-in-an-array/description/">421. Maximum XOR of Two Numbers in an Array</a><br />
题目3 在二维字符数组中搜索可能的单词<br />
<a href="https://leetcode.cn/problems/word-search-ii/"> 212. Word Search II </a></p>
<h2 id="构建前缀信息的技巧-解决子数组相关问题"><a class="markdownIt-Anchor" href="#构建前缀信息的技巧-解决子数组相关问题"></a> 构建前缀信息的技巧-解决子数组相关问题</h2>
<p>前置知识：讲解026-哈希表的用法解决如下问题，时间复杂度0（n）</p>
<p>题目1：构建前缀和数组。快速解决子数组范围求和的问题<br />
<a href="https://leetcode.cn/problems/range-sum-query-immutable/"> 303. Range Sum Query - Immutable </a><br />
题目2：构建前缀和最早出现的位置。返回无序数组中累加和为给定值的最长子数组长度<br />
<a href="https://www.nowcoder.com/practice/36fb0fd3c656480c92b569258a1223d5">未排序数组中累加和为给定值的最长子数组长度-nowcoder </a><br />
题目3：构建前缀和出现的次数。返回无序数组中累加和为给定值的子数组数量<br />
<a href="https://leetcode.cn/problems/subarray-sum-equals-k/description/"> 560. Subarray Sum Equals K </a><br />
题目4：构建前缀和最早出现的位置。返回无序数组中正数和负数个数相等的最长子数组长度<br />
<strong>转化为 1，-1 求最长子数组和为0的最大长度</strong><br />
题目5：构建前缀和最早出现的位置。表现良好的最长时间段问题<br />
<a href="https://leetcode.cn/problems/longest-well-performing-interval/">1124. Longest Well-Performing Interval</a><br />
题目6：构建前缀和余数最早出现的位置。移除的最短子数组长度，使得剩余元素的累加和能被p整除<br />
<a href="https://leetcode.cn/problems/make-sum-divisible-by-p/"> 1590. Make Sum Divisible by P </a><br />
题目7：构建前缀奇偶状态最早出现的位置。每个元音包含偶数次的最长子串长度<br />
<a href="https://leetcode.cn/problems/find-the-longest-substring-containing-vowels-in-even-counts/"> 1371. Find the Longest Substring Containing Vowels in Even Counts </a></p>
<h2 id="一维差分与等差数列差分"><a class="markdownIt-Anchor" href="#一维差分与等差数列差分"></a> 一维差分与等差数列差分</h2>
<p>一维差分：太简单了，没有理解难度<br />
<a href="https://leetcode.cn/problems/corporate-flight-bookings/"> 1109. Corporate Flight Bookings </a></p>
<p>等差数列差分问题描述：<br />
一开始1~n范围上的数字都是0。接下来一共有m个操作。<br />
每次操作：l<sub>r范围上依次加上首项s、末项e、公差d的数列最终1</sub>n范围上的每个数字都要正确得到</p>
<p>等差数列差分的过程：<br />
每个操作调用set方法<br />
所有操作完成后在arr上生成两遍前缀和，即调用build方法 arr里就是最终1~n范围上的每个数字</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(<span class="type">int</span> l，<span class="type">int</span> r，<span class="type">int</span> s，<span class="type">int</span> e, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    arr[l]   += s;</span><br><span class="line">    arr[l<span class="number">+1</span>] += d - s; </span><br><span class="line">    arr[r<span class="number">+1</span>] -= d + e;</span><br><span class="line">    arr[r<span class="number">+2</span>] += e; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>（<span class="type">int</span> i = <span class="number">1</span>；i &lt;= n；i++）</span><br><span class="line">        arr[i] += arr[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>（<span class="type">int</span> i = <span class="number">1</span>；i &lt;= n；i++）</span><br><span class="line">        arr[i] += arr[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二维前缀和"><a class="markdownIt-Anchor" href="#二维前缀和"></a> 二维前缀和</h2>
<p><a href="https://leetcode.cn/problems/range-sum-query-2d-immutable/description/"> 304. Range Sum Query 2D - Immutable </a><br />
<a href="https://leetcode.cn/problems/largest-1-bordered-square/description/"> 1139. Largest 1-Bordered Square </a></p>
<p>目的是预处理出一个结构，以后每次查询二维数组任何范围上的累加和都是0（1）的操作</p>
<ol>
<li>根据原始状况，生成二维前缀和数组sum，<br />
sum[i][]：代表左上角（0，0)到右下角（i，j)这个范围的累加和<br />
sum[i][j] += sum[i][j-1] + sum[i-1][j] - sum[i-1][j-1];</li>
<li>查询左上角(a,b)到右下角（c,d)这个范围的累加和<br />
sum[c][d] - sum[c][b-1] - sum[a-1][d] + sum[a-1][b-1];</li>
<li>实际过程中往往补第0行、第0列来减少很多条件判断。当然也可以不补。根据个人习惯决定。</li>
</ol>
<h2 id="滑动窗口技巧与相关题目"><a class="markdownIt-Anchor" href="#滑动窗口技巧与相关题目"></a> 滑动窗口技巧与相关题目</h2>
<p>滑动窗口：维持左、右边界都不回退的一段范围，来求解很多子数组（串）的相关问题<br />
滑动窗口的关键：找到范围和答案指标之间的单调性关系 (类似贪心)<br />
滑动过程：滑动窗口可以用简单变量或者结构来维护信息</p>
<p>求解大流程：求子数组在每个位置开头或结尾情况下的答案（开头还是结尾在于个人习惯）<br />
<strong>注意：</strong><br />
滑动窗口维持最大值或者最小值的更新结构<br />
<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/"> 209. Minimum Size Subarray Sum </a><br />
<a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/"> 3. Longest Substring Without Repeating Characters </a><br />
<a href="https://leetcode.cn/problems/gas-station/description/"> 134. Gas Station </a><br />
<a href="https://leetcode.cn/problems/replace-the-substring-for-balanced-string/description/"> 1234. Replace the Substring for Balanced String </a><br />
<a href="https://leetcode.cn/problems/subarrays-with-k-different-integers/description/"> 992. Subarrays with K Different Integers </a><br />
<a href="https://leetcode.cn/problems/longest-substring-with-at-least-k-repeating-characters/description/"> 395. Longest Substring with At Least K Repeating Characters </a></p>
<h2 id="双指针技巧与相关题目"><a class="markdownIt-Anchor" href="#双指针技巧与相关题目"></a> 双指针技巧与相关题目</h2>
<p>设置两个指针的技巧，其实这种说法很宽泛，似乎没什么可总结的</p>
<ol>
<li>有时候所谓的双指针技巧，就单纯是代码过程用双指针的形式表达出来而已。<br />
没有单调性（贪心）方面的考虑</li>
<li>有时候的双指针技巧包含单调性（贪心）方面的考虑，牵扯到可能性的取舍。对分析能力的要求会变高。其实是先有的思考和优化，然后代码变成了双指针的形式。</li>
<li>所以，双指针这个“皮”不重要，分析题目单调性（贪心）方面的特征，这个能力才重要。常见的双指针</li>
</ol>
<p>类型：</p>
<ol>
<li>同向双指针</li>
<li>快慢双指针</li>
<li>从两头往中间的双指针</li>
<li>其他</li>
</ol>
<p><a href="https://leetcode.cn/problems/sort-array-by-parity-ii/description/"> 922. Sort Array By Parity II </a><br />
<a href="https://leetcode.cn/problems/find-the-duplicate-number/description/"> 287. Find the Duplicate Number </a><br />
<a href="https://leetcode.cn/problems/trapping-rain-water/description/"> 42. Trapping Rain Water </a><br />
<a href="https://leetcode.cn/problems/boats-to-save-people/description/"> 881. Boats to Save People </a><br />
<a href="https://leetcode.cn/problems/container-with-most-water/description/"> 11. Container With Most Water </a><br />
<a href="https://leetcode.cn/problems/heaters/description/"> 475. Heaters </a><br />
<a href="https://leetcode.cn/problems/first-missing-positive/description/"> 41. First Missing Positive </a></p>
<h2 id="二分答案法与相关题目"><a class="markdownIt-Anchor" href="#二分答案法与相关题目"></a> 二分答案法与相关题目</h2>
<p><strong>二分答案法</strong><br />
1）估计最终答案可能的范围是什么<br />
2）分析问题的答案和给定条件之间的单调性，大部分时候只需要用到自然智慧<br />
3）建立一个f函数，当答案固定的情况下，判断给定的条件是否达标<br />
4）在最终答案可能的范围上不断二分搜索，每次用f函数判断，直到二分结束，找到最合适的答案<br />
<a href="https://leetcode.cn/problems/koko-eating-bananas/description/"> 875. Koko Eating Bananas </a><br />
<a href="https://leetcode.cn/problems/split-array-largest-sum/description/"> 410. Split Array Largest Sum </a><br />
<a href="https://leetcode.cn/problems/find-k-th-smallest-pair-distance/description/"> 719. Find K-th Smallest Pair Distance </a><br />
<a href="https://leetcode.cn/problems/maximum-running-time-of-n-computers/description/"> 2141. Maximum Running Time of N Computers </a></p>
<h2 id="单调栈-上"><a class="markdownIt-Anchor" href="#单调栈-上"></a> 单调栈-上</h2>
<p>单调栈最经典的用法是解决如下问题：<br />
每个位置都求：<br />
0）当前位置的 <strong>左侧</strong>比当前位置的数字<strong>小</strong>，<strong>且距离最近的位置</strong> 在哪<br />
1）当前位置的 <strong>右侧</strong>比当前位置的数字<strong>小</strong>，<strong>且距离最近的位置</strong> 在哪<br />
或者<br />
每个位置都求：<br />
0）当前位置的 <strong>左侧</strong>比当前位置的数字<strong>大</strong>，<strong>且距离最近的位置</strong> 在哪<br />
1）当前位置的 <strong>右侧</strong>比当前位置的数字<strong>大</strong>，<strong>且距离最近的位置</strong> 在哪</p>
<p>用单调栈的方式可以做到：求解过程中，单调栈所有调整的总代价为0<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，单次操作的均摊代价为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
<h2 id="并查集-上"><a class="markdownIt-Anchor" href="#并查集-上"></a> 并查集-上</h2>
<ul>
<li>并查集的使用是如下的场景</li>
</ul>
<ol>
<li>一开始每个元素都拥有自己的集合，在自己的集合里只有这个元素自己</li>
<li>find(i)：查找i所在集合的代表元素，代表元素来代表i所在的集合</li>
<li>boolean isSameSet(a，b)：判断a和b在不在一个集合里</li>
<li>void union(a，b)：a所在集合所有元素与b所在集合所有元素合并成一个集合</li>
<li>各种操作单次调用的均摊时间复杂度为0(1)</li>
</ol>
<ul>
<li>并查集的两个优化，都发生在find方法里</li>
</ul>
<ol>
<li>扁平化 (一定要做)</li>
<li>小挂大 (可以不做，原论文中是秩的概念，可以理解为粗略高度 或者大小)</li>
</ol>
<ul>
<li>并查集时间复杂度的理解</li>
<li>作为如此简单、小巧的结构</li>
</ul>
<ol>
<li>感性理解单次调用的均摊时间复杂度为O(1)即可，其实为α(n)，阿克曼函数。</li>
<li>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>80</mn></msup></mrow><annotation encoding="application/x-tex">n=10^{ 80 }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>次方即可探明宇宙原子量，α（n）的返回值也不超过6，那就可以认为是O(1)</li>
</ol>
<ul>
<li><a href="https://leetcode.cn/problems/couples-holding-hands/description/">765. Couples Holding Hands </a></li>
<li><a href="https://leetcode.cn/problems/similar-string-groups/description/"> 839. Similar String Groups </a></li>
<li><a href="https://leetcode.cn/problems/number-of-islands/description/"> 200. Number of Islands </a></li>
</ul>
<h2 id="并查集-下"><a class="markdownIt-Anchor" href="#并查集-下"></a> 并查集-下</h2>
<ol>
<li>并查集的小扩展</li>
</ol>
<ul>
<li>可以定制信息：并查集目前有多少个集合，以及给每个集合打上标签信息</li>
<li>相关题目<br />
<a href="https://leetcode.cn/problems/most-stones-removed-with-same-row-or-column/description/"> 947. Most Stones Removed with Same Row or Column </a><br />
<a href="https://leetcode.cn/problems/find-all-people-with-secret/description/"> 2092. Find All People With Secret </a><br />
<a href="https://leetcode.cn/problems/number-of-good-paths/description/"> 2421. Number of Good Paths </a></li>
</ul>
<h2 id="洪水填充"><a class="markdownIt-Anchor" href="#洪水填充"></a> 洪水填充</h2>
<p>前置知识：讲解038-常见经典递归过程解析，其中的带路径的递归过程解析</p>
<ul>
<li>洪水填充是一种很简单的技巧，设置路径信息进行剪枝和统计，类似感染的过程路径信息不撤销，来保证每一片的感染过程可以得到区分</li>
<li>看似是暴力递归过程，其实时间复杂度非常好，遍历次数和样本数量的规模一致</li>
<li>相关题目<br />
<a href="https://leetcode.cn/problems/number-of-islands/description/"> 200. Number of Islands </a><br />
<a href="https://leetcode.cn/problems/surrounded-regions/description/"> 130. Surrounded Regions </a><br />
<a href="https://leetcode.cn/problems/making-a-large-island/description/"> 827. Making A Large Island </a><br />
<a href="https://leetcode.cn/problems/bricks-falling-when-hit/description/"> 803. Bricks Falling When Hit </a></li>
</ul>
<h2 id="建图-链式前向星-拓扑排序"><a class="markdownIt-Anchor" href="#建图-链式前向星-拓扑排序"></a> 建图、链式前向星、拓扑排序</h2>
<p>前置知识：讲解013-数组方式实现队列、讲解019-算法笔试更推荐静态空间的方式、025-堆结构</p>
<ul>
<li>有向<code>Vs</code>无向、不带权<code>Vs</code>带权。入参一般为节点数量n和所有的边或者直接给图建图的三种方式，我们图解一下！</li>
</ul>
<ol>
<li>邻接矩阵 (适合点的数量不多的图)</li>
<li>邻接表 (最常用的方式)</li>
<li>链式前向星(空间要求严苛情况下使用。比赛必用，大厂笔试、面试不常用)</li>
</ol>
<ul>
<li>【必备】课程里涉及图的内容：</li>
</ul>
<ol>
<li>建图、链式前向星、拓扑排序、最小生成树、<code>bfs</code>、双向广搜</li>
<li>最短路(<code>Dijkstra</code>、<code>A*</code>、<code>Floyd</code>、<code>Bellman-Ford</code>、<code>SPFA</code>)</li>
</ol>
<ul>
<li>拓扑排序</li>
</ul>
<ol>
<li>每个节点的前置节点都在这个节点之前</li>
<li>要求：有向图、没有环</li>
<li>拓扑排序的顺序可能不只一种。拓扑排序也可以用来判断有没有环。
<ul>
<li>在图中找到所有入度为0的点</li>
<li>把所有入度为0的点在图中删掉，重点是删掉影响！继续找到入度为0的点并删掉影响</li>
<li>直到所有点都被删掉，依次删除的顺序就是正确的拓扑排序结果</li>
<li>如果无法把所有的点都删掉，说明有向图里有环</li>
</ul>
</li>
</ol>
<ul>
<li>相关题目<br />
<a href="https://leetcode.cn/problems/course-schedule-ii/description/"> 210. Course Schedule II </a><br />
<a href="https://leetcode.cn/problems/stamping-the-sequence/description/"> 936. Stamping The Sequence </a></li>
</ul>
<h2 id="拓扑排序的扩展技巧"><a class="markdownIt-Anchor" href="#拓扑排序的扩展技巧"></a> 拓扑排序的扩展技巧</h2>
<ul>
<li>重要技巧：<br />
<strong>利用拓扑排序的过程，上游节点逐渐推送消息给下游节点的技巧</strong></li>
<li>相关题目<br />
<a href="https://leetcode.cn/problems/loud-and-rich/description/"> 851. Loud and Rich </a><br />
<a href="https://leetcode.cn/problems/parallel-courses-iii/description/"> 2050. Parallel Courses III </a><br />
<a href="https://leetcode.cn/problems/maximum-employees-to-be-invited-to-a-meeting/description/"> 2127. Maximum Employees to Be Invited to a Meeting </a></li>
</ul>
<h2 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h2>
<ol>
<li>最小生成树：在<strong>无向带权图</strong>中选择择一些边，在<strong>保证联通性</strong>的情况下，<strong>边的总权值最小</strong></li>
<li>最小生成树可能不只一棵，只要保证边的总权值最小，就都是正确的最小生成树</li>
<li>如果无向带权图有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>个点，那么最小生成树一定有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>条边</li>
<li>常用算法</li>
</ol>
<ul>
<li>
<p><code>Kruskal</code>算法（最常用）</p>
<ul>
<li>把所有的边，根据权值从小到大排序，从权值小的边开始考虑</li>
<li>如果连接当前的边不会形成环，就选择当前的边</li>
<li>如果连接当前的边会形成环，就不要当前的边</li>
<li>考察完所有边之后，最小生成树的也就得到了</li>
</ul>
</li>
<li>
<p><code>Prim</code>算法 (不算常用)</p>
<ol>
<li>解锁的点的集合叫<code>set</code>（普通集合）、解锁的边的集合叫<code>heap</code>（小根堆）。<code>set</code>和<code>heap</code>都为空。</li>
<li>可从任意点开始，开始点加入到<code>set</code>，开始点的所有边加入到<code>heap</code></li>
<li>从<code>heap</code>中弹出权值最小的边<code>e</code>，查看边<code>e</code>所去往的点<code>x</code>
<ul>
<li>如果<code>x</code>已经在<code>set</code>中，边<code>e</code>舍弃，重复步骤3</li>
<li>如果<code>x</code>不在<code>set</code>中，边<code>e</code>属于最小生成树，把<code>x</code>加入<code>set</code>，重复步骤3</li>
</ul>
</li>
<li>当<code>heap</code>为空，最小生成树的也就得到了</li>
</ol>
</li>
</ul>
<h2 id="宽度优先遍历及其扩展"><a class="markdownIt-Anchor" href="#宽度优先遍历及其扩展"></a> 宽度优先遍历及其扩展</h2>
<ul>
<li>单源、多源宽度优先遍历基本过程</li>
<li><code>01bfs</code>，宽度优先遍历与双端队列结合宽度优先遍历与优先级队列结合</li>
<li>宽度优先遍历与深度优先遍历结合，去生成路径</li>
</ul>
<h3 id="宽度优先遍历基本内容"><a class="markdownIt-Anchor" href="#宽度优先遍历基本内容"></a> 宽度优先遍历基本内容</h3>
<ul>
<li><code>bfs</code>的特点是逐层扩散，从源头点到目标点扩散了几层，最短路就是多少</li>
<li><code>bfs</code>可以使用的特征是<strong>任意两个节点之间的相互距离相同</strong>（无向图）</li>
<li><code>bfs</code>开始时，可以是<strong>单个源头</strong>、也可以是<strong>多个源头</strong></li>
<li><code>bfs</code>频繁使用队列，形式可以是<strong>单点弹出</strong>或者<strong>整层弹出</strong></li>
<li><code>bfs</code>进行时，进入队列的节点需要标记状态，防止同一个节点重复进出队列</li>
<li><code>bfs</code>进行时，可能会包含<strong>剪枝策略</strong>的设计<br />
<a href="https://leetcode.cn/problems/as-far-from-land-as-possible/description/"> 1162. As Far from Land as Possible- 地图分析 </a><br />
<a href="https://leetcode.cn/problems/stickers-to-spell-word/description/"> 691. Stickers to Spell Word- 贴纸拼词 </a></li>
</ul>
<h3 id="01bfs算法"><a class="markdownIt-Anchor" href="#01bfs算法"></a> 01bfs算法</h3>
<ol>
<li><code>distance[i]</code>表示从源点到i点的最短距离，初始时所有点的<code>distance</code>设置为无穷大</li>
<li>源点进入双端队列，<code>distance[源点]=0</code></li>
<li>双端队列头部弹出 ×,
<ul>
<li>如果x是目标点，返回<code>distance[x]</code>表示源点到目标点的最短距离</li>
<li>考察从x出发的每一条边，假设某边去y点，边权为w
<ul>
<li>如果 <code>distance[y］ &gt;distance[x］ + w</code>，处理该边；否则忽略该边</li>
<li>处理时，更新<code>distance[y］= distance[x］ + w</code><br />
如果<code>w==0，y</code>从头部进入双端队列。继续重复步骤3<br />
如果<code>w==1，y</code>从尾部进入双端队列。继续重复步骤3</li>
</ul>
</li>
</ul>
</li>
<li>双端队列为空停止</li>
</ol>
<h2 id="dijkstra算法-分层图最短路"><a class="markdownIt-Anchor" href="#dijkstra算法-分层图最短路"></a> Dijkstra算法、分层图最短路</h2>
<h2 id="从递归入手一维动态规划"><a class="markdownIt-Anchor" href="#从递归入手一维动态规划"></a> 从递归入手一维动态规划</h2>
<p><a href="https://leetcode.cn/problems/fibonacci-number/description/"> 509. Fibonacci Number- 斐波那契数 </a><br />
<a href="https://leetcode.cn/problems/minimum-cost-for-tickets/description/"> 983. Minimum Cost For Tickets- 最低票价 </a><br />
<a href="https://leetcode.cn/problems/decode-ways/description/"> 91. Decode Ways- 解码方法I </a><br />
<a href="https://leetcode.cn/problems/decode-ways-ii/description/"> 639. Decode Ways II- 解码方法II </a><br />
<a href="https://leetcode.cn/problems/ugly-number-ii/description/"> 264. Ugly Number II- 丑数II </a><br />
<a href="https://leetcode.cn/problems/longest-valid-parentheses/description/"> 32. Longest Valid Parentheses- 最长有效括号 </a><br />
<a href="https://leetcode.cn/problems/unique-substrings-in-wraparound-string/description/"> 467. Unique Substrings in Wraparound String- 环绕字符串中唯一的子字符串 </a><br />
<a href="https://leetcode.cn/problems/distinct-subsequences-ii/description/"> 940. Distinct Subsequences II- 不同的子序列II </a></p>
<h2 id="从递归入手二维动态规划"><a class="markdownIt-Anchor" href="#从递归入手二维动态规划"></a> 从递归入手二维动态规划</h2>
<p><a href="https://leetcode.cn/problems/minimum-path-sum/description/"> 64. Minimum Path Sum- 最小路径和 </a><br />
<a href="https://leetcode.cn/problems/word-search/"> 79. Word Search- 单词搜索 (无法改成动态规划） </a><br />
<a href="https://leetcode.cn/problems/longest-common-subsequence/description/"> 1143. Longest Common Subsequence- 最长公共子序列 </a><br />
<a href="https://leetcode.cn/problems/longest-palindromic-subsequence/description/"> 516. Longest Palindromic Subsequence- 最长回文子序列 </a><br />
<a href="https://leetcode.cn/problems/longest-increasing-path-in-a-matrix/description/"> 329. Longest Increasing Path in a Matrix- 矩阵中的最长递增路径 </a><br />
<a href="https://leetcode.cn/problems/distinct-subsequences/description/"> 115. Distinct Subsequences- 不同的子序列 </a><br />
<a href="https://leetcode.cn/problems/edit-distance/description/"> 72. Edit Distance- 编辑距离 </a><br />
<a href="https://leetcode.cn/problems/interleaving-string/description/"> 97. Interleaving String- 交错字符串 </a></p>
<h2 id="从递归入手三维动态规划"><a class="markdownIt-Anchor" href="#从递归入手三维动态规划"></a> 从递归入手三维动态规划</h2>
<p>大体过程都是：</p>
<ul>
<li>写出尝试递归</li>
<li>记忆化搜索（从顶到底的动态规划）</li>
<li>严格位置依赖的动态规划（从底到顶的动态规划）</li>
<li>空间、时间的更多优化</li>
</ul>
<p><a href="https://leetcode.cn/problems/ones-and-zeroes/description/"> 474. Ones and Zeroes-一和零（多维费用背包) </a><br />
<a href="https://leetcode.cn/problems/profitable-schemes/description/"> 879. Profitable Schemes-盈利计划（多维费用背包） </a><br />
<a href="https://leetcode.cn/problems/knight-probability-in-chessboard/"> 688. Knight Probability in Chessboard-骑士在棋盘上的概率 </a><br />
<a href="https://leetcode.cn/problems/paths-in-matrix-whose-sum-is-divisible-by-k/description/"> 2435. Paths in Matrix Whose Sum Is Divisible by K-矩阵中和能被K整除的路径 </a><br />
<a href="https://leetcode.cn/problems/scramble-string/"> 87. Scramble String-扰乱字符串 </a></p>
<h2 id="子数组最大累加和问题与扩展-上"><a class="markdownIt-Anchor" href="#子数组最大累加和问题与扩展-上"></a> 子数组最大累加和问题与扩展-上</h2>
<p><a href="https://leetcode.cn/problems/maximum-subarray/description/"> 53. Maximum Subarray-子数组最大累加和 </a><br />
<a href="https://leetcode.cn/problems/house-robber/description/"> 198. House Robber-不能选相邻元素的最大累加和问题 </a><br />
<a href="https://leetcode.cn/problems/maximum-sum-circular-subarray/"> 918. Maximum Sum Circular Subarray-环形数组的子数组最大累加和 </a><br />
<a href="https://leetcode.cn/problems/house-robber-ii/description/"> 213. House Robber II-环形数组中不能选相邻元素的最大累加和 </a><br />
<a href="https://leetcode.cn/problems/house-robber-iv/description/"> 2560. House Robber IV-打家劫舍IV </a><br />
<a href="https://leetcode.cn/problems/max-submatrix-lcci/description/"> 面试题 17.24. Max Submatrix LCCI-子矩阵最大累加和问题 </a></p>
<h2 id="子数组最大累加和问题与扩展-下"><a class="markdownIt-Anchor" href="#子数组最大累加和问题与扩展-下"></a> 子数组最大累加和问题与扩展-下</h2>
<p><a href="https://leetcode.cn/problems/maximum-product-subarray/description/"> 152. Maximum Product Subarray-乘积最大子数组 </a><br />
<strong>大厂笔试：子序列累加和必须被7整除的最大累加和</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> max_sum_divided_by7 &#123;</span><br><span class="line"><span class="comment">// 子序列累加和必须被7整除的最大累加和</span></span><br><span class="line"><span class="comment">// 给定一个非负数组nums</span></span><br><span class="line"><span class="comment">// 可以任意选择数字组成子序列，但是子序列的累加和必须被7整除</span></span><br><span class="line"><span class="comment">// 返回最大累加和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">max_sum</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(nums.<span class="built_in">size</span>());</span><br><span class="line">        <span class="comment">// dp[i][j]:</span></span><br><span class="line">        <span class="comment">// nums.前i个数形成的子序列一定要做到，子序列累加和%7==j</span></span><br><span class="line">        <span class="comment">// 这样的子序列最大累加和是多少</span></span><br><span class="line">        <span class="comment">// 注意：dp[i][j]==-1代表不存在这样的子序列</span></span><br><span class="line">        std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>, std::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(MOD, <span class="number">-1</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x, curmod, need; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            x = nums[i<span class="number">-1</span>];</span><br><span class="line">            curmod = nums[i<span class="number">-1</span>] % MOD;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; MOD; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">                need = (j - curmod + MOD) % MOD;</span><br><span class="line">                <span class="keyword">if</span> (dp[i<span class="number">-1</span>][need] != <span class="number">-1</span>)</span><br><span class="line">                    dp[i][j] = std::<span class="built_in">max</span>(dp[i][j], dp[i<span class="number">-1</span>][need] + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> MOD = <span class="number">7</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>大厂笔试：魔法卷轴</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> magic_scroll_problem &#123;</span><br><span class="line"><span class="comment">// 魔法卷轴</span></span><br><span class="line"><span class="comment">// 给定一个数组nums，其中可能有正、负、0</span></span><br><span class="line"><span class="comment">// 每个魔法卷轴可以把nums中连续的一段全变成0 你希望数组整体的累加和尽可能大</span></span><br><span class="line"><span class="comment">// 卷轴使不使用、使用多少随意，但一共只有2个魔法卷轴</span></span><br><span class="line"><span class="comment">// 请返回数组尽可能大的累加和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">max_sum</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(nums.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 情况1：完全不使用卷轴</span></span><br><span class="line">        <span class="type">int</span> p1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : nums)</span><br><span class="line">            p1 += x;</span><br><span class="line">        <span class="comment">// prefix[i]：0~i范围上一定要用1次卷轴的情况下，0~i范围上整体最大累加和多少</span></span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">prefix</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="comment">// 每一步的前缀和</span></span><br><span class="line">        <span class="type">int</span> sum = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// maxpresum：之前所有前缀和的最大值</span></span><br><span class="line">        <span class="type">int</span> maxpresum = std::<span class="built_in">max</span>(<span class="number">0</span>, nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            prefix[i] = std::<span class="built_in">max</span>(prefix[i<span class="number">-1</span>] + nums[i], maxpresum);</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            maxpresum = std::<span class="built_in">max</span>(maxpresum, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 情况二：必须用1次卷轴</span></span><br><span class="line">        <span class="type">int</span> p2 = prefix[n<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">// suffix[i]：i~n-1范围上一定要用1次卷轴的情况下，i~n-1范围上整体最大累加和多少</span></span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">suffix</span><span class="params">(n)</span></span>;</span><br><span class="line">        sum = nums[n<span class="number">-1</span>];</span><br><span class="line">        maxpresum = std::<span class="built_in">max</span>(<span class="number">0</span>, nums[n<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            suffix[i] = std::<span class="built_in">max</span>( suffix[i<span class="number">+1</span>] + nums[i], maxpresum );</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            maxpresum = std::<span class="built_in">max</span>(sum, maxpresum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 情况二：必须用2次卷轴</span></span><br><span class="line">        <span class="type">int</span> p3 = std::numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">min</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            p3 = std::<span class="built_in">max</span>(p3, prefix[i<span class="number">-1</span>] + suffix[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">max</span>(p1, std::<span class="built_in">max</span>(p2, p3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://leetcode.cn/problems/maximum-sum-of-3-non-overlapping-subarrays/description/"> 689. Maximum Sum of 3 Non-Overlapping Subarrays-三个无重叠子数组的最大和 </a><br />
<strong>大厂笔试：可以翻转1次的情况下子数组最大累加和</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> max_sum_reverse &#123;</span><br><span class="line"><span class="comment">// 可以翻转1次的情况下子数组最大累加和给定一个数组nums，</span></span><br><span class="line"><span class="comment">// 现在允许你随意选择数组连续一段进行翻转，也就是子数组逆序的调整</span></span><br><span class="line"><span class="comment">// 比如翻转[1，2,3，4，5，6]的[2~4]范围，得到的是[1,2，5，4,3，6]</span></span><br><span class="line"><span class="comment">// 返回必须随意翻转1次之后，子数组的最大累加和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">max_sum</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(nums.<span class="built_in">size</span>());</span><br><span class="line">        <span class="comment">// start[i]：所有必须以i开头的子数组中，最大累加和是多少</span></span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">start</span><span class="params">(n)</span></span>;</span><br><span class="line">        start[n<span class="number">-1</span>] = nums[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            start[i] = nums[i] + std::<span class="built_in">max</span>(<span class="number">0</span>, start[i<span class="number">+1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = start[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//end：子数组必须以i结尾，其中的最大累加和</span></span><br><span class="line">        <span class="type">int</span> end = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> maxend = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// maxEnd:</span></span><br><span class="line">        <span class="comment">// 0~i-1范围上</span></span><br><span class="line">        <span class="comment">// 子数组必须以0结尾，其中的最大累加和</span></span><br><span class="line">        <span class="comment">// 子数组必须以1结尾，其中的最大累加和</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 子数组必须以i-1结尾，其中的最大累加和</span></span><br><span class="line">        <span class="comment">// 所有情况中，最大的那个累加和就是maxEnd</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// maxend       i...</span></span><br><span class="line">            <span class="comment">// 枚举划分点：  i...</span></span><br><span class="line">            ans = std::<span class="built_in">max</span>(ans, maxend + start[i]);</span><br><span class="line">            <span class="comment">//子数组必须以i结尾，其中的最大累加和</span></span><br><span class="line">            end = nums[i] + std::<span class="built_in">max</span>(<span class="number">0</span>, end);</span><br><span class="line">            maxend = std::<span class="built_in">max</span>(end, maxend);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = std::<span class="built_in">max</span>(ans, maxend);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最长递增子序列问题与扩展"><a class="markdownIt-Anchor" href="#最长递增子序列问题与扩展"></a> 最长递增子序列问题与扩展</h2>
<p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/description/"> 300. Longest Increasing Subsequence-最长递增子序列 </a><br />
<a href="https://leetcode.cn/problems/russian-doll-envelopes/description/"> 354. Russian Doll Envelopes-俄罗斯套娃信封问题 </a><br />
<a href="https://leetcode.cn/problems/minimum-operations-to-make-the-array-k-increasing/"> 2111. Minimum Operations to Make the Array K-Increasing-使数组K递增的最少操作次数 </a><br />
<a href="https://leetcode.cn/problems/maximum-length-of-pair-chain/description/"> 646. Maximum Length of Pair Chain-最长数对链 </a></p>
<h2 id="01背包-有依赖的背包"><a class="markdownIt-Anchor" href="#01背包-有依赖的背包"></a> 01背包、有依赖的背包</h2>
<ul>
<li>01背包：每个物品<strong>要和不要</strong>两种可能性展开</li>
<li>有依赖的背包：多个物品<strong>变成一个复合物品（互斥）</strong>，每件复合物品<strong>要和怎么要</strong>多种可能性展开</li>
<li>不能用01背包来解，但是非常重要的问题：非负数组前k个最小的子序列和问题</li>
</ul>
<p><a href="https://www.luogu.com.cn/problem/P1048"> 01背包（模版） </a><br />
<a href="https://leetcode.cn/problems/tJau2o/description/"> bytedance-006. 夏季特惠 </a><br />
<a href="https://leetcode.cn/problems/target-sum/description/"> 494. 目标和 </a><br />
<a href="https://leetcode.cn/problems/last-stone-weight-ii/description/"> 1049. 最后一块石头的重量 II </a><br />
<a href="https://www.nowcoder.com/practice/f9c6f980eeec43ef85be20755ddbeaf4"> 有依赖的背包（模版） </a></p>
<h2 id="贪心经典题目专题1"><a class="markdownIt-Anchor" href="#贪心经典题目专题1"></a> 贪心经典题目专题1</h2>
<ol>
<li><em>狭义的贪心</em><br />
<strong>每一步都做出在当前状态下最好或最优的选择</strong>，从而希望最终的<strong>结果是最好或最优的算法</strong></li>
<li><em>广义的贪心</em><br />
通过分析题目自身的特点和性质，只要发现让<strong>求解答案的过程得到加速</strong>的结论，都算广义的贪心</li>
</ol>
<p><a href="https://leetcode.cn/problems/largest-number/description/"> 179. 最大数 </a><br />
<a href="https://leetcode.cn/problems/two-city-scheduling/description/"> 1029. 两地调度 </a><br />
<a href="https://leetcode.cn/problems/minimum-number-of-days-to-eat-n-oranges/description/"> 1553. 吃掉 N 个橘子的最少天数 </a><br />
<a href="https://leetcode.cn/problems/meeting-rooms-ii/description/"> 253. 会议室 II - 力扣（LeetCode-Plus） </a><br />
<a href="https://leetcode.cn/problems/course-schedule-iii/description/"> 630. 课程表 III </a><br />
<a href="https://leetcode.cn/problems/minimum-cost-to-connect-sticks/description/"> 1167. 连接木棍的最低费用 - 力扣（LeetCode-Plus） </a><br />
<a href="https://leetcode.cn/problems/jian-sheng-zi-ii-lcof/description/"> LCR 132. 砍竹子 II </a><br />
<a href="https://leetcode.cn/problems/maximum-number-of-events-that-can-be-attended/"> 1353. 最多可以参加的会议数目 </a><br />
<a href="https://leetcode.cn/problems/ipo/description/"> 502. IPO </a><br />
<strong>题目6 加入差值绝对值直到长度固定</strong><br />
给定一个非负数组arr，计算任何两个数差值的绝对值<br />
如果arr中没有，都要加入到arr里，但是只加一份然后新的arr，继续计算任何两个数差值的绝对值如果arr中没有，都要加入到arr里，但是只加一份一直到arr大小固定，返回arr最终的长度<br />
来自真实大厂笔试，没有在线测试，对数器验证.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> AbsoluteValueAddToArray &#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lenof</span><span class="params">(std::vector&lt;<span class="type">int</span>&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//找到任意一个非0的值</span></span><br><span class="line">    <span class="type">int</span> gcd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : arr)</span><br><span class="line">    &#123;</span><br><span class="line">        max = std::<span class="built_in">max</span>(max, num);</span><br><span class="line">        <span class="keyword">if</span> (num)</span><br><span class="line">            gcd = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (gcd == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)arr.<span class="built_in">size</span>();</span><br><span class="line">    std::unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnts;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : arr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num)</span><br><span class="line">            gcd = AbsoluteValueAddToArray::<span class="built_in">gcd</span>(gcd, num);</span><br><span class="line">        cnts[num]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = max / gcd;</span><br><span class="line">    <span class="type">int</span> maxcnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> [ key, val ] : cnts)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (key)</span><br><span class="line">            ans += cnts[key] - <span class="number">1</span>;</span><br><span class="line">        maxcnt = std::<span class="built_in">max</span>(maxcnt, cnts[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans += cnts[<span class="number">0</span>] &gt; <span class="number">0</span> ? cnts[<span class="number">0</span>] : (maxcnt &gt; <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://leetcode.cn/problems/shortest-unsorted-continuous-subarray/description/"> 581. 最短无序连续子数组 </a><br />
<a href="https://leetcode.cn/problems/smallest-range-covering-elements-from-k-lists/description/"> 632. 最小区间 </a><br />
<a href="https://leetcode.cn/problems/minimize-deviation-in-array/description/"> 1675. 数组的最小偏移量 </a><br />
<a href="https://leetcode.cn/problems/rabbits-in-forest/description/"> 781. 森林中的兔子 </a><br />
<a href="https://leetcode.cn/problems/minimum-number-of-operations-to-make-arrays-similar/description/"> 2449. 使数组相似的最少操作次数 </a><br />
<a href="https://leetcode.cn/problems/divide-array-into-increasing-sequences/description/"> 1121. 将数组分成几个递增序列 - 力扣（LeetCode） </a><br />
<a href="https://leetcode.cn/problems/minimum-number-of-refueling-stops/description/"> 871. 最低加油次数 </a><br />
<a href="https://leetcode.cn/problems/jump-game-ii/description/"> 45. 跳跃游戏 II </a><br />
<a href="https://leetcode.cn/problems/minimum-number-of-taps-to-open-to-water-a-garden/description/"> 1326. 灌溉花园的最少水龙头数目 </a></p>
<h2 id="kmp算法原理和代码详解"><a class="markdownIt-Anchor" href="#kmp算法原理和代码详解"></a> KMP算法原理和代码详解</h2>
<ol>
<li><code>s1</code>字符串是否包含<code>s2</code>字符串，如果包含返回<code>s1</code>中包含<code>s2</code>的最左开头位置，不包含返回-1<br />
暴力方法就是<code>s1</code>的每个位置都做开头，然后去匹配<code>s2</code>整体，时间复杂度O(n*m)<br />
<code>KMP</code>算法可以做到时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span></li>
<li><code>KMP</code>算法详解<br />
1）理解<code>next</code>数组的定义，定义是一切的关键，<strong>不包括当前字符，前面字符串前缀和后缀的最大匹配长度（不含整体）</strong><br />
2）假设已经有了<code>next</code>数组，详解匹配过程是如何得到加速的，加速过程有2个理解核心<br />
3）理解了匹配主流程之后，详解<code>next</code>数组如何快速生成，不停跳跃的过程有1个理解核心<br />
4）<code>KMP</code>算法代码详解，主流程+<code>next</code>数组生成<br />
5）时间复杂度0(n)的证明，直接从代码层次就可以分析出来，分析方式好理解，但是比较特别</li>
<li><code>KMP</code>算法的相关题目<br />
<a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/"> 28. 找出字符串中第一个匹配项的下标 </a><br />
<a href="https://leetcode.cn/problems/subtree-of-another-tree/description/"> 572. 另一棵树的子树 </a></li>
</ol>
<h2 id="ac自动机原理-优化"><a class="markdownIt-Anchor" href="#ac自动机原理-优化"></a> AC自动机原理、优化</h2>
<ol>
<li>AC自动机原理讲解<br />
自动机又叫确定有限状态自动机，是对信号序列进行判定的数学模型比如，判定s1是否包含s2、判定s是否是回文，等等;自动机并不是具体的算法、数据结构，只是数学模型，更多是概念上的内容每种自动机实现方式可能有多种</li>
<li>AC自动机中对于fail指针的理解，涉及KMP算法</li>
<li>AC自动机中防止fail指针绕圈的优化，涉及三个场景经过优化后</li>
<li>建立AC自动机+遍历文章，总的时间复杂度为O（所有目标字符串的总字符数量+文章长度）</li>
</ol>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言</title>
    <url>/2025/03/02/assembly/</url>
    <content><![CDATA[<p>简介：汇编语言（Assembly Language）是一种低级编程语言，它为特定的计算机架构提供了人类可读的指令形式。与高级编程语言相比，汇编语言更接近于机器码，几乎每个汇编语言语句都有一对一的对应机器指令。因此，使用汇编语言编写的程序通常能更高效地运行，并且可以更好地控制硬件资源。</p>
<span id="more"></span>
<h1 id="汇编语言"><a class="markdownIt-Anchor" href="#汇编语言"></a> 汇编语言</h1>
<p>前言：汇编语言是直接在硬件之上的工作的编程语言，我们首先要了解硬件系统的结构，才能有效地应用汇编语言对其编程。汇编课程的研究重点是如何利于硬件系统的结构和指令集有效的控制系统进行工作。</p>
<h2 id="第一章-基础知识"><a class="markdownIt-Anchor" href="#第一章-基础知识"></a> 第一章 基础知识</h2>
<h3 id="11-机器语言"><a class="markdownIt-Anchor" href="#11-机器语言"></a> 1.1 机器语言</h3>
<p>机器语言是机器指令的集合。8086CPU完成s = 768 + 12288 - 1280,机器码如下：<br />
1011’1000’0000’0000’0000’0011<br />
0000’0101’0000’0000’0011’0000<br />
0010’1101’0000’0000’0000’0101</p>
]]></content>
      <tags>
        <tag>汇编</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>Coroutine-协程</title>
    <url>/2025/03/03/coroutine/</url>
    <content><![CDATA[<p>前言：协程（Coroutine）是一种计算机程序组件，它与子例程（即通常所说的函数或过程）类似，但其执行方式更为灵活。不同于传统的线程和进程，协程允许在特定的地方暂停执行，并能在之后从暂停的地方恢复执行。这种特性使得协程在处理异步编程、并发操作以及I/O密集型任务时特别有用。</p>
<span id="more"></span>
<h2 id="什么是协程"><a class="markdownIt-Anchor" href="#什么是协程"></a> 什么是协程</h2>
<ul>
<li>核心：<strong>是能够暂停和恢复的函数</strong>。</li>
<li>能被多次调用的函数，每次只运行协程代码的一部分</li>
<li>每次调用之间本地变量和参数都会被保存，生命周期与调用者无关</li>
<li>与线程的区别：线程会互相争抢，（同一个线程上运行的）协程只会在主动让出控制权时切换，不同线程上得协程也会相会争抢</li>
</ul>
<h2 id="为什么需要协程"><a class="markdownIt-Anchor" href="#为什么需要协程"></a> 为什么需要协程</h2>
<ol>
<li>异步操作</li>
<li>生成器</li>
</ol>
<p><img src="/images/fun_coroutine.png" alt="普通函数和协程得区别" /></p>
<h2 id="协程有什么用"><a class="markdownIt-Anchor" href="#协程有什么用"></a> 协程有什么用</h2>
<ul>
<li>使得异步IO代码的实现变得简单，容易维护</li>
<li>例子：<code>boost</code>不同版本的异步<code>IO echo server</code></li>
</ul>
<h2 id="c20协程机制-关键对象"><a class="markdownIt-Anchor" href="#c20协程机制-关键对象"></a> C++20协程机制－关键对象</h2>
<ol>
<li><code>promise_type</code></li>
</ol>
<ul>
<li>对协程行为的配置 (比如是否在协程入口处挂起)</li>
<li>用于调用者与协程之间的数据传递</li>
<li>可以对协程对象增加一些自定义数据结构(用于实现调度器)</li>
</ul>
<ol start="2">
<li><code>std:coroutine_handle&lt;promise_type&gt;</code></li>
</ol>
<ul>
<li>外部操作协程的接口 (本质上是一个指针)</li>
</ul>
<ol start="3">
<li><code>coroutine_interface</code></li>
</ol>
<ul>
<li><code>coroutine</code>的返回对象</li>
<li>对<code>coroutine_handle</code>的封装</li>
<li>在<code>coroutine_handle</code>的基础上再实现一些用户自定义的接口，比如获取返回值等</li>
</ul>
<ol start="3">
<li><code>awaitor</code></li>
</ol>
<ul>
<li>控制协程在挂起时的行为</li>
<li>决定是否挂起</li>
<li>决把控制权交给谁</li>
<li>配置在控制器返回时做什么</li>
</ul>
<h2 id="协程定义方法"><a class="markdownIt-Anchor" href="#协程定义方法"></a> 协程定义方法</h2>
<ul>
<li>定义一个函数，只要里面出现<code>co_await</code>,<code>co_yield</code>,<code>co_return</code>中的任意一个，就是定义了一个协程</li>
<li>协程的返回值必须是一个<code>coroutine_interface</code>对象</li>
</ul>
<h2 id="c20协程机制-关键字"><a class="markdownIt-Anchor" href="#c20协程机制-关键字"></a> C++20协程机制-关键字</h2>
<ol>
<li><code>co_await</code><br />
<img src="/images/co_await.png" alt="co_await" /></li>
<li><code>co_yield expr</code></li>
</ol>
<ul>
<li>往<code>promise</code>中写值</li>
<li>等价于<code>co_await promise.yield_value(expr)</code></li>
</ul>
<ol start="3">
<li><code>co_return expr</code></li>
</ol>
<ul>
<li>结束<code>coroutine</code></li>
<li>如果<code>expr</code>为空，或者为<code>void</code>,并且<code>promise</code>定义了<code>return_void()</code>,则调用 <code>return_void()</code></li>
<li>如果<code>expr</code>不为空，且<code>promise</code>定义了<code>return_value(value)</code>，则调用 <code>return_value(expr)</code></li>
<li><code>return_void</code>和<code>return_value</code>只能定义其中一个</li>
</ul>
<h2 id="用c协程实现异步操作"><a class="markdownIt-Anchor" href="#用c协程实现异步操作"></a> 用C++协程实现异步操作</h2>
<p>用<code>C++</code>协程实现异步操作：理解 <code>co_await</code> 和 <code>Awaitable</code>.<br />
在<code>C++</code>中，只要函数体内出现了 <code>co_await</code>, <code>co_yield</code> 或 <code>co_return</code> 这三个关键字之一，这个函数就自动变成了协程。<br />
我们先聚焦在<code>co_await</code>上，弄清楚它是怎么工作的，以及如何让它真正跑起来。</p>
<ol>
<li><code>co_await</code>是什么?<br />
<code>co_await</code>的作用是让协程<strong>暂停一下</strong>,等待某个操作（比如网络请求或文件读取）完成后，再继续执行。<code>co_await</code>就是这个<strong>等一等</strong>的动作，暂停协程，干别的事，等条件满足再回来。</li>
</ol>
<blockquote>
<p>但问题来了:如果你直接对一个自定义类型用<code>co_await</code>，比如<code>co_await IntReader&#123;&#125;</code>，编译器会一脸懵逼。它不知道这个类型啥时候算“完成”，也不知道结果在哪儿。为了让<br />
<code>co_await</code>能用，我们需要让自定义类型遵守一个规则，这个规则叫 <code>Awaitable</code>.</p>
</blockquote>
<ol start="2">
<li><code>Awaitable</code>:<br />
<code>Awaitable</code> 就像一份“协程使用说明书”，告诉编译器怎么处理暂停和恢复。它要求你的类型实现三个关键函数：</li>
</ol>
<ul>
<li><strong><code>await_ready（）</code></strong>：告诉协程“现在能不能直接执行？”</li>
<li><strong><code>await_suspend（）</code></strong>：如果要暂停，接下来该干啥?</li>
<li><strong><code>await_resume（）</code></strong>：恢复时，返回什么结果？<br />
这三个函数一起合作，让<code>co_await</code>知道如何暂停、等待和继续。下面我们一步步拆解。</li>
</ul>
<ol start="3">
<li><code>Awaitable</code>的三个函数详解<br />
<strong><code>await_ready（）</code>：操作完成了吗？</strong></li>
</ol>
<ul>
<li>返回类型：<code>bool</code></li>
<li>作用：在执行<code>co_await</code>时，协程先问问这个函数：“操作是不是已经好了？”如果返回<code>true</code>，协程就不用暂停，直接往下跑；如果返回<code>false</code>，就得暂停等着。</li>
</ul>
<blockquote>
<p>为什么要有这个函数？<br />
异步操作的时间不确定。假设你在<code>co_await</code>之前已经偷偷启动了一个任务(比如线程或网络请求)，到<code>co_await</code>时可能已经完成了。如果完成了，就没必要暂停，直接用结果多好！<code>await_ready()</code>就是用来检查这种情况的。</p>
</blockquote>
<p><strong><code>await_suspend（）</code>：暂停时做什么？</strong></p>
<ul>
<li>参数：<code>std::coroutine_handle&lt;&gt;</code>(协程的“遥控器&quot;)</li>
<li>返回类型：通常是<code>void</code>，也可以是<code>bool</code></li>
<li>作用：如果<code>await_ready（）</code>返回<code>false</code>，协程要暂停，这时会调用 <code>await_suspend()</code>。<br />
这个函数拿到一个协程句柄（<code>std::coroutine_handle&lt;&gt;</code>），可以用它在未来某个时候“唤醒”协程。</li>
</ul>
<blockquote>
<p>什么是协程句柄？<br />
它就像协程的身份证，指向当前暂停的协程实例。调用<code>handle.resume() </code>就能让协程从暂停的地方继续跑。<br />
返回值的妙用：</p>
</blockquote>
<ul>
<li>返回<code>void</code>：正常暂停，没啥说的。</li>
<li>返回<code>bool</code>：如果返回<code>false</code>，协程不会暂停(相当于给了第二次取消暂停的机会); 返回<code>true</code>(或没返回值时默认)，就真的暂停了。注意这里和<code>await_ready（）</code>的逻辑是反的。</li>
</ul>
<p><strong><code>await_resume（）</code>&quot;：恢复后给我什么？</strong></p>
<ul>
<li>返回类型：可以是void，也可以是具体类型</li>
<li>作用：当协程恢复执行（或者压根没暂停）时，这个函数被调用。它的返回值就是 <code>co_await</code>表达式的结果。</li>
</ul>
<h2 id="co_return-与-promise_type"><a class="markdownIt-Anchor" href="#co_return-与-promise_type"></a> <code>co_return</code> 与 <code>promise_type</code></h2>
<ol>
<li>协程的返回类型要求<br />
<code>C++</code>对协程的返回类型只有一个硬性规定：它必须包含一个名为<code>promise_type</code>的内嵌类型。</li>
<li>当你调用一个协程函数时：</li>
</ol>
<ul>
<li>编译器会在堆上分配空间，保存协程的状态。</li>
<li>同时创建一个<code>promise_type</code>对象，嵌在返回类型里。</li>
<li>通过<code>promise_type</code>定义的函数，你可以控制协程的行为，或者与<strong>调用者交换数据</strong>。</li>
</ul>
<ol start="3">
<li>协程执行时序<br />
<img src="/images/coroutine-seq.png" alt="coroutine" /></li>
<li><code>task</code>应用</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IntReader</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">await_ready</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">await_suspend</span><span class="params">(std::coroutine_handle&lt;&gt; handle)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">std::thread <span class="title">thr</span><span class="params">([<span class="keyword">this</span>, handle] &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            std::this_thread::sleep_for(<span class="number">1000</span>ms);</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">this</span>-&gt;value_ = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">            handle.resume();</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;)</span></span>;</span><br><span class="line">        thr.<span class="built_in">detach</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">await_resume</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value_;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value_&#123;<span class="number">0</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">task</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">task</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">promise_type</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">promise_type</span>() : <span class="built_in">value_</span>(std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;()) &#123;&#125;</span><br><span class="line">        <span class="function">task <span class="title">get_return_object</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span>  task&#123;value_&#125;;  &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">return_value</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            *value_ = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">std::suspend_never <span class="title">initial_suspend</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &#123;&#125;; &#125;</span><br><span class="line">        <span class="function">std::suspend_never <span class="title">final_suspend</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> &#123;&#125;; &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">unhandled_exception</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        std::shared_ptr&lt;<span class="type">int</span>&gt; value_;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">task</span><span class="params">(std::shared_ptr&lt;<span class="type">int</span>&gt; value)</span> : value_(std::move(value)) &#123;</span>&#125;</span><br><span class="line">    [[<span class="built_in">nodiscard</span>(<span class="string">&quot;?&quot;</span>)]]</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_value</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> *value_; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;<span class="type">int</span>&gt; value_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">task <span class="title">print_int</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IntReader reader1;</span><br><span class="line">    <span class="type">int</span> total = <span class="keyword">co_await</span> reader1;</span><br><span class="line"></span><br><span class="line">    IntReader reader2;</span><br><span class="line">    total += <span class="keyword">co_await</span> reader2;</span><br><span class="line"></span><br><span class="line">    IntReader reader3;</span><br><span class="line">    total += <span class="keyword">co_await</span> reader3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">co_return</span> total ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> t = <span class="built_in">print_int</span>();</span><br><span class="line">    std::string str;</span><br><span class="line">    <span class="keyword">while</span> (std::cin &gt;&gt; str)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; t.<span class="built_in">get_value</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="co_yield"><a class="markdownIt-Anchor" href="#co_yield"></a> <code>co_yield</code></h2>
<ol>
<li>用<code>co_yield</code>打造生成器<br />
在<code>C++</code>的协程（<code>coroutine</code>）,<code>co_yield</code>能让你的函数变成一个“生成器”，每次生成一个值，暂停一下，等调用者需要时再继续生成下一个值。</li>
<li><code>co_yield</code>是什么?</li>
</ol>
<ul>
<li>生成一个值：把某个值“扔”给调用者。</li>
<li>暂停执行：生成完值后，协程停下来，等调用者喊“继续”。</li>
</ul>
<ol start="3">
<li><code>generator</code>应用</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">generator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">promise_type</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 一开始不暂停</span></span><br><span class="line">        <span class="function">std::suspend_never <span class="title">initial_suspend</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &#123;&#125;; &#125;</span><br><span class="line">        <span class="comment">// 结束时暂停</span></span><br><span class="line">        <span class="function">std::suspend_always <span class="title">final_suspend</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> &#123;&#125;; &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">unhandled_exception</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="comment">// 无返回值</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">return_void</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="function">generator <span class="title">get_return_object</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">generator</span>( std::coroutine_handle&lt;promise_type&gt;::<span class="built_in">from_promise</span>(*<span class="keyword">this</span>) );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">std::suspend_always <span class="title">yield_value</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            current_value = value;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> current_value&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">generator</span><span class="params">(std::coroutine_handle&lt;promise_type&gt; h)</span> : handle(h) &#123;</span>&#125;</span><br><span class="line">    <span class="comment">// 清理协程</span></span><br><span class="line">    ~<span class="built_in">generator</span>() &#123; <span class="keyword">if</span> (handle) handle.<span class="built_in">destroy</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取下一个值</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 恢复协程执行</span></span><br><span class="line">        handle.<span class="built_in">resume</span>();</span><br><span class="line">        <span class="comment">// 返回生成值</span></span><br><span class="line">        <span class="keyword">return</span> handle.<span class="built_in">promise</span>().current_value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查是否结束</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">done</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handle.<span class="built_in">done</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::coroutine_handle&lt;promise_type&gt; handle;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">generator <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">co_yield</span> a;</span><br><span class="line">        <span class="type">int</span> next = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> g = <span class="built_in">fib</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">while</span> (!g.<span class="built_in">done</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; g.<span class="built_in">next</span>() &lt;&lt; std::endl;</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(<span class="number">1000</span>ms);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="some-slight-improvements"><a class="markdownIt-Anchor" href="#some-slight-improvements"></a> Some Slight Improvements</h2>
<ol>
<li>使用 <code>std::optional</code> 来做容器，自动调用正确的构造/析构函数，支持移动语义。(可以进一步改用 <code>std::variant</code>)。</li>
<li>定义了 <code>Generator</code> 的几个构造和赋值函数，增强了安全性(<code>safety</code>)。</li>
<li>在 <code>unhandled_exception()</code> 内存放了 <code>std::exception_ptr</code>。</li>
<li>用例改为稍微复杂一些的字符串生成，里面有一些性能问题，读者有兴趣的可以找找茬。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;coroutine&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">generator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">promise_type</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">generator <span class="title">get_return_object</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> generator&#123; std::coroutine_handle&lt;promise_type&gt;::<span class="built_in">from_promise</span>(*<span class="keyword">this</span>) &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">return_void</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;&#125;</span><br><span class="line">        <span class="function">std::suspend_always <span class="title">initial_suspend</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> &#123;&#125;; &#125;</span><br><span class="line">        <span class="function">std::suspend_always <span class="title">final_suspend</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> &#123;&#125;; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">std::suspend_always <span class="title">yield_value</span><span class="params">(<span class="type">const</span> T &amp;value)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            value_ = value;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">std::suspend_always <span class="title">yield_value</span><span class="params">(T &amp;&amp;value)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            value_.<span class="built_in">emplace</span>(std::<span class="built_in">move</span>(value));</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">unhandled_exception</span><span class="params">()</span> </span>&#123; exception_ = std::<span class="built_in">current_exception</span>(); &#125;</span><br><span class="line">        <span class="function">T &amp;<span class="title">result</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> *value_; &#125;</span><br><span class="line">        <span class="function"><span class="type">const</span> T &amp;<span class="title">result</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> *value_; &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        std::optional&lt;T&gt; value_;</span><br><span class="line">        std::exception_ptr exception_;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">generator</span>(std::coroutine_handle&lt;promise_type&gt; handle) : <span class="built_in">handle_</span>(handle) &#123;&#125;</span><br><span class="line">    <span class="built_in">generator</span>(<span class="type">const</span> generator &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    generator &amp;<span class="keyword">operator</span>=(<span class="type">const</span> generator &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    generator &amp;<span class="keyword">operator</span>=(generator &amp;&amp;other) <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != std::<span class="built_in">addressof</span>(other))</span><br><span class="line">        &#123;</span><br><span class="line">            handle_ = other.handle_;</span><br><span class="line">            other.handle_ = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">generator</span>() <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (handle_)</span><br><span class="line">            handle_.<span class="built_in">destroy</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123; handle_.<span class="built_in">resume</span>(); &#125;</span><br><span class="line">    <span class="function">T &amp;<span class="title">result</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> handle_.<span class="built_in">promise</span>().<span class="built_in">result</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> T &amp;<span class="title">result</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> handle_.<span class="built_in">promise</span>().<span class="built_in">result</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::coroutine_handle&lt;promise_type&gt; handle_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">generator&lt;std::string&gt; <span class="title">lottery</span><span class="params">(<span class="type">size_t</span> size, <span class="type">unsigned</span> <span class="type">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::mt19937 <span class="title">rgn</span><span class="params">(std::random_device&#123;&#125;())</span></span>;</span><br><span class="line">    std::string winning_nums;</span><br><span class="line">    <span class="keyword">co_yield</span> winning_nums += std::<span class="built_in">to_string</span>( <span class="built_in">rgn</span>() % mod );</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; size; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        winning_nums += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">co_yield</span> winning_nums += std::<span class="built_in">to_string</span>(<span class="built_in">rgn</span>() % mod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">co_return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">generator&lt;<span class="type">int</span>&gt; <span class="title">fibonacci</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">co_yield</span> a;</span><br><span class="line">        <span class="type">int</span> c = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">co_return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> g = <span class="built_in">lottery</span>(<span class="number">10</span>, <span class="number">256</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g.<span class="built_in">next</span>();</span><br><span class="line">        std::cout &lt;&lt; g.<span class="built_in">result</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> fib = <span class="built_in">fibonacci</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        fib.<span class="built_in">next</span>();</span><br><span class="line">        std::cout &lt;&lt; fib.<span class="built_in">result</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>协程</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-前端开发</title>
    <url>/2025/03/02/css/</url>
    <content><![CDATA[<p>CSS（层叠样式表，Cascading Style Sheets）是一种用于描述HTML或XML（包括如SVG、MathML或XHTML等XML文档）文档外观和格式的样式表语言。CSS的主要目的是分离文档的内容与展示方式，使得页面的设计和内容管理更加容易和高效。</p>
<span id="more"></span>
<h3 id="样式的位置"><a class="markdownIt-Anchor" href="#样式的位置"></a> 样式的位置</h3>
<ol>
<li>行内样式</li>
</ol>
<ul>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">h1</span> style=&quot;<span class="attribute">color</span>: red; <span class="attribute">font-size</span>: <span class="number">80px</span>;&quot;&gt;欢迎来到尚硅谷学习！&lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">h2</span> style=&quot;<span class="attribute">color</span>: red; <span class="attribute">font-size</span>: <span class="number">80px</span>;&quot;&gt;欢迎来到尚硅谷学习！&lt;/<span class="selector-tag">h2</span>&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>内部样式</li>
</ol>
<ul>
<li>写在html页面内部，将所有的cSS代码提取出来，单独放在标签中。</li>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        <span class="selector-tag">h1</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">h2</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: green;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">80px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">img</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意点：<br />
<code>&lt;style&gt;</code>标签理论上可以放在HTML文档的任何地方，但一般都放在<code>&lt;head&gt;</code>标签中。<br />
此种写法：样式可以复用、代码结构清晰。</li>
</ul>
<ol start="3">
<li>外部样式</li>
</ol>
<ul>
<li>
<p>写在单独的.css文件中，随后在HTML文件中引入使用。</p>
</li>
<li>
<p>语法：</p>
<ol>
<li>新建一个扩展名为.css的样式文件，把所有css代码都放入此文件中。</li>
</ol>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在 HTML 文件中引入.css 文件。</li>
</ol>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;./pos3<span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>注意点：</p>
<blockquote>
<ol>
<li><code>&lt;link&gt;</code>标签要写在<head>标签中。</li>
<li><code>&lt;link&gt;</code>标签属性说明：<br />
href：引l入的文档来自于哪里。<br />
rel：（relation：关系）说明引l入的文档与当前文档之间的关系。</li>
<li>外部样式的优势：样式可以复用、结构清晰、可触发浏览器的缓存机制，提高访问速度，实现了结构与样式的完全分离。</li>
<li>实际开发中，几乎都使用外部样式，这是最推荐的使用方式！</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="css语法规范"><a class="markdownIt-Anchor" href="#css语法规范"></a> CSS语法规范</h3>
<p>CSS语法由两部分构成：</p>
<ul>
<li>选择器：找到要添加样式的元素。</li>
<li>声明块：设置具体的样式（声明块是由一个或多个声明组成的），声明的格式为：属性名：属性值；
<blockquote>
<ol>
<li>最后一个声明后的分号理论上能省略，但最好还是写上。</li>
<li>选择器与声明块之间，属性名与属性值之间，均有一个空格，理论上能省略，但最好还是写上。</li>
</ol>
</blockquote>
</li>
</ul>
<p><img src="/images/css_syntax_specification.png" alt="css_syntax_specification" /></p>
<h3 id="css基本选择器"><a class="markdownIt-Anchor" href="#css基本选择器"></a> CSS基本选择器</h3>
<p>基本选择器包括：</p>
<ol>
<li>通配选择器<br />
作用：可以选中所有的HTML元素。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>备注：目前来看通配选择器貌似有点鸡肋，但后面清除样式时，会对我们有很大帮助。
</code></pre>
<ol start="2">
<li>元素选择器<br />
作用：为页面中某种元素统一设置样式。<br />
语法：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: chocolate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>备注：元素选择器无法实现差异化设置，例如上面的代码中，所有的p元素效果都一样。
</code></pre>
<ol start="3">
<li>类选择器<br />
作用：根据元素的class值，来选中某些元素。<br />
class翻译过来有：种类、类别的含义，所以class值，又称：类名。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选中页面中所有类名为speak的元素 */</span></span><br><span class="line"><span class="selector-class">.speak</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选中页面中所有类名为answer的元素 */</span></span><br><span class="line"><span class="selector-class">.answer</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.big</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>注意点：一个元素的class属性，能写多个值，要用空格隔开，例如：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;answer big&quot;&gt;你回答我：我心里只有一块地，我的玛莎拉蒂！&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>id选择器<br />
作用：根据元素的id属性值，来精准的选中某个元素。<br />
语法：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#lovetalked</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#un-lovetalked</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<blockquote>
<ol>
<li>id属性值：尽量由字母、数字、下划线（-）、短杠（－）组成，最好以字母开头、不要包含空格、区分大小写。</li>
<li>一个元素只能拥有一个id属性，多个元素的id属性值不能相同。</li>
<li>一个元素可以同时拥有id和class属性。</li>
</ol>
</blockquote>
<ol start="5">
<li>交集选择器</li>
</ol>
<ul>
<li>作用：选中同时符合多个条件的元素。</li>
<li>语法：选择器1选择器2选择器3…选择器n{}</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rich</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.beauty</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.beauty</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.beauty</span><span class="selector-class">.rich</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：
<ol>
<li>有标签名，标签名必须写在前面。</li>
<li>id选择器、理论上可以作为交集的条件，但实际应用中几乎不用一一因为没有意义。</li>
<li>交集选择器中不可能出现两个元素选择器，因为一个元素，不可能即是p元素又是span元素。</li>
<li>用的最多的交集选择器是：元素选择器配合类名选择器，例如：p.beauty。</li>
</ol>
</li>
</ul>
<ol start="6">
<li>并集选择器</li>
</ol>
<ul>
<li>作用：选中多个选择器对应的元素，又称：分组选择器。</li>
<li>语法：选择器1，选择器2，选择器3，…选择器n{}</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.dog</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pig</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.beauty</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rich</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dog</span>,</span><br><span class="line"><span class="selector-class">.pig</span>,</span><br><span class="line"><span class="selector-class">.rich</span>,</span><br><span class="line"><span class="selector-class">.beauty</span>,</span><br><span class="line"><span class="selector-id">#suxi</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：
<ol>
<li>并集选择器，我们一般竖着写。</li>
<li>任何形式的选择器，都可以作为并集选择器的一部分。</li>
<li>并集选择器，通常用于集体声明，可以缩小样式表体积。</li>
</ol>
</li>
</ul>
<ol start="7">
<li>后代选择器</li>
</ol>
<ul>
<li>作用：选中指定元素中，符合要求的后代元素。</li>
<li>语法：选择器1选择器2选择器3…选择器n{}（先写祖先，再写后代）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：
<ol>
<li>后代选择器，最终选择的是后代，不选中祖先</li>
<li>儿子、孙子、重孙子，都算是后代。</li>
<li>结构一定要符合之前讲的HTML嵌套要求，例如：不能p中写h1～h6。</li>
</ol>
</li>
</ul>
<ol start="8">
<li>子代选择器</li>
</ol>
<ul>
<li>作用：选中指定元素中，符合要求的子元素（儿子元素）。（先写父，再写子)</li>
<li>语法：选择器1&gt;选择器2&gt;选择器3&gt;…选择器n{}</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>注意：
<ol>
<li>子代选择器，最终选择的是子代，不是父级。</li>
<li>子、孙子、重孙子、重重孙子…统称后代！，子就是指儿子。</li>
</ol>
</li>
</ul>
<ol start="9">
<li>兄弟选择器</li>
</ol>
<ul>
<li>相邻兄弟选择器：选中指定元素后，符合条件的相邻兄弟元素。
<ol>
<li>语法：选择器1+选择器2{}。</li>
</ol>
</li>
<li>通用兄弟选择器：选中指定元素后，符合条件的所有兄弟元素。（简记：睡在我下铺的所有兄弟）
<ol>
<li>语法：选择器1~选择器2{}。</li>
</ol>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选中div后紧紧相邻的兄弟p元素（睡在我下铺的兄弟）一相邻兄弟选择器 */</span></span><br><span class="line"><span class="selector-tag">div</span>+<span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选中div后所有的兄弟p元素（睡在我下铺的所有兄弟）一通用兄弟选择器 */</span></span><br><span class="line"><span class="selector-tag">div</span>~<span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="10">
<li>属性选择器</li>
</ol>
<ul>
<li>作用：选中属性值符合一定要求的元素。</li>
<li>语法：
<ol>
<li>【属性名】选中具有某个属性的元素。</li>
<li>【属性名=“值”】选中包含某个属性，且属性值等于指定值的元素。</li>
<li>【属性名^=值&quot;】选中包含某个属性，且属性值以指定的值开头的元素。</li>
<li>【属性名S=“值”】选中包含某个属性，且属性值以指定的值结尾的元素。</li>
<li>【属性名*=“值&quot;】选择包含某个属性，属性值包含指定值的元素。</li>
</ol>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[title=<span class="string">&quot;guigu3&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[title^=<span class="string">&quot;a&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[title$=<span class="string">&quot;4&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[title*=<span class="string">&quot;3&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常用的伪类选择器"><a class="markdownIt-Anchor" href="#常用的伪类选择器"></a> 常用的伪类选择器</h3>
<ol>
<li>动态伪类：
<ol>
<li>:link 超链接未被访问的状态。</li>
<li>:visited超链接访问过的状态。</li>
<li>:hover鼠标悬停在元素上的状态。</li>
<li>:active元素激活的状态。
<blockquote>
<p>什么是激活？一一按下鼠标不松开。<br />
注意点：遵循LVHA 的顺序，即：link、visited、hover、active。</p>
</blockquote>
</li>
<li>:focus取焦点的元素。
<blockquote>
<p>表单类元素才能使用：focus伪类。<br />
当用户：点击元素、触摸元素、或通过键盘的“tab”键等方式，选择元素时，就是获得焦点。</p>
</blockquote>
</li>
</ol>
</li>
<li>结构伪类</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选中的是div的第一个儿子p元素(按照所有兄弟计算的) */</span></span><br><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选中的是div的最后一个儿子p元素（按照所有兄弟计算的） */</span></span><br><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选中的是div的第n个儿子p元素（按照所有兄弟计算的） */</span></span><br><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选中的是div的第一个儿子p元素（按照所有同类型兄弟计算的） */</span></span><br><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span><span class="selector-pseudo">:first-of-type</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: brown;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选中的是div的最后一个儿子p元素（按照所有同类型兄弟计算的） */</span></span><br><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span><span class="selector-pseudo">:last-of-type</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blueviolet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选中的是div的第n个儿子p元素（按照所有同类型兄弟计算的） */</span></span><br><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>否定伪类:not（选择器） 排除满足括号中条件的元素。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.fail</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>UI伪类：
<ol>
<li>:checked 被选中的复选框或单选按钮。</li>
<li>:enable可用的表单元素（没有disabled属性）。</li>
<li>:disabled不可用的表单元素（有disabled属性）。</li>
</ol>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>目标伪类（了解） :target选中锚点指向的元素。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>伪元素选择器 作用：选中元素中的一些特殊位置。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/* 什么是伪元素？一</span></span><br><span class="line"><span class="comment">很像元素，但不是元素（element），是元素中的一些特殊位置 */</span></span><br><span class="line">    <span class="comment">/* 选中的是div中的第一个文字 */</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">        <span class="attribute">color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 选中的是p元素最开始的位置，随后创建一个子元素 */</span></span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;￥&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 选中的是p元素最后的位置，随后创建一个子元素 */</span></span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;.00&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h3 id="选择器的优先级span-idselectorspan"><a class="markdownIt-Anchor" href="#选择器的优先级span-idselectorspan"></a> 选择器的优先级<span id="selector"></span></h3>
<p>通过不同的选择器，选中相同的元素，并且为相同的样式名设置不同的值时，就发生了样式的冲突。 到底应用哪个样式，此时就需要看优先级了。<br />
简单描述：</p>
<blockquote>
<p>行内样式&gt;ID选择器&gt;类选择器&gt;元素选择器&gt;通配选择器&gt;继承的样式</p>
</blockquote>
<p>具体计算方式：<br />
每个选择器，都可计算出一组权重，格式为：（a，b，c）</p>
<ul>
<li>a：ID选择器的个数。</li>
<li>b：类、伪类、属性选择器的个数</li>
<li>c：元素、伪元素选择器的个数</li>
</ul>
<h3 id="css三大特性"><a class="markdownIt-Anchor" href="#css三大特性"></a> CSS三大特性</h3>
<ol>
<li>层叠性<br />
概念：如果发生了样式冲突，那就会根据一定的规则（选择器优先级），进行样式的层叠（覆盖）
<blockquote>
<p>什么是样式冲突？<br />
元素的同一个样式名，被设置了不同的值，这就是冲突。</p>
</blockquote>
</li>
<li>继承性</li>
</ol>
<ul>
<li>概念：元素会自动拥有其父元素、或其祖先元素上所设置的某些样式</li>
<li>规则：优先继承离得近的</li>
<li>常见的可继承属性：
<blockquote>
<p>text-??， font-??， line-??、 color</p>
</blockquote>
</li>
</ul>
<ol start="3">
<li>优先级<br />
<a href="#selector">见选择器的优先级</a></li>
</ol>
<h3 id="字体族"><a class="markdownIt-Anchor" href="#字体族"></a> 字体族</h3>
<ul>
<li>属性名：font-family</li>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.atguigu4</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;HanziPen SC&quot;</span>,<span class="string">&quot;STCaiyun&quot;</span>,<span class="string">&quot;STHupo&quot;</span>,<span class="string">&quot;Microsoft YaHei&quot;</span>,sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：</li>
</ul>
<blockquote>
<ol>
<li>使用字体的英文名字兼容性会更好，具体的英文名可以自行查询，或在电脑的设置里去寻找。</li>
<li>如果字体名包含空格，必须使用引号包裹起来。</li>
<li>可以设置多个字体，按照从左到右的顺序逐个查找，找到就用，没有找到就使用后面的，且通常在最后写上<strong>serif</strong>（衬线字体）或<strong>sans-serif</strong>（非衬线字体）</li>
<li>windows系统中，默认的字体就是微软雅黑。</li>
</ol>
</blockquote>
<h3 id="字体风格"><a class="markdownIt-Anchor" href="#字体风格"></a> 字体风格</h3>
<ul>
<li>属性名：font-style</li>
<li>常用值：</li>
</ul>
<blockquote>
<p>normal：正常 (默认值)<br />
italic：斜体（使用字体自带的斜体效果）<br />
oblique：斜体（强制倾斜产生的斜体效果）实现斜体时，更推荐使用italic。</p>
</blockquote>
<h3 id="字体粗细"><a class="markdownIt-Anchor" href="#字体粗细"></a> 字体粗细</h3>
<p>属性名：font-weight<br />
常用值：</p>
<ul>
<li>关键词
<blockquote>
<p>lighter：细 normal：正常 bold: 粗 bolder：很粗(多数字体不支持)</p>
</blockquote>
</li>
<li>数值：
<blockquote>
<p>100~1000且无单位，数值越大，字体越粗（或一样粗，具体得看字体设计时的精确程度）。 100~ 300等同于1ighter，400~500等同于norma1，600及以上等同于bo1d。</p>
</blockquote>
</li>
</ul>
<h3 id="字体复合写法"><a class="markdownIt-Anchor" href="#字体复合写法"></a> 字体复合写法</h3>
<ul>
<li>属性名：font，可以把上述字体样式合并成一个属性。</li>
<li>编写规则：
<blockquote>
<ol>
<li>字体大小、字体族必须都写上。</li>
<li>字体族必须是最后一位、字体大小必须是倒数第二位。</li>
<li>各个属性间用空格隔开。</li>
</ol>
</blockquote>
</li>
<li>实际开发中更推荐复合写法，但这也不是绝对的，比如只想设置字体大小，那就直接用<strong>font-size</strong>属性。</li>
</ul>
<h3 id="文本间距"><a class="markdownIt-Anchor" href="#文本间距"></a> 文本间距</h3>
<ul>
<li>字母间距：letter-spacing</li>
<li>单词间距：word-spacing（通过空格识别词）</li>
<li>属性值为像素（px），正值让间距增大，负值让间距缩小。</li>
</ul>
<h3 id="文本修饰"><a class="markdownIt-Anchor" href="#文本修饰"></a> 文本修饰</h3>
<ul>
<li>属性名：text-decoration</li>
<li>可选值：
<blockquote>
<ul>
<li>none：无装饰线（常用）</li>
<li>underline：下划线（常用）</li>
<li>overline：上划线</li>
<li>line-through：删除线<br />
可搭配如下值使用：</li>
<li>dotted：虚线</li>
<li>wavy：波浪线</li>
<li>也可以指定颜色</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="文本缩进"><a class="markdownIt-Anchor" href="#文本缩进"></a> 文本缩进</h3>
<ul>
<li>属性名：text-indent</li>
<li>属性值：css 中的长度单位，例如：px</li>
<li>举例</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.atguigu9</span> &#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后面我们会学习css 中一些新的长度单位，目前我们只知道像素(px)。</p>
<h3 id="文本对齐_水平"><a class="markdownIt-Anchor" href="#文本对齐_水平"></a> 文本对齐_水平</h3>
<ul>
<li>属性名：text-align</li>
<li>常用值：
<blockquote>
<p>left ：左对齐 (默认值)<br />
right：右对齐<br />
center：居中对齐</p>
</blockquote>
</li>
<li>code:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="行高"><a class="markdownIt-Anchor" href="#行高"></a> 行高</h3>
<ul>
<li>属性名：line-height</li>
<li>可选值：
<blockquote>
<p>normal：由浏览器根据文字大小决定的一个默认值。<br />
像素(px)。<br />
数字：参考自身font-size 的倍数（很常用）。<br />
百分比：参考自身font-size的百分比。</p>
</blockquote>
</li>
<li>备注：由于字体设计原因，文字在一行中，并不是绝对垂直居中，若一行中都是文字，不会太影响观感。</li>
<li>举例:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#d1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.667</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>行高注意事项：</li>
</ul>
<blockquote>
<ol>
<li>line-height过小会怎样？－一文字产生重叠，且最小值是θ，不能为负数。</li>
<li>line-height是可以继承的，且为了能更好的呈现文字，最好写数值。</li>
<li>line-height 和 height 是什么关系?<br />
a. 设置了height，那么高度就是height 的值。<br />
b. 不设置height的时候，会根据1ine-height计算高度。</li>
</ol>
</blockquote>
<ul>
<li>应用场景：</li>
</ul>
<ol>
<li>对于多行文字：控制行与行之间的距离。</li>
<li>对于单行文字：让height等于1ine-height，可以实现文字垂直居中</li>
</ol>
<h3 id="vertical-align"><a class="markdownIt-Anchor" href="#vertical-align"></a> vertical-align</h3>
<ul>
<li>属性名：vertical-align。</li>
<li>作用：用于指定同一行元素之间，或表格单元格内文字的垂直对齐方式。</li>
<li>常用值：
<blockquote>
<ol>
<li>baseline（默认值）：使元素的基线与父元素的基线对齐。</li>
<li>top：使元素的顶部与其所在行的顶部对齐。</li>
<li>middle：使元素的中部与父元素的基线加上父元素字母x的一半对齐。</li>
<li>bottom：使元素的底部与其所在行的底部对齐。</li>
</ol>
</blockquote>
</li>
<li>特别注意：vertical-align不能控制块元素。</li>
</ul>
<h3 id="css表格属性"><a class="markdownIt-Anchor" href="#css表格属性"></a> CSS表格属性</h3>
<ol>
<li>边框相关属性（其他元素也能用）：</li>
</ol>
<table>
<thead>
<tr>
<th>css属性名</th>
<th>功能</th>
<th>属性值</th>
</tr>
</thead>
<tbody>
<tr>
<td>border-with</td>
<td>边框宽度</td>
<td>CSS中可用的长度值</td>
</tr>
<tr>
<td>border-color</td>
<td>边框颜色</td>
<td>CSS中可用的颜色值</td>
</tr>
<tr>
<td>border-style</td>
<td>边框风格</td>
<td>默认值 none solid 实线 dashed dotted double 虚线点线双实线</td>
</tr>
<tr>
<td>border</td>
<td>符合属性</td>
<td>没有数量、顺序的要求</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>表格独有属性（只有table标签才能使用）：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid green;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="comment">/* 控制表格的列宽 */</span></span><br><span class="line">    <span class="attribute">table-layout</span>: fixed;</span><br><span class="line">    <span class="comment">/* 控制单元格间距 */</span></span><br><span class="line">    <span class="attribute">border-spacing</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="comment">/* 合并相邻的单元格的边框 */</span></span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    <span class="comment">/* 隐藏没有内容的单元格 */</span></span><br><span class="line">    <span class="attribute">empty-cells</span>: hide;</span><br><span class="line">    <span class="comment">/* 设置表格标题的位置 */</span></span><br><span class="line">    <span class="attribute">caption-side</span>: top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="css背景属性"><a class="markdownIt-Anchor" href="#css背景属性"></a> CSS背景属性</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="comment">/* 设置背景颜色，不写background-color即：默认值是transparent */</span></span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="comment">/* 设置背景图片 */</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/beauty.jpg</span>);</span><br><span class="line">    <span class="comment">/* 设置背景图片的重复方式 */</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat;</span><br><span class="line">    <span class="comment">/* 控制背景图片的位置 */</span></span><br><span class="line">    <span class="attribute">background-position</span>: center center;</span><br><span class="line">    <span class="comment">/* 复合属性 */</span></span><br><span class="line">    <span class="attribute">background</span>: skyblue <span class="built_in">url</span>(<span class="string">../images/beauty.jpg</span>) repeat center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="css盒子模型"><a class="markdownIt-Anchor" href="#css盒子模型"></a> CSS盒子模型</h3>
<h3 id="css长度单位"><a class="markdownIt-Anchor" href="#css长度单位"></a> CSS长度单位</h3>
<ol>
<li>px：像素。</li>
<li>em：相对元素font-size的倍数。</li>
<li>rem：相对根字体大小，html标签就是根。</li>
<li>%：相对父元素计算。</li>
</ol>
<blockquote>
<ul>
<li>注意：CSS中设置长度，必须加单位，否则样式无效！</li>
</ul>
</blockquote>
<h3 id="元素的显示模式"><a class="markdownIt-Anchor" href="#元素的显示模式"></a> 元素的显示模式</h3>
<ul>
<li>块元素 (block) 又称：块级元素</li>
</ul>
<blockquote>
<p>特点：</p>
<ol>
<li>在页面中独占一行，不会与任何元素共用一行，是从上到下排列的。</li>
<li>默认宽度：撑满盆元素</li>
<li>默认高度：由内容撑开。</li>
<li>可以通过CSS设置宽高。</li>
</ol>
</blockquote>
<ul>
<li>行内元素（inline）又称：内联元素</li>
</ul>
<blockquote>
<p>特点：</p>
<ol>
<li>在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列。</li>
<li>默认宽度：由内容撑开。</li>
<li>默认高度：由内容撑开。</li>
<li>无法通过CSS设置宽高。</li>
</ol>
</blockquote>
<ul>
<li>行内块元素（inline-block） 又称：内联块元素</li>
</ul>
<blockquote>
<p>特点：</p>
<ol>
<li>在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列。</li>
<li>默认宽度：由内容撑开。</li>
<li>默认高度：由内容撑开。</li>
<li>可以通过CSS设置宽高。</li>
</ol>
</blockquote>
<h3 id="总结各元素的显示模式"><a class="markdownIt-Anchor" href="#总结各元素的显示模式"></a> 总结各元素的显示模式</h3>
<ul>
<li>块元素(block)</li>
</ul>
<blockquote>
<ol>
<li>主体结构标签：<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code></li>
<li>排版标签：<code>&lt;h1&gt;</code>~<code>&lt;h6&gt;</code>、<code>&lt;hr&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;div&gt;</code></li>
<li>列表标签：<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;1i&gt;</code>、<code>&lt;dl&gt;</code>、<code>&lt;dt&gt;</code>、<code>&lt;dd&gt;</code></li>
<li>表格相关标签：<code>&lt;table&gt;</code>、<code>&lt;tbody&gt;</code>、<code>&lt;thead&gt;</code>、<code>&lt;tfoot&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;caption&gt;</code></li>
<li><code>&lt;form&gt;</code>与<code>&lt;option&gt;</code></li>
</ol>
</blockquote>
<ul>
<li>行内元素（inline）</li>
</ul>
<blockquote>
<ol>
<li>文本标签：<code>&lt;br&gt;</code>、<code>&lt;em&gt;</code>、 <code>&lt;strong&gt;</code>、<code>&lt;sup&gt;</code>、<code>&lt;sub&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;ins&gt;</code></li>
<li><code>&lt;a&gt;</code>与<code>&lt;label&gt;</code></li>
</ol>
</blockquote>
<ul>
<li>行内块元素（inline-block）</li>
</ul>
<blockquote>
<ol>
<li>图片：<code>&lt;img&gt;</code></li>
<li>单元格：<code>&lt;td&gt;</code>、<code>&lt;th&gt;</code></li>
<li>表单控件：<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>、 <code>&lt;button&gt;</code></li>
<li>框架标签：<code>&lt;iframe&gt;</code></li>
</ol>
</blockquote>
<h3 id="修改元素显示模式"><a class="markdownIt-Anchor" href="#修改元素显示模式"></a> 修改元素显示模式</h3>
<p>通过CSS中的display属性可以修改元素的默认显示模式，常用值如下：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>元素会被隐藏。</td>
</tr>
<tr>
<td>block</td>
<td>元素将作为块级元素显示。</td>
</tr>
<tr>
<td>inline</td>
<td>元素将作为内联元素显示。</td>
</tr>
<tr>
<td>inline-block</td>
<td>元素将作为行内块元素显示。</td>
</tr>
</tbody>
</table>
<h3 id="盒子模型的组成"><a class="markdownIt-Anchor" href="#盒子模型的组成"></a> 盒子模型的组成</h3>
<p>CSS会把所有的HTML元素都看成一个盒子，所有的样式也都是基于这个盒子。</p>
<ol>
<li>margin（外边距）：盒子与外界的距离。</li>
<li>border（边框）：盒子的边框。</li>
<li>padding（内边距）：紧贴内容的补白区域。</li>
<li>content（内容）：元素中的文本或后代元素都是它的内容。</li>
<li>盒子的大小=content+左右padding+左右border。</li>
</ol>
<blockquote>
<p>注意：外边距margin不会影响盒子的大小，但会影响盒子的位置。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* 内容宽 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="comment">/* 内容高 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="comment">/* 内边距 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="comment">/* 边框 */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> dashed red;</span><br><span class="line">    <span class="comment">/* 外边距 */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关于默认宽度"><a class="markdownIt-Anchor" href="#关于默认宽度"></a> 关于默认宽度</h3>
<p>所谓的默认宽度，就是不设置<strong>width</strong>属性时，元素所呈现出来的宽度。</p>
<ul>
<li>总宽度=父的content－自身的左右margin。</li>
<li>内容区的宽度=父的content－自身的左右margin－自身的左右border－自身的左右padding。</li>
</ul>
<h3 id="盒子内边距padding"><a class="markdownIt-Anchor" href="#盒子内边距padding"></a> 盒子内边距（padding）</h3>
<p>padding复合属性的使用规则：</p>
<ol>
<li>padding：10px；四个方向内边距都是10px。</li>
<li>padding：10px 20px；上10px，左右20px。（上下、左右）</li>
<li>padding：10px 20px 30px；上10px，左右20px，下30px。（上、左右、下）</li>
<li>padding：10px 20px 30px 40px；上10px，右20px，下30px，左40px。（上、右、下、左）</li>
</ol>
<p>注意点：</p>
<blockquote>
<ol>
<li>padding的值不能为负数。</li>
<li>行内元素的左右内边距是没问题的，上下内边距不能完美的设置。</li>
<li>块级元素、行内块元素，四个方向内边距都可以完美设置。</li>
</ol>
</blockquote>
<h3 id="margin注意事项"><a class="markdownIt-Anchor" href="#margin注意事项"></a> margin注意事项</h3>
<ol>
<li>子元素的<em>margin</em>，是参考父元素的<em>content</em>计算的。（因为是父亲的<em>content</em>中承装着子元素）</li>
<li>上<em>margin</em>、左<em>margin</em>：影响自己的位置；下<em>margin</em>、右<em>margin</em>：影响后面兄弟元素的位置。</li>
<li>块级元素、行内块元素，均可以完美地设置四个方向的<em>margin</em>；但行内元素，左右<em>margin</em>可以完美设置，上下<em>margin</em>设置无效。</li>
<li><em>margin</em>的值也可以是<em>auto</em>，如果给一个块级元素设置左右<em>margin</em>都为<em>auto</em>，该块级元素会在父元素中水平居中。</li>
<li><em>margin</em>的值可以是负值。</li>
</ol>
<h3 id="margin塌陷问题"><a class="markdownIt-Anchor" href="#margin塌陷问题"></a> margin塌陷问题</h3>
<p>什么是margin塌陷？</p>
<ul>
<li>第一个子元素的上margin会作用在父元素上，最后一个子元素的下margin会作用在父元素上。</li>
</ul>
<p>如何解决margin塌陷？</p>
<ul>
<li>方案一：给父元素设置不为0的padding。</li>
<li>方案二：给父元素设置宽度不为0的border。</li>
<li>方案三：给父元素设置css样式overflow:hidden</li>
</ul>
<h3 id="margin合并问题"><a class="markdownIt-Anchor" href="#margin合并问题"></a> margin合并问题</h3>
<p>什么是margin合并？</p>
<ul>
<li>上面兄弟元素的下外边距和下面兄弟元素的上外边距会合并，取一个最大的值，而不是相加。</li>
</ul>
<p>如何解决margin塌陷？</p>
<ul>
<li>无需解决，布局的时候上下的兄弟元素，只给一个设置上下外边距就可以了。</li>
</ul>
<h3 id="处理内容溢出"><a class="markdownIt-Anchor" href="#处理内容溢出"></a> 处理内容溢出</h3>
<table>
<thead>
<tr>
<th>CSS属性名</th>
<th>功能</th>
<th>属性值</th>
</tr>
</thead>
<tbody>
<tr>
<td>overflow</td>
<td>溢出内容的处理方式</td>
<td>visible：显示，默认值 <br>hidden：隐藏<br> scroll：显示滚动条，不论内容是否溢出<br> auto：自动显示滚动条，内容不溢出不显示</td>
</tr>
<tr>
<td>overflow-x</td>
<td>水平方向溢出内容的处理方式</td>
<td>同overflow</td>
</tr>
<tr>
<td>overflow-y</td>
<td>垂直方向溢出内容的处理方式</td>
<td>同overflow</td>
</tr>
</tbody>
</table>
<blockquote>
<ul>
<li>注意：</li>
</ul>
<ol>
<li>overflow-x、overflow-y 不能一个是hidden，一个是visible，是实验性属性，不建议使用。</li>
<li>overflow常用的值是hidden和auto，除了能处理溢出的显示方式，还可以解决很多疑难杂症。</li>
</ol>
</blockquote>
<h3 id="隐藏元素的方式"><a class="markdownIt-Anchor" href="#隐藏元素的方式"></a> 隐藏元素的方式</h3>
<ol>
<li>visibility属性<br />
visibility属性默认值是show，如果设置为hidden，元素会隐藏。<br />
元素看不见了，还占有原来的位置（元素的大小依然保持）。</li>
<li>display属性<br />
设置display:none，就可以让元素隐藏。<br />
彻底地隐藏，不但看不见，也不占用任何位置，没有大小宽高。</li>
</ol>
<h3 id="13样式的继承"><a class="markdownIt-Anchor" href="#13样式的继承"></a> 13.样式的继承</h3>
<p>有些样式会继承，元素如果本身设置了某个样式，就使用本身设置的样式；但如果本身没有设置某个样式，会从父元素开始一级一级继承（优先继承离得近的祖先元素）。</p>
<ul>
<li>会继承的css属性</li>
</ul>
<blockquote>
<p>字体属性、文本属性（除了vertical-align）、文字颜色等。</p>
</blockquote>
<ul>
<li>不会继承的css属性</li>
</ul>
<blockquote>
<p>边框、背景、内边距、外边距、宽高、溢出方式等。</p>
</blockquote>
<blockquote>
<p>一个规律：能继承的属性，都是不影响布局的，简单说：都是和盒子模型没关系的。</p>
</blockquote>
<h3 id="布局小技巧"><a class="markdownIt-Anchor" href="#布局小技巧"></a> 布局小技巧</h3>
<ol>
<li>行内元素、行内块元素，可以被父元素当做文本处理。
<blockquote>
<p>即：可以像处理文本对齐一样，去处理：行内、行内块在父元素中的对齐。<br />
例如：text-align、line-height、text-indent 等。</p>
</blockquote>
</li>
<li>如何让子元素，在父亲中<strong>水平居中</strong>：</li>
</ol>
<ul>
<li>若子元素为<strong>块元素</strong>，给父元素加上：<code>margin:0 auto</code>；</li>
<li>若子元素为<strong>行内元素、行内块元素</strong>，给父元素加上：<code>text-align:center</code>。</li>
</ul>
<ol start="3">
<li>如何让子元素，在父亲中<strong>垂直居中</strong>：</li>
</ol>
<ul>
<li>若子元素为<strong>块元素</strong>，给子元素加上：margin-top，值为：（父元素content－子元素盒子总高）／2。</li>
<li>若子元素为<strong>行内元素、行内块元素</strong>：
<ul>
<li>让父元素的height=line-height，每个子元素都加上：<code>vertical-align:middle</code>;</li>
<li>补充：若想绝对垂直居中，父元素font-size 设置为0。</li>
</ul>
</li>
</ul>
<h3 id="元素之间的空白问题产生的原因"><a class="markdownIt-Anchor" href="#元素之间的空白问题产生的原因"></a> 元素之间的空白问题产生的原因：</h3>
<p>行内元素、行内块元素，彼此之间的换行会被浏览器解析为一个空白字符。解决方案：</p>
<ol>
<li>方案一：去掉换行和空格（不推荐）。</li>
<li>方案二：给父元素设置font-size:0，再给需要显示文字的元素，单独设置字体大小(推者).</li>
</ol>
<h3 id="行内块的幽灵空白问题"><a class="markdownIt-Anchor" href="#行内块的幽灵空白问题"></a> 行内块的幽灵空白问题</h3>
<ul>
<li>产生原因：<br />
行内块元素与文本的基线对齐，而文本的基线与文本最底端之间是有一定距离的。</li>
<li>解决方案：</li>
</ul>
<ol>
<li>给行行内块设置<code>vertical</code>，值不为<code>baseline</code>即可，设置为<code>middel</code>、<code>bottom</code>、<code>top</code>均可。</li>
<li>若父元素中只有一张图片，设置图片为<code>display: block</code>。</li>
<li>给父元素设置<code>font-size：0</code>。如果该行内块内部还有文本，则需单独设置<code>font-size</code>。</li>
</ol>
<h3 id="元素浮动后的特点"><a class="markdownIt-Anchor" href="#元素浮动后的特点"></a> 元素浮动后的特点</h3>
<ol>
<li>脱离文档流。</li>
<li>不管浮动前是什么元素，浮动后：默认宽与高都是被内容撑开（尽可能小），而且可以设置宽高。</li>
<li>不会独占一行，可以与其他元素共用一行。</li>
<li>不会 <strong>margin</strong> 合并，也不会 <strong>margin</strong> 塌陷，能够完美的设置四个方向的 <strong>margin</strong> 和 <strong>padding</strong> 。</li>
<li>不会像行内块一样被当做文本处理（没有行内块的空白问题）。</li>
</ol>
<h3 id="浮动后会有哪些影响"><a class="markdownIt-Anchor" href="#浮动后会有哪些影响"></a> 浮动后会有哪些影响</h3>
<ul>
<li>对兄弟元素的影响：<br />
后面的兄弟元素，会占据浮动元素之前的位置，在浮动元素的下面；对前面的兄弟无影响。</li>
<li>对父元素的影响：<br />
不能撑起父元素的高度，导致父元素高度塌陷；但父元素的宽度依然束缚浮动的元素。</li>
</ul>
<h3 id="解决浮动产生的影响清除浮动解决方案"><a class="markdownIt-Anchor" href="#解决浮动产生的影响清除浮动解决方案"></a> 解决浮动产生的影响（清除浮动）解决方案：</h3>
<ol>
<li>方案一：给父元素指定高度。</li>
<li>方案二：给父元素也设置浮动，带来其他影响。</li>
<li>方案三：给父元素设置<code>overflow:hidden</code>。</li>
<li>方案四：在所有浮动元素的最后面，添加一个块级元素，并给该块级元素设置<code>clear:both</code>。</li>
<li>方案五：给浮动元素的父元素，设置伪元素，通过伪元素清除浮动，原理与方案四相同。===&gt;推荐使用</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>布局中的一个原则：设置浮动的时候，兄弟元素要么全都浮动，要么全都不浮动。</p>
</blockquote>
<h3 id="相对定位"><a class="markdownIt-Anchor" href="#相对定位"></a> 相对定位</h3>
<ol>
<li>如何设置相对定位？</li>
</ol>
<ul>
<li>给元素设置<code>position：relative</code>即可实现相对定位。</li>
<li>可以使用 <code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code> 四个属性调整位置。</li>
</ul>
<ol start="2">
<li>相对定位的参考点在哪里？</li>
</ol>
<ul>
<li>相对自己原来的位置</li>
</ul>
<ol start="3">
<li>相对定位的特点：</li>
</ol>
<ul>
<li>不会脱离文档流，元素位置的变化，只是视觉效果上的变化，不会对其他元素产生任何影响</li>
<li>定位元素的显示层级比普通元素高，无论什么定位，显示层级都是一样的。
<ul>
<li>定位的元素会盖在普通元素之上。</li>
<li>都发生定位的两个元素，后写的元素会盖在先写的元素之上。</li>
</ul>
</li>
<li><code>left</code>不能和<code>right</code>一起设置，<code>top</code>和<code>bottom</code>不能一起设置。</li>
<li>相对定位的元素，也能继续浮动，但不推荐这样做。</li>
<li>相对行为的元素，也能通过margin调整位置，但不推荐这样做。</li>
</ul>
<blockquote>
<p>注意：绝大多数情况下，相对定位，会与绝对定位配合使用。</p>
</blockquote>
<h3 id="绝对定位"><a class="markdownIt-Anchor" href="#绝对定位"></a> 绝对定位</h3>
<ol>
<li>如何设置绝对定位？</li>
</ol>
<ul>
<li>给元素设置<code>position：absolute</code>即可实现绝对定位。</li>
<li>可以使用 <code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code> 四个属性调整位置。</li>
</ul>
<ol start="2">
<li>绝对定位的参考点在哪里？</li>
</ol>
<ul>
<li>参考它的包含块。
<blockquote>
<p>什么是包含块？</p>
<ol>
<li>对于没有脱离文档流的元素：包含块就是父元素；</li>
<li>对于脱离文档流的元素：包含块是第一个拥有定位属性的祖先元素（如果所有祖先都没定位，那包含块就是整个页面）。</li>
</ol>
</blockquote>
</li>
</ul>
<ol start="3">
<li>绝对定位元素的特点：</li>
</ol>
<ul>
<li>脱离文档流，会对后面的兄弟元素、父元素有影响。</li>
<li><code>left</code>不能和<code>right</code>一起设置，<code>top</code>和<code>bottom</code>不能一起设置。</li>
<li>绝对定位、浮动不能同时设置，如果同时设置，浮动失效，以定位为主。</li>
<li>绝对定位的元素，也能通过<code>margin</code>调整位置，但不推荐这样做。</li>
<li>无论是什么元素（行内、行内块、块级）设置为绝对定位之后，都变成了定位元素。</li>
</ul>
<blockquote>
<p>何为定位元素？一一默认宽、高都被内容所撑开，且能自由设置宽高。</p>
</blockquote>
<h3 id="固定定位"><a class="markdownIt-Anchor" href="#固定定位"></a> 固定定位</h3>
<ol>
<li>如何设置为固定定位？</li>
</ol>
<ul>
<li>给元素设置<code>position：fixed</code>即可实现固定定位。</li>
<li>可以使用<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>四个属性调整位置。</li>
</ul>
<ol start="2">
<li>固定定位的参考点在哪里？</li>
</ol>
<ul>
<li>参考它的视口
<blockquote>
<p>什么是视口？一一对于PC浏览器来说，视口就是我们看网页的那扇“窗户”。</p>
</blockquote>
</li>
</ul>
<ol start="3">
<li>固定定位元素的特点</li>
</ol>
<ul>
<li>脱离文档流，会对后面的兄弟元素、父元素有影响。</li>
<li><code>left</code>不能和<code>right</code>一起设置，<code>top</code>和<code>bottom</code>不能一起设置。</li>
<li>固定定位和浮动不能同时设置，如果同时设置，浮动失效，以固定定位为主。</li>
<li>固定定位的元素，也能通过<code>margin</code>调整位置，但不推荐这样做。</li>
<li>无论是什么元素（行内、行内块、块级）设置为固定定位之后，都变成了定位元素。</li>
</ul>
<h3 id="粘性定位"><a class="markdownIt-Anchor" href="#粘性定位"></a> 粘性定位</h3>
<ol>
<li>如何设置为粘性定位？</li>
</ol>
<ul>
<li>给元素设置<code>position:sticky</code> 即可实现粘性定位。</li>
<li>可以使用 <code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>四个属性调整位置，不过最常用的是<code>top</code> 值。</li>
</ul>
<ol start="2">
<li>粘性定位的参考点在哪里？</li>
</ol>
<ul>
<li>离它最近的一个拥有“滚动机制”的祖先元素，即便这个祖先不是最近的真实可滚动祖先。</li>
</ul>
<ol start="3">
<li>粘性定位元素的特点</li>
</ol>
<ul>
<li>不会脱离文档流，它是一种专门用于窗口滚动时的新的定位方式。</li>
<li>最常用的值是<code>top</code>值。</li>
<li>粘性定位和浮动可以同时设置，但不推荐这样做。</li>
<li>粘性定位的元素，也能通过<code>margin</code>调整位置，但不推荐这样做。</li>
</ul>
<blockquote>
<p>粘性定位和相对定位的特点基本一致，不同的是：粘性定位可以在元素到达某个位置时将其固定。</p>
</blockquote>
<h3 id="定位层级"><a class="markdownIt-Anchor" href="#定位层级"></a> 定位层级</h3>
<ol>
<li>定位元素的显示层级比普通元素高，无论什么定位，显示层级都是一样的。</li>
<li>如果位置发生重叠，默认情况是：后面的元素，会显示在前面元素之上。</li>
<li>可以通过CSS 属性<code>z-index</code>调整元素的显示层级。</li>
<li><code>z-index</code>的属性值是数字，没有单位，值越大显示层级越高。</li>
<li>只有定位的元素设置<code>z-index</code>才有效。</li>
<li>如果<code>z-index</code>值大的元素，依然没有覆盖掉<code>z-index</code>值小的元素，那么请检查其包含块的层级。</li>
</ol>
<h3 id="定位的特殊应用"><a class="markdownIt-Anchor" href="#定位的特殊应用"></a> 定位的特殊应用</h3>
<ol>
<li>让定位元素的宽充满包含块</li>
</ol>
<ul>
<li>块宽想与包含块一致，可以给定位元素同时设置<code>left</code>和<code>right</code>为0。</li>
<li>高度想与包含块一致，<code>top</code> 和<code>bottom</code>设置为0。</li>
</ul>
<ol start="2">
<li>让定位元素在包含块中居中</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<ol>
<li>发生固定定位、绝对定位后，元素都变成了定位元素，默认宽高被内容撑开，且依然可以设置宽高。</li>
<li>发生相对定位后，元素依然是之前的显示模式。</li>
<li>以下所说的特殊应用，只针对<strong>绝对定位</strong>和<strong>固定定位</strong>的元素，不包括相对定位的元素。</li>
</ol>
</blockquote>
<h2 id="h5"><a class="markdownIt-Anchor" href="#h5"></a> H5</h2>
<ol>
<li>什么是<code>HTML5</code>?</li>
</ol>
<ul>
<li><code>HTML5</code>是新一代的HTML标准，2014年10月由万维网联盟（W3C）完成标准制定。</li>
<li>官网地址：
<ul>
<li><code>W3C</code>提供:<a href="https://www.w3.org/TR/html/index.html"> https://www.w3.org/TR/html/index.html </a></li>
<li><code>WHATWG</code>提供：<a href="https://whatwg-cn.github.io/html/multipage"> https://whatwg-cn.github.io/html/multipage </a></li>
</ul>
</li>
<li><code>HTML5</code>在狭义上是指新一代的HTML标准，在广义上是指：整个前端。</li>
</ul>
<ol start="2">
<li><code>HTML5</code>优势</li>
</ol>
<ul>
<li>针对<code>JavaScript</code>，新增了很多可操作的接口。</li>
<li>新增了一些语义化标签、全局属性。</li>
<li>新增了多媒体标签，可以很好的替代<code>flash</code>。</li>
<li>更加侧重语义化，对于<code>SEO</code>更友好。</li>
<li>可移植性好，可以大量应用在移动设备上。</li>
</ul>
<ol start="3">
<li>HTML5兼容性</li>
</ol>
<ul>
<li>支持：<code>Chrome</code>、<code>Safari</code>、<code>Opera</code>、<code>Firefox</code>等主流浏览器。</li>
</ul>
<h3 id="新增语义化标签"><a class="markdownIt-Anchor" href="#新增语义化标签"></a> 新增语义化标签</h3>
<ol>
<li>新增布局标签</li>
</ol>
<table>
<thead>
<tr>
<th>b标签名</th>
<th>语义</th>
<th>单/双标签</th>
</tr>
</thead>
<tbody>
<tr>
<td>header</td>
<td>整个页面，或部分区域的头部</td>
<td>双</td>
</tr>
<tr>
<td>footer</td>
<td>整个页面，或部分区域的底部</td>
<td>双</td>
</tr>
<tr>
<td>nav</td>
<td>导航</td>
<td>双</td>
</tr>
<tr>
<td>article</td>
<td>文章、帖子、杂志、新闻、博客、评论等</td>
<td>双</td>
</tr>
<tr>
<td>section</td>
<td>页面中的某段文字，或文章中的某段文字（里面文字通常里面会包含标题）</td>
<td>双</td>
</tr>
<tr>
<td>aside</td>
<td>侧边栏</td>
<td>双</td>
</tr>
<tr>
<td>main</td>
<td>文档的主要内容（WHATWG没有语义，IE不支持），几乎不用</td>
<td>双</td>
</tr>
<tr>
<td>hgroup</td>
<td>包裹连续的标题，如文章主标题、副标题的组合（W3C将其删除）</td>
<td>双</td>
</tr>
</tbody>
</table>
<ul>
<li>关于<code>article</code>和<code>section</code>：</li>
</ul>
<blockquote>
<ol>
<li><code>artical</code>里面可以有多个<code>section</code>。</li>
<li><code>section</code>强调的是分段或分块，如果你想将一块内容分成几段的时候，可使用<code>section</code>元素。</li>
<li><code>article</code>比<code>section</code>更强调独立性，一块内容如果比较独立、比较完整，应该使用<code>article</code>元素。</li>
</ol>
</blockquote>
<ol start="2">
<li>新增状态标签</li>
</ol>
<ul>
<li>meter标签<br />
语义：定义已知范围内的标量测量。也被称为gauge（尺度），双标签，例如：电量、磁盘用量等。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>手机电量：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">low</span>=<span class="string">&quot;16&quot;</span> <span class="attr">high</span>=<span class="string">&quot;20&quot;</span> <span class="attr">value</span>=<span class="string">&quot;15&quot;</span> <span class="attr">optimum</span>=<span class="string">&quot;90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>progress标签<br />
语义：显示某个任务完成的进度的指示器，一般用于表示进度条，双标签，例如：工作完成进度等。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>当前进度：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>新增列表标签</li>
</ol>
<table>
<thead>
<tr>
<th>标签名</th>
<th>语义</th>
<th>单/双标签</th>
</tr>
</thead>
<tbody>
<tr>
<td>datalist</td>
<td>用于搜索框的关键字提示</td>
<td>双</td>
</tr>
<tr>
<td>details</td>
<td>用于展示问题和答案，或对专有名词进行解释</td>
<td>双</td>
</tr>
<tr>
<td>summary</td>
<td>写在<code>details</code>的里面，用于指定问题或专有名词</td>
<td>双</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;mydata&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;mydata&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;周杰伦&quot;</span>&gt;</span>周杰伦<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;周冬雨&quot;</span>&gt;</span>周冬雨<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;马冬梅&quot;</span>&gt;</span>马冬梅<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;温兆伦&quot;</span>&gt;</span>温兆伦<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span></span><br><span class="line">        如何一夜暴富？</span><br><span class="line">    <span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>来尚硅谷学习前端<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>新增文本标签</li>
</ol>
<ul>
<li>文本注音</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>魑魅魍魉<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rt</span>&gt;</span>chī mèi wǎng liǎng<span class="tag">&lt;/<span class="name">rt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>文本标记</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem, ipsum <span class="tag">&lt;<span class="name">mark</span>&gt;</span>dolor<span class="tag">&lt;/<span class="name">mark</span>&gt;</span> sit amet consectetur adipisicing elit. Vel, quibusdam!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="新增表单功能"><a class="markdownIt-Anchor" href="#新增表单功能"></a> 新增表单功能</h3>
<ol>
<li>表单控件新增属性</li>
</ol>
<table>
<thead>
<tr>
<th>属性名</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>placeholder</td>
<td>提示文字（注意：不是默认值，<code>value</code>是默认值），适用于<strong>文字输入类</strong>的表单控件。</td>
</tr>
<tr>
<td>required</td>
<td>表示该输入项必填，适用于<strong>除按钮</strong>外其他表单控件。</td>
</tr>
<tr>
<td>autofocus</td>
<td>自动完成，可以设置为<code>on</code>或<code>off</code>，适用于<strong>文字输入类</strong>的表单控件。注意：密码输入框、多行输入框不可用。</td>
</tr>
<tr>
<td>autocomplete</td>
<td>自动完成，可以设置为on或off，适用于文字输入类的表单控件。<br>注意：密码输入框、多行输入框不可用。</td>
</tr>
<tr>
<td>pattern</td>
<td>填写正则表达式，适用于文本输入类表单控件。<br> 注意：多行输入不可用，且空的输入框不会验证，往往与<code>required</code>配合。</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>input新增属性值</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    url：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    数值：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">    搜索：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line">    光照强度：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;range&quot;</span> <span class="attr">max</span>=<span class="string">&quot;80&quot;</span> <span class="attr">min</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">    颜色：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line">    日期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    月份：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    周：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span> <span class="attr">name</span>=<span class="string">&quot;week&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    时间：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    日期+时间：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>form标签新增属性</li>
</ol>
<table>
<thead>
<tr>
<th>属性值</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>novalidate</code></td>
<td>如果给<code>form</code>标签设置了该属性，表单提交的时候不再进行验证</td>
</tr>
</tbody>
</table>
<h3 id="视频标签"><a class="markdownIt-Anchor" href="#视频标签"></a> 视频标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">controls</span> <span class="attr">muted</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">poster</span>=<span class="string">&quot;&quot;</span> <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="音频标签"><a class="markdownIt-Anchor" href="#音频标签"></a> 音频标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;../images/Liangzhu.mp3&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="css3"><a class="markdownIt-Anchor" href="#css3"></a> CSS3</h2>
<ol>
<li><code>CSS3</code> 概述</li>
</ol>
<ul>
<li><code>CSS3</code>是<code>CSS2</code>的升级版本，它在CSS2的基础上，新增了很多强大的新功能，从而解决一些实际面临的问题。</li>
<li><code>CSS3</code>在未来会按照<strong>模块化</strong>的方式去发展：<a href="https://www.w3.org/Style/CSS/current-work.html"> https://www.w3.org/Style/CSS/current-work.html </a></li>
<li><code>CSS3</code>的新特性如下：
<ul>
<li>新增了更加实用的选择器，例如：动态伪类选择器、目标伪类选择器、伪元素选择器等等。</li>
<li>新增了更好的视觉效果，例如：圆角、阴影、渐变等。</li>
<li>新增了丰富的背景效果，例如：支持多个背景图片，同时新增了若干个背景相关的属性。</li>
<li>新增了全新的布局方案一一弹性盒子。</li>
<li>新增了<code>Web</code>字体，可以显示用户电脑上没有安装的字体。</li>
<li>增强了颜色，例如：<code>HSL</code>、<code>HSLA</code>、<code>RGBA</code>几种新的颜色模式，新增<code>opacity</code>属性来控制透明度。</li>
<li>增加了<code>2D</code>和<code>3D</code>变换，例如：旋转、扭曲、缩放、位移等。</li>
<li>增加动画与过渡效果，让效果的变换更具流线性、平滑性。</li>
</ul>
</li>
</ul>
<ol start="2">
<li><code>CSS3</code> 私有前缀</li>
</ol>
<ul>
<li><code>Chrome</code>浏览器：<code>-webkit-</code></li>
<li><code>Safari</code> 浏览器：<code>-webkit-</code></li>
<li><code>Firefox</code>浏览器：<code>-moz-</code></li>
<li><code>Edge</code>浏览器：<code>-webkit-</code></li>
</ul>
<ol start="3">
<li>box-sizing怪异盒模型<br />
使用box-sizing属性可以设置盒模型的两种类型</li>
</ol>
<table>
<thead>
<tr>
<th>可选值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>content-box</td>
<td>width和height设置的是盒子内容区的大小。（默认值）</td>
</tr>
<tr>
<td>border-box</td>
<td>width和height设置的是盒子总大小。（怪异盒模型）</td>
</tr>
</tbody>
</table>
<ol start="4">
<li>resize调整盒子大小<br />
使用resize属性可以控制是否允许用户调节元素尺寸。</li>
</ol>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>不允许用户调整元素大小 （默认）</td>
</tr>
<tr>
<td>both</td>
<td>用户可以调节元素的宽度和高度</td>
</tr>
<tr>
<td>horizontal</td>
<td>用户可以调节元素的宽度</td>
</tr>
<tr>
<td>vertical</td>
<td>用户可以调节元素的高度</td>
</tr>
</tbody>
</table>
<ol start="5">
<li><code>opacity</code>不透明度</li>
</ol>
<ul>
<li><code>opacity</code>属性能为整个元素添加透明效果，值是0到1之间的小数，0是完全透明，1表示完全不透明。
<blockquote>
<p><code>opacity</code>与<code>rgba</code> 的区别?<br />
<code>opacity</code>是一个属性，设置的是整个元素（包括元素里的内容）的不透明度。<br />
<code>rgba</code>是颜色的设置方式，用于设置颜色，它的透明度，仅仅是调整颜色的透明度。</p>
</blockquote>
</li>
</ul>
<h3 id="背景设置"><a class="markdownIt-Anchor" href="#背景设置"></a> 背景设置</h3>
<ol>
<li>background-origin<br />
作用：设置背景图的原点。</li>
</ol>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>padding-box</code></td>
<td>从<code>padding</code>区域开始显示背景图像一默认值</td>
</tr>
<tr>
<td><code>border-box</code></td>
<td>从<code>border</code>区域开始显示背景图像</td>
</tr>
<tr>
<td><code>content-box</code></td>
<td>从<code>content</code>区域开始显示背景图像</td>
</tr>
</tbody>
</table>
<ol start="2">
<li><code>background-size</code></li>
</ol>
<ul>
<li>作用：设置背景图的尺寸。</li>
<li>语法：</li>
</ul>
<blockquote>
<p>用长度值指定背景图片大小，不允许负值。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>:<span class="number">300px</span> <span class="number">200px</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>用百分比指定背景图片大小，不允许负值。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>:<span class="number">100%</span> <span class="number">100%</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>auto</code>：背景图片的真实大小。一一默认值<br />
<code>contain</code>：将背景图片等比缩放，使背景图片的宽或高，与容器的宽或高相等，再将完整背景图片包含<br />
在容器内，但要注意：可能会造成容器里部分区域没有背景图片。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: contain;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>cover</code>：将背景图片等比缩放，直到完全覆盖容器，图片会尽可能全的显示在元素上，但要注意：背景<br />
图片有可能显示不完整。一一相对比较好的选择</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: cover;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>多背景图<br />
<code>CSS3</code>允许元素设置多个背景片</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 添加多个背景图 */</span></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;../images/bg-lt.png&#x27;</span>) no-repeat,</span><br><span class="line">            <span class="built_in">url</span>(<span class="string">&#x27;../images/bg-rt.png&#x27;</span>) no-repeat right top, </span><br><span class="line">            <span class="built_in">url</span>(<span class="string">&#x27;../images/bg-lb.png&#x27;</span>) no-repeat left bottom, </span><br><span class="line">            <span class="built_in">url</span>(<span class="string">&#x27;../images/bg-rb.png&#x27;</span>) no-repeat right bottom;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="新增边框相关属性"><a class="markdownIt-Anchor" href="#新增边框相关属性"></a> 新增边框相关属性</h3>
<ol>
<li><code>outline-offset</code>设置外轮廓与边框的距离，正负值都可以设置。</li>
<li><code>outline</code>复合属性</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">outline</span>: <span class="number">50px</span> solid blue;</span><br></pre></td></tr></table></figure>
<h3 id="新增文本属性"><a class="markdownIt-Anchor" href="#新增文本属性"></a> 新增文本属性</h3>
<ol>
<li>文本阴影</li>
</ol>
<ul>
<li>在<code>CSS3</code>中，我们可以使用<code>text-shadow</code>属性给文本添加阴影。</li>
<li>语法：<br />
<code>text-shadow:h-shadow v-shadow blur color;</code></li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>h-shadow</code></td>
<td>必需写，水平阴影的位置。允许负值。</td>
</tr>
<tr>
<td><code>v-shadow</code></td>
<td>必需写，垂直阴影的位置。允许负值。</td>
</tr>
<tr>
<td><code>blur</code></td>
<td>可选，模糊的距离。</td>
</tr>
<tr>
<td><code>color</code></td>
<td>可选，阴影的颜色</td>
</tr>
</tbody>
</table>
<ul>
<li>默认值：<code>text-shadow：none</code>表示没有阴影。</li>
</ul>
<ol start="2">
<li>文本换行</li>
</ol>
<ul>
<li>在<code>CSS3</code>中，我们可以使用<code>white-space</code>属性设置文本换行方式。</li>
<li>常用值如下：</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>normal</code></td>
<td>文本超出边界自动换行，文本中的换行被浏览器识别为一个空格。 (默认值)</td>
</tr>
<tr>
<td><code>pre</code></td>
<td>原样输出，与<code>pre</code>标签的效果相同。</td>
</tr>
<tr>
<td><code>pre-wrap</code></td>
<td>在<code>pre</code>效果的基础上，超出元素边界自动换行。</td>
</tr>
<tr>
<td><code>pre-line</code></td>
<td>在<code>pre</code>效果的基础上，超出元素边界自动换行，且只识别文本中的换行，空格会忽略。</td>
</tr>
<tr>
<td><code>nowrap</code></td>
<td>强制不换行</td>
</tr>
</tbody>
</table>
<ol start="3">
<li>文本溢出</li>
</ol>
<ul>
<li>在<code>CSS3</code>中，我们可以使用<code>text-overflow</code>属性设置文本内容溢出时的呈现模式。</li>
<li>常用值如下：</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>clip</code></td>
<td>当内联内容溢出时，将溢出部分裁切掉。(默认值)</td>
</tr>
<tr>
<td><code>ellipsis</code></td>
<td>当内联内容溢出块容器时，将溢出部分替换为…</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：要使得<code>text-overflow</code>属性生效，块容器必须显式定义<code>overflow</code>为非<code>visible</code>值， <code>white-space</code> 为 <code>nowrap</code> 值。</p>
</blockquote>
<ol start="4">
<li>文本修饰</li>
</ol>
<ul>
<li><code>CSS3</code>升级了<code>text-decoration</code>属性，让其变成了复合属性。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="comment">/* text-decoration-line: overline; */</span></span><br><span class="line">    <span class="comment">/* text-decoration-style: dashed; */</span></span><br><span class="line">    <span class="comment">/* text-decoration-color: blue; */</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: overline dashed blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>文本描边</li>
</ol>
<ul>
<li>注意：文字描边功能仅<code>webkit</code>内核浏览器支持。经验证：<code>Firefox</code> 浏览器也支持！</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">    -webkit-<span class="selector-tag">text</span>-<span class="attribute">stroke</span>: <span class="number">3px</span> red;</span><br><span class="line">    <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="新增渐变"><a class="markdownIt-Anchor" href="#新增渐变"></a> 新增渐变</h3>
<ol>
<li>线性渐变</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red, yellow, green);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right top, red, yellow, green);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">20deg</span>, red, yellow, green);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box4</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red <span class="number">50px</span>, yellow <span class="number">100px</span>, green <span class="number">150px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box5</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">20</span>eg, red <span class="number">50px</span>, yellow <span class="number">100px</span>, green <span class="number">150px</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: transparent;</span><br><span class="line">    -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>径向渐变</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(red, yellow, blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(at left top, red, yellow, blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(at <span class="number">150px</span> <span class="number">100px</span>, red, yellow, blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box4</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(circle, red, yellow, blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box5</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(<span class="number">200px</span> <span class="number">200px</span>, red, yellow, blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box6</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(red <span class="number">50px</span>, yellow <span class="number">100px</span>, blue <span class="number">150px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2d变换"><a class="markdownIt-Anchor" href="#2d变换"></a> 2D变换</h3>
<ol>
<li><code>2D</code>位移<br />
<code>2D</code>位移可以改变元素的位置，具体使用方式如下：</li>
</ol>
<ul>
<li>先给元素添加转换属性<code>transform</code></li>
<li>编写<code>transform</code>的具体值，相关可选值如下：</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>translateX</code></td>
<td>设置水平方向位移，需指定长度值；若指定的是百分比，是参考自身宽度的百分比。</td>
</tr>
<tr>
<td><code>translateY</code></td>
<td>设置垂直方向位移，需指定长度值；若指定的是百分比，是参考自身高度的百分比。</td>
</tr>
<tr>
<td><code>translate</code></td>
<td>一个值代表水平方向，两个值代表：水平和垂直方向。</td>
</tr>
</tbody>
</table>
<ul>
<li>注意点：</li>
</ul>
<blockquote>
<ol>
<li>位移与相对定位很相似，都不脱离文档流，不会影响到其它元素。</li>
<li>与相对定位的区别：相对定位的百分比值，参考的是其父元素；定位的百分比值，参考的是其自身。</li>
<li>浏览器针对位移有优化，与定位相比，浏览器处理位移的效率更高。</li>
<li><code>transform</code>可以链式编写，例如：</li>
</ol>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">translateX</span>(<span class="number">30px</span>) <span class="built_in">translateY</span>(<span class="number">40px</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="5">
<li>位移对行内元素无效。</li>
<li>位移配合定位，可实现元素水平垂直居中</li>
</ol>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><code>2D</code>缩放<br />
<code>2D</code>缩放是指：让元素放大或缩小，具体使用方式如下：</li>
</ol>
<ul>
<li>先给元素添加转换属性<code>transform</code></li>
<li>编写<code>transform</code>的具体值，相关可选值如下：</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>scaleX</code></td>
<td>设置水平方向的缩放比例，值为一个数字，1表示不缩放，大于1放大，小于1缩小。</td>
</tr>
<tr>
<td><code>scaleY</code></td>
<td>设置垂直方向的缩放比例，值为一个数字，1表示不缩放，大于1放大，小于1缩小。</td>
</tr>
<tr>
<td><code>scale</code></td>
<td>同时设置水平方向、垂直方向的缩放比例，一个值代表同时设置水平和垂直缩放；两个值分别代表：水平缩放、垂直缩放。</td>
</tr>
</tbody>
</table>
<ul>
<li>注意点：</li>
</ul>
<blockquote>
<ol>
<li><code>scale</code>的值，是支持写负数的，但几乎不用，因为容易让人产生误解。</li>
<li>借助缩放，可实现小于<code>12px</code>的文字。</li>
</ol>
</blockquote>
<ol start="3">
<li><code>2D</code>旋转<br />
<code>2D</code>旋转是指：让元素在二维平面内，顺时针旋转或逆时针旋转，具体使用方式如下：</li>
</ol>
<ul>
<li>先给元素添加转换属性transform</li>
<li>编写transform的具体值，相关可选值如下：</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>rotate</code></td>
<td>设置旋转角度，需指定一个角度值（<code>deg</code>），正值顺时针，负值逆时针。</td>
</tr>
</tbody>
</table>
<ul>
<li>注意：<code>rotateZ(20deg)</code> 相当于<code>rotate(20deg)</code>，当然到了<code>3D</code>变换的时候，还能写：<code>rotate(x,x,x)</code></li>
</ul>
<ol start="4">
<li>多重变换</li>
</ol>
<ul>
<li>多个变换，可以同时使用一个<code>transform</code>来编写。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* transform: translate(100px, 100px) scale(.5); */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">100px</span>) <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>注意点：多重变换时，建议最后旋转。</li>
</ul>
<ol start="5">
<li>变换原点</li>
</ol>
<ul>
<li>元素变换时，默认的原点是元素的中心，使用<code>transform-origin</code>可以设置变换的原点。</li>
<li>改变换原点对位移没有影响，对旋转和缩放会产生影响。</li>
<li>如果提供两个值，第一个用于横坐标，第二个用于纵坐标。</li>
<li>如果只提供一个，若是像素值，表示横坐标，纵坐标取<code>50%</code>；若是关键词，则另一个坐标取<code>50%</code></li>
</ul>
<blockquote>
<ol>
<li><code>transform-origin：50% 50%</code>，变换原点在元素的中心位置，百分比是相对于自身。一默认值</li>
<li><code>transform-origin：left top</code>，变换原点在元素的左上角。</li>
<li><code>transform-origin：50px 50px</code>，变换原点距离元素左上角<code>50px 50px</code>的位置。</li>
<li><code>transform-origin：0</code>，只写一个值的时候，第二个值默认为<code>50%</code>。</li>
</ol>
</blockquote>
<h3 id="3d变换"><a class="markdownIt-Anchor" href="#3d变换"></a> 3D变换</h3>
<ol>
<li>开启<code>3D</code>空间<br />
重要原则：元素进行<code>3D</code>变换的首要操作：父元素必须开启<code>3D</code>空间！</li>
</ol>
<blockquote>
<p>使用<code>transform-style</code>开启<code>3D</code>空间，可选值如下：</p>
<ul>
<li><code>flat</code>：让子元素位于此元素的二维平面内（<code>2D</code>空间）－一默认值</li>
<li><code>preserve-3d</code>：让子元素位于此元素的三维空间内（<code>3D</code>空间）</li>
</ul>
</blockquote>
<ol start="2">
<li>设置景深<br />
何为景深？-－指定观察者与<code>z=0</code>平面的距离，能让发生<code>3D</code>变换的元素，产生透视效果，看来更加立体。</li>
</ol>
<blockquote>
<p>使用<code>perspective</code>设置景深，可选值如下：</p>
<ul>
<li><code>none</code>：不指定透视－一 (默认值)</li>
<li>长度值：指定观察者距离<code>z=0</code>平面的距离，不允许负值。</li>
</ul>
</blockquote>
<blockquote>
<p>注意：<code>perspective</code>设置给发生<code>3D</code>变换元素的父元素！</p>
</blockquote>
<ol start="3">
<li>透视点位置</li>
</ol>
<ul>
<li>所谓透视点位置，就是观察者位置；默认的透视点在元素的中心。</li>
<li>注意：通常情况下，我们不需要调整透视点位置。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置透视点的位置 */</span></span><br><span class="line"><span class="comment">/* 相对坐标轴往右偏移400px，往下偏移300px（相当于人蹲下300像素，然后向右移动400像素看元素） */</span></span><br><span class="line"><span class="attribute">perspective-origin</span>: <span class="number">400px</span> <span class="number">300px</span>;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>3D位移<br />
<code>3D</code>位移是在<code>2D</code>位移的基础上，可以让元素沿z轴位移，具体使用方式如下：</li>
</ol>
<ul>
<li>先给元素添加转换属性<code>transform</code></li>
<li>编写<code>transform</code>的具体值，<code>3D</code>相关可选值如下：</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>translateZ</code></td>
<td>设置<code>z</code>轴位移，需指定长度值，正值向屏幕外，负值向屏幕里，且不能写百分比。</td>
</tr>
<tr>
<td><code>translate3d</code></td>
<td>第1个参数对应<code>x</code>轴，第2个参数对应<code>y</code>轴，第3个参数对应<code>z</code>轴，且均不能省略。</td>
</tr>
</tbody>
</table>
<ol start="5">
<li>3D旋转<br />
<code>3D</code>旋转是在<code>2D</code>旋转的基础上，可以让元素沿<code>x</code>轴和<code>y</code>轴旋转，具体使用方式如下：</li>
</ol>
<ul>
<li>先给元素添加转换属性<code>transform</code></li>
<li>编写<code>transform</code>的具体值，3D相关可选值如下：</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>rotateX</code></td>
<td>设置<code>x</code>轴旋转角度，需指定一个角度值（<code>deg</code>），面对<code>x</code>轴正方向：正值顺时针，负值逆时针。</td>
</tr>
<tr>
<td><code>rotateY</code></td>
<td>设置<code>y</code>轴旋转角度，需指定一个角度值（<code>deg</code>），面对y轴正方向：正值顺时针，负值逆时针。</td>
</tr>
<tr>
<td><code>rotate3d</code></td>
<td>前3个参数分别表示坐标轴：<code>x</code>，<code>y</code>，<code>z</code>，第4个参数表示旋转的角度，参数不允许省略。例如：<code>transform：rotate3d(1,1,1,30deg)</code>，意思是：<code>x</code>、<code>y</code>、<code>z</code>分别旋转<code>30</code>度。</td>
</tr>
</tbody>
</table>
<ol start="6">
<li>3D缩放<br />
<code>3D</code>缩放是在<code>2D</code>缩放的基础上，可以让元素沿<code>z</code>轴缩放，具体使用方式如下：</li>
</ol>
<ul>
<li>先给元素添加<strong>转换属性</strong><code>transform</code></li>
<li>编写<code>transform</code>的具体值，<code>3D</code>相关可选值如下：</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>scaleZ</code></td>
<td>设置<code>z</code>轴方向的缩放比例，值为一个数字，<code>1</code>表示不缩放，大于<code>1</code>放大，小于<code>1</code>缩小。</td>
</tr>
<tr>
<td><code>scale3d</code></td>
<td>第1个参数对应<code>x</code>轴，第2个参数对应<code>y</code>轴，第3个参数对应<code>z</code>轴，参数不允许省略。</td>
</tr>
</tbody>
</table>
<h3 id="过渡"><a class="markdownIt-Anchor" href="#过渡"></a> 过渡</h3>
<p>过渡可以在不使用Flash动画，不使用JavaScript的情况下，让元素从一种样式，平滑过渡为另一种样式。</p>
<ol>
<li>基本使用</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="comment">/* 设置哪个属性需要过渡效果 */</span></span><br><span class="line">    <span class="comment">/* transition-property: height width background-color; */</span></span><br><span class="line">    <span class="comment">/* 让所有能过渡的属性，都过渡 */</span></span><br><span class="line">    <span class="attribute">transition-property</span>: all;</span><br><span class="line">    <span class="comment">/* 分别设置时间 */</span></span><br><span class="line">    <span class="comment">/* transition-duration: 1s, 1s, 1s; */</span></span><br><span class="line">    <span class="comment">/* 设置一个时间，所有人都用 */</span></span><br><span class="line">    <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> black;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>高级使用</li>
</ol>
<ul>
<li><a href="https://cubic-bezier.com/">贝赛尔曲线: https://cubic-bezier.com/</a></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- transition-timing-function: xxx; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box1&quot;</span>&gt;</span>ease（慢，快，慢）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box2&quot;</span>&gt;</span>linear（匀速）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box3&quot;</span>&gt;</span>ease-in（慢，快）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box4&quot;</span>&gt;</span>ease-out（快，慢）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box5&quot;</span>&gt;</span>ease-in-out（慢，快，慢）<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box6&quot;</span>&gt;</span>step-start不考虑过渡的时间，直接就是终点<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box7&quot;</span>&gt;</span>step-end考虑过渡时间，但无过渡效果，过渡时间到了以后，瞬间到达终点<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box8&quot;</span>&gt;</span>steps分步过渡<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box9&quot;</span>&gt;</span>无敌的贝赛尔曲线<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>transition</code>复合属性</li>
</ol>
<ul>
<li>如果设置了一个时间，表示<code>duration</code>；如果设置了两个时间，第一是<code>duration</code>，第二个是<code>delay</code>；其他值没有顺序要求。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>:<span class="number">1s</span> <span class="number">1s</span> linear all;</span><br></pre></td></tr></table></figure>
<h3 id="动画"><a class="markdownIt-Anchor" href="#动画"></a> 动画</h3>
<ol>
<li>动画的基本使用</li>
</ol>
<ul>
<li>第一步：定义关键帧 (定义动画)</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="comment">/* 应用动画到元素 */</span></span><br><span class="line">    <span class="attribute">animation-name</span>: moving_right_better;</span><br><span class="line">    <span class="comment">/* 动画持续的时间 */</span></span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">3s</span>;</span><br><span class="line">    <span class="comment">/* 动画延迟时间 */</span></span><br><span class="line">    <span class="attribute">animation-delay</span>: <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义一个动画（定义一组关键帧） */</span></span><br><span class="line"><span class="keyword">@keyframes</span> moving_right &#123;</span><br><span class="line">    <span class="comment">/* 第一帧 */</span></span><br><span class="line">    <span class="selector-tag">from</span> &#123;&#125;</span><br><span class="line">    <span class="comment">/* 最后一帧 */</span></span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">900px</span>);</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>第二步：完整方式定义</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义一个动画（定义一组关键帧）一第二种方式 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> moving_right_better &#123;</span><br><span class="line">    <span class="number">0%</span> &#123; &#125;</span><br><span class="line">    <span class="number">30%</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">60%</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">900px</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">        <span class="attribute">background-color</span>: purple;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>动画的其他属性</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="comment">/* 应用动画到元素 */</span></span><br><span class="line">    <span class="attribute">animation-name</span>: moving_right;</span><br><span class="line">    <span class="comment">/* 动画持续的时间 */</span></span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">3s</span>;</span><br><span class="line">    <span class="comment">/* 动画延迟时间 */</span></span><br><span class="line">    <span class="attribute">animation-delay</span>: <span class="number">0.5s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 其他属性--start */</span></span><br><span class="line">    <span class="comment">/* 设置动画的方式 */</span></span><br><span class="line">    <span class="comment">/* animation-timing-function: steps(20); */</span></span><br><span class="line">    <span class="attribute">animation-timing-function</span>: linear;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 动画播放的次数 */</span></span><br><span class="line">    <span class="attribute">animation-iteration-count</span>: <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 动画的方向 */</span></span><br><span class="line">    <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 动画以外的状态（不发生动画的时候在哪里） */</span></span><br><span class="line">    <span class="attribute">animation-fill-mode</span>: forwards;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.outer</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="comment">/* 动画的播放状态 */</span></span><br><span class="line">    <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> moving_right &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;&#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">900px</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">        <span class="attribute">background-color</span>: purple;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>animation</code>复合属性</li>
</ol>
<ul>
<li>只设置一个时间表示<code>duration</code>，设置两个时间分别是：<code>duration</code>和<code>delay</code>，其他属性没有数量和顺序要求。</li>
</ul>
<blockquote>
<p><code>animation-name</code><br />
<code>animation-duration</code><br />
<code>animation-delay</code><br />
<code>animation-timing-function</code><br />
<code>animation-iteration-count</code><br />
<code>animation-direction</code><br />
<code>animation-fill-mode</code><br />
<code>animation-play-state</code></p>
</blockquote>
<ul>
<li>以上属性符合的结果</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">animation</span>: moving_right <span class="number">3s</span> linear <span class="number">0.5s</span> <span class="number">3</span> alternate forwards;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多列布局"><a class="markdownIt-Anchor" href="#多列布局"></a> 多列布局</h3>
<p>作用：专门用于实现类似于报纸的布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 直接指定列数 */</span></span><br><span class="line">    <span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="comment">/* 指定每一列的宽度，会自动计算列数 */</span></span><br><span class="line">    <span class="comment">/* column-width: 220px; */</span></span><br><span class="line">    <span class="comment">/* 复合属性，能同时指定列宽和列数（不推荐使用） */</span></span><br><span class="line">    <span class="comment">/* columns: 6 200px; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调整列间距 */</span></span><br><span class="line">    <span class="attribute">column-gap</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="comment">/* 边框相关的复合属性 */</span></span><br><span class="line">    <span class="attribute">column-rule</span>: <span class="number">2px</span> dashed red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">column-span</span>: all;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="伸缩盒模型"><a class="markdownIt-Anchor" href="#伸缩盒模型"></a> 伸缩盒模型</h3>
<ol>
<li>伸缩盒模型简介</li>
</ol>
<ul>
<li><code>2009</code>年，<code>W3C</code>提出了一种新的盒子模型一<code>FlexibleBox</code>（伸缩盒模型，又称：弹性盒子）。</li>
<li>它可以轻松的控制：元素分布方式、元素对齐方式、元素视觉顺序</li>
<li>截止目前，除了在部分IE浏览器不支持，其他浏览器均已全部支持。</li>
<li>伸缩盒模型的出现，逐渐演变出了一套新的<strong>布局方案</strong>一<code>flex</code><strong>布局</strong>。</li>
</ul>
<blockquote>
<p>小贴士：</p>
<ul>
<li>传统布局是指：基于传统盒状模型，主要靠：<code>display</code>属性+<code>position</code>属性+<code>float</code>属性。</li>
<li><code>flex</code>布局目前在移动端应用比较广泛，因为传统布局不能很好的呈现在移动设备上。</li>
</ul>
</blockquote>
<ol start="2">
<li>伸缩容器、伸缩项目</li>
</ol>
<ul>
<li>
<p>伸缩容器：开启了<code>flex</code>的元素，就是：伸缩容器。</p>
<blockquote>
<ol>
<li>给元素设置：<code>display: flex</code> 或<code>display: inline-flex</code>，该元素就变为了伸缩容器。</li>
<li><code>display: inline-flex</code>很少使用，因为可以给多个伸缩容器的父容器，也设置为伸缩容器。</li>
<li>一个元素可以同时是：伸缩容器、伸缩项目。</li>
</ol>
</blockquote>
</li>
<li>
<p>伸缩项目：伸缩容器所有<strong>子元素</strong>自动成为了：伸缩项目。</p>
</li>
</ul>
<blockquote>
<ol>
<li>仅伸缩容器的<strong>子元素</strong>成为了伸缩项目，孙子元素、重孙子元素等后代，不是伸缩项目。</li>
<li>无论原来是哪种元素（块、行内块、行内），一旦成为了伸缩项目，全都会“块状化”。</li>
</ol>
</blockquote>
<ol start="3">
<li>主轴与侧轴</li>
</ol>
<ul>
<li>主轴：伸缩项目沿着主轴排列，主轴默认是水平的，默认方向是：从左到右（左边是起点，右边是终点）。</li>
<li>侧轴：与主轴垂直的就是侧轴，侧轴默认是垂直的，默认方向是：从上到下（上边是起点，下边是终点）。</li>
</ul>
<ol start="4">
<li>主轴方向</li>
</ol>
<ul>
<li>属性名：<code>flex-direction</code></li>
<li>常用值如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#888</span>;</span><br><span class="line">    <span class="comment">/* 伸缩盒模型相关属性-start */</span></span><br><span class="line">    <span class="comment">/* 将该元素变为了伸缩容器（开启了flex布局） */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调整主轴方向，水平从左到右，默认 */</span></span><br><span class="line">    <span class="comment">/* flex-direction: row; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调整主轴方向，水平从右到左 */</span></span><br><span class="line">    <span class="comment">/* flex-direction: row-reverse; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调整主轴方向，垂直从上到下 */</span></span><br><span class="line">    <span class="comment">/* flex-direction: column; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调整主轴方向，垂直从下到上 */</span></span><br><span class="line">    <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>主轴换行方式</li>
</ol>
<ul>
<li>属性名：<code>flex-wrap</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#888</span>;</span><br><span class="line">    <span class="comment">/* 伸缩盒模型相关属性-start */</span></span><br><span class="line">    <span class="comment">/* 将该元素变为了伸缩容器（开启了flex布局） */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 调整主轴方向，水平从左到右，默认 */</span></span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主轴换行方式，不换行，默认值 */</span></span><br><span class="line">    <span class="comment">/* flex-wrap: nowrap; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主轴换行方式，换行 */</span></span><br><span class="line">    <span class="comment">/* flex-wrap: wrap; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主轴换行方式，反向换行(向上换行) */</span></span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>主轴对齐方式</li>
</ol>
<ul>
<li>属性名：<code>justify-content</code></li>
<li>常用值如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#888</span>;</span><br><span class="line">    <span class="comment">/* 伸缩盒模型相关属性-start */</span></span><br><span class="line">    <span class="comment">/* 将该元素变为了伸缩容器（开启了flex布局） */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">/* 调整主轴方向，水平从左到右，默认 */</span></span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="comment">/* 主轴换行方式，换行 */</span></span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主轴的对齐方式，主轴的起始位置 */</span></span><br><span class="line">    <span class="comment">/* justify-content: flex-start; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主轴的对齐方式，主轴的结束位置 */</span></span><br><span class="line">    <span class="comment">/* justify-content: flex-end; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主轴的对齐方式，中间对齐 */</span></span><br><span class="line">    <span class="comment">/* justify-content: center; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主轴的对齐方式，项目均匀的分布在一行中，项目与项目之间的距离，是项目距边缘的二倍 */</span></span><br><span class="line">    <span class="comment">/* justify-content: space-around; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主轴的对齐方式，项目均匀的分布在一行中，项目与项目之间的距离是相等的，项目距边缘没有距离 */</span></span><br><span class="line">    <span class="comment">/* justify-content: space-between; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 主轴的对齐方式，项目均匀的分布在一行中 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>侧轴对齐方式<br />
(1) 只有一行的情况</li>
</ol>
<ul>
<li>所需属性：<code>align-items</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#888</span>;</span><br><span class="line">    <span class="comment">/* 伸缩盒模型相关属性-start */</span></span><br><span class="line">    <span class="comment">/* 将该元素变为了伸缩容器（开启了flex布局） */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">/* 调整主轴方向，水平从左到右，默认 */</span></span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="comment">/* 主轴换行方式，换行 */</span></span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="comment">/* 主轴的对齐方式，主轴的起始位置 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">    <span class="comment">/* 侧轴的对齐方式，侧轴的起始位置对齐 */</span></span><br><span class="line">    <span class="attribute">align-items</span>: flex-start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 侧轴的对齐方式，侧轴的结束位置对齐 */</span></span><br><span class="line">    <span class="comment">/* align-items: flex-end; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 侧轴的对齐方式，侧轴的中间位置对齐 */</span></span><br><span class="line">    <span class="comment">/* align-items: center; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 侧轴的对齐方式，基线对齐 */</span></span><br><span class="line">    <span class="comment">/* align-items: baseline; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 侧轴的对齐方式，拉伸到整个父容器（前提：伸缩项目不能给高度），默认 */</span></span><br><span class="line">    <span class="comment">/* align-items: stretch; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2) 多行的情况</p>
<ul>
<li>所需属性：<code>align-content</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#888</span>;</span><br><span class="line">    <span class="comment">/* 伸缩盒模型相关属性-start */</span></span><br><span class="line">    <span class="comment">/* 将该元素变为了伸缩容器（开启了flex布局） */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">/* 调整主轴方向，水平从左到右，默认 */</span></span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="comment">/* 主轴换行方式，换行 */</span></span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="comment">/* 主轴的对齐方式，主轴的起始位置 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 侧轴的对齐方式（多行）侧轴的起始位置对齐 */</span></span><br><span class="line">    <span class="attribute">align-content</span>: flex-start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 侧轴的对齐方式（多行）侧轴的结束位置对齐 */</span></span><br><span class="line">    <span class="comment">/* align-content: flex-end; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 侧轴的对齐方式（多行）侧轴的中间位置对齐 */</span></span><br><span class="line">    <span class="comment">/* align-content: center; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 侧轴的对齐方式（多行），伸缩项目之间的距离是相等的，且是边缘距离的2倍 */</span></span><br><span class="line">    <span class="comment">/* align-content: space-around; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 侧轴的对齐方式（多行），伸缩项目之间的距离是相等的，且边缘没有距离 */</span></span><br><span class="line">    <span class="comment">/* align-content: space-between; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 侧轴的对齐方式（多行），伸缩项目之间的距离是相等的 */</span></span><br><span class="line">    <span class="comment">/* align-content: space-evenly; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 侧轴的对齐方式（多行），拉伸，默认 */</span></span><br><span class="line">    <span class="comment">/* align-content: stretch; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="8">
<li><code>flex-grow</code> (伸)</li>
</ol>
<ul>
<li>概念：<code>flex-grow</code>定义伸缩项目的放大比例，默认为<code>0</code>，即：纵使主轴存在剩余空间，也不拉伸（放大）。</li>
<li>规则：
<ul>
<li>若所有伸缩项目的<code>flex-grow</code>值都为1，则：它们将等分剩余空间（如果有空间的话）。</li>
<li>若三个伸缩项目的<code>flex-grow</code>值分别为：<code>1</code>、<code>2</code>、<code>3</code>，则：分别瓜分到：<code>1/6</code>、<code>2/6</code>、<code>3/6</code>的空间。</li>
</ul>
</li>
</ul>
<ol start="9">
<li><code>flex-shrink</code> (缩)</li>
</ol>
<ul>
<li>概念：<code>flex-shrink</code>定义了项目的压缩比例，默认为1，即：如果空间不足，该项目将会缩小。* 收缩项目的计算，略微复杂一点，我们拿一个场景举例：<br />
<img src="/images/flex_shrink%E8%AE%A1%E7%AE%97%E6%B3%95.png" alt="flex-shrink计算法" /></li>
</ul>
<ol start="10">
<li><code>flex</code>复合属性</li>
</ol>
<ul>
<li><code>flex</code> 是复合属性，复合了：<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code> 三个属性，默认值为<code>0 1 auto</code>。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* 基准长度 */</span></span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/* 可以拉伸可以压缩不设置基准长度，可简写为：flex: auto */</span></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">    <span class="comment">/* 可以拉伸可以压缩设置基准长度为o，可简写为：flex：1 */</span></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 不可以拉伸不可以压缩不设置基准长度，可简写为：flex：none */</span></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> auto;</span><br><span class="line">    <span class="comment">/* 不可以拉伸可以压缩不设置基准长度，可简写为：flex:0 auto */</span></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">1</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="11">
<li>项目排序</li>
</ol>
<ul>
<li><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为<code>0</code>。</li>
</ul>
<ol start="12">
<li>单独对齐</li>
</ol>
<ul>
<li>通过<code>align-self</code>属性，可以单独调整某个伸缩项目的对齐方式</li>
<li>默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性。</li>
</ul>
<h3 id="媒体查询"><a class="markdownIt-Anchor" href="#媒体查询"></a> 媒体查询</h3>
<ol>
<li>媒体类型<br />
| 值 | 含义 |<br />
| ---- | ---- |<br />
| <code>all</code> | 检测所有设备。|<br />
| <code>screen</code> | 检测电子屏幕，包括：电脑屏幕、平板屏幕、手机屏幕等。|<br />
| <code>print</code> | 检测打印机。|</li>
<li>媒体特性</li>
</ol>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>width</code></td>
<td>检测视口宽度。</td>
</tr>
<tr>
<td><code>max-width</code></td>
<td>检测视口最大宽度。</td>
</tr>
<tr>
<td><code>min-width</code></td>
<td>检测视口最小宽度。</td>
</tr>
<tr>
<td><code>height</code></td>
<td>检测视口高度。</td>
</tr>
<tr>
<td><code>max-height</code></td>
<td>检测视口最大高度。</td>
</tr>
<tr>
<td><code>min-height</code></td>
<td>检测视口最小高度。</td>
</tr>
<tr>
<td><code>device-width</code></td>
<td>检测设备屏幕的宽度。</td>
</tr>
<tr>
<td><code>max-device-width</code></td>
<td>检测设备屏幕的最大宽度。</td>
</tr>
<tr>
<td><code>min-device-width</code></td>
<td>检测设备屏幕的最小宽度。</td>
</tr>
<tr>
<td><code>orientation</code></td>
<td>检测视口的旋转方向（是否横屏）。1.<code>portrait</code>：视口处于纵向，即高度大于等于宽度。2.<code>landscape</code>：视口处于横向，即宽度大于高度。</td>
</tr>
</tbody>
</table>
<ol start="3">
<li>常用阈值</li>
</ol>
<ul>
<li>在实际开发中，会将屏幕划分成几个区间，例如：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 超小屏幕 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 中等屏幕 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">992px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 大屏幕 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">992px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: deepskyblue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 超大屏幕 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">1200px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: purple;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bfc"><a class="markdownIt-Anchor" href="#bfc"></a> <strong>BFC</strong></h3>
<ol>
<li>什么是<code>BFC</code>？</li>
</ol>
<ul>
<li><code>BFC</code>是<code>BlockFormattingContext</code>（块级格式上下文），可以理解成元素的一个“特异功能”</li>
<li>该“特异功能”，在默认的情况下处于关闭状态；当元素满足了某些条件后，该“特异功能&quot;被激活。</li>
<li>所谓激活“特异功能”，专业点说就是：该元素创建了<code>BFC</code>（又称：开启了<code>BFC</code>）。</li>
</ul>
<ol start="2">
<li>开启了<code>BFC</code>能解决什么问题</li>
</ol>
<ul>
<li>元素开启<code>BFC</code>后，其子元素不会再产生<code>margin</code>塌陷问题。</li>
<li>元素开启<code>BFC</code>后，自己不会被其他浮动元素所覆盖。</li>
<li>元素开启<code>BFC</code>后，就算其子元素浮动，元素自身高度也不会塌陷。</li>
</ul>
<ol start="3">
<li>如何开启<code>BFC</code></li>
</ol>
<ul>
<li>根元素</li>
<li>浮动元素</li>
<li>绝对定位、固定定位的元素</li>
<li>行内块元素</li>
<li>表格单元格：<code>table</code>、<code>thead</code>、<code>tbody</code>、<code>tfoot</code>、<code>th</code>、<code>td</code>、<code>tr</code>、<code>caption</code></li>
<li><code>overflow</code>的值不为<code>visible</code>的块元素</li>
<li>伸缩项目多列容器</li>
<li><code>column-span</code>为<code>all</code>的元素（即使该元素没有包裹在多列容器中）</li>
<li><code>display</code>的值，设置为<code>flow-root</code>（副作用最小）</li>
</ul>
]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言</title>
    <url>/2023/05/29/c%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<p>前言：C语言是一种高效、快速、通用的编程语言，被广泛应用于操作系统、数据库、编译器、网络驱动程序、游戏开发等领域。C语言的历史可以追溯到20世纪70年代，由贝尔实验室的Dennis Ritchie于1972年推出。C语言是一种中级语言，它结合了低级语言速度快的特点，以及高级语言开发方便的特点。C语言的特点包括：简洁、紧凑、表达力强、可移植性好、运算符丰富等。</p>
<span id="more"></span>
<blockquote>
<ul>
<li>the history of c programing</li>
<li>c 语言的特点<br />
1. 基础性语言<br />
2. 语法简洁，紧凑，方便，灵活<br />
3. 运算符，结构丰富<br />
4. 结构化，模块化编程<br />
5. 移植性好，执行效率高<br />
6. 允许对硬件直接操作</li>
<li>c 语言学习建议
<ul>
<li>概念的正确性</li>
<li>动手</li>
<li>阅读优秀的程序段</li>
<li>大量练习,面试题</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="c课程讲解思路"><a class="markdownIt-Anchor" href="#c课程讲解思路"></a> <strong>c课程讲解思路</strong></h3>
<blockquote></blockquote>
<pre><code>    1. 基本概念
    2. 数据类型，运算符和表达式
    3. 输入输出专题
    4. 流程控制
    5. 数组
    6. 指针
    7. 函数 
    8. 构造类型
    9. 动态内存管理
    10. 调试工具和调试技巧
    11. 常用库函数
</code></pre>
<blockquote></blockquote>
<p>hello.c ：<br />
c源文件 — 预处理 —编译 —汇编— 链接 — 可执行程序</p>
<blockquote></blockquote>
<hr />
<h3 id="一-基本概念"><a class="markdownIt-Anchor" href="#一-基本概念"></a> <strong>一、基本概念</strong></h3>
<blockquote></blockquote>
<pre><code>1. 以helloworld 为例对写程序的思路提出如下要求：
2. 头文件正确包含的重要性
3. 以函数为单位来进行程序的编写
4. 声明部分+实现部分
5. return 0 (exit(0) 给他的父进程看的)
6. echo $?    
</code></pre>
<blockquote></blockquote>
<p>算法：解决问题的方法</p>
<blockquote></blockquote>
<pre><code>1. 流程图
2. NS 图
3. FSM 有限状态机
</code></pre>
<blockquote></blockquote>
<p>程序：用某种语言实现算法</p>
<h3 id="二-数据类型运算符和表达式"><a class="markdownIt-Anchor" href="#二-数据类型运算符和表达式"></a> <strong>二、数据类型，运算符和表达式</strong></h3>
<blockquote></blockquote>
<pre><code>1. 数据类型：（基本类型,构造类型，指针类型，空类型void)
2. 数据存储（占用的字节数）
3. 不同类型的数据间进行转换
4. 特殊性：
5. bool 类型
6. float 类型的比较
7. char 类型的符号（c 标准未定义）
8. 不同形式的零直
</code></pre>
<blockquote></blockquote>
<h3 id="三-常量与变量"><a class="markdownIt-Anchor" href="#三-常量与变量"></a> <strong>三、常量与变量</strong></h3>
<blockquote></blockquote>
<ol>
<li>
<p>常量：<br />
分类：<br />
1）整形常量 1，790， 67，52<br />
2）实行常量：3.14， 52.26<br />
3）字符常量：‘\015’, ‘\x7f’<br />
4）字符串常量：“helloworld”， “”<br />
5）标识常量： #define，处理在程序的预处理阶段，不检查语法，只是单纯宏名和宏体的替换。</p>
</li>
<li>
<p>变量：用来保存一些特定的内容，并且在程序执行过程中变化的量。<br />
1） 定义：【存储类型】 数据类型 标识符<br />
2）                 TYPE NAME = VALUE；<br />
3）标识符：由字母 数字 下划线组成且不能以数字开头的表示序列。<br />
4）存储类型： auto static register extern（说明型）<br />
1》auto: 默认，自动分配空间<br />
2》register:（建议型）寄存器类型，只能定义局部变量，不能定义全局变量。一个寄存器类型的变量无法打印地址。<br />
3》static :静态型，自动初始化为0值或空值，且其值具有继承性。<br />
4》extern : 说明型，不能改变变量的类型。</p>
</li>
<li>
<p>变量的生命周期和作用范围：<br />
1）全局变量和局部变量<br />
2）局部变量和局部变量</p>
</li>
</ol>
<blockquote></blockquote>
<h3 id="四-运算符和表达式"><a class="markdownIt-Anchor" href="#四-运算符和表达式"></a> <strong>四、运算符和表达式</strong></h3>
<blockquote></blockquote>
<pre><code>1. 表达式与语句的区别  
2. 运算符部分：  
    1）每个运算符所需要的参与运算的操作数的个数  
    2）结合性  
    3）优先级  
    4）运算符的特殊用法  
        如：  %， = 与==，逻辑运算符的短路特性
    5）位运算的重要意义  
        将操作数中第n位置1，其他位不变：num = num | 1 &lt;&lt; n;
        将操作数中第n位置0，其他位不变：num = num &amp; ～（1 &lt;&lt; n）;
    6）优先级：算术运算符 &gt; 移位运算符 &gt; 关系运算符 &gt; 位运算符 &gt; 逻辑运算符 &gt; 条件运算符 &gt; 赋值运算符 &gt; 符合赋值运算符 &gt; 逗号运算符  
</code></pre>
<blockquote></blockquote>
<h3 id="五-输入输出专题"><a class="markdownIt-Anchor" href="#五-输入输出专题"></a> <strong>五、输入，输出专题</strong></h3>
<p>input &amp;&amp; output ----&gt; I/O(标准IO，文件IO或系统IO)</p>
<blockquote></blockquote>
<pre><code>1. 格式化输入输出函数：scanf printf  
    1）int printf(const char *format, ...);
    2） int scanf(const char *format, ...);
2. 字符输入输出函数：getchar ,putchar
3. 字符串输入输出函数：fgets fputs
</code></pre>
<blockquote></blockquote>
<h3 id="六-流程控制"><a class="markdownIt-Anchor" href="#六-流程控制"></a> <strong>六、流程控制</strong></h3>
<p>顺序，选择，循环<br />
简单结构与复杂结构：自然流程<br />
NS图，流程图            工具Dia</p>
<blockquote></blockquote>
<pre><code>1. 关键字：
2. if else switch case while do while continue break
</code></pre>
<blockquote></blockquote>
<h3 id="七-数组"><a class="markdownIt-Anchor" href="#七-数组"></a> <strong>七、数组</strong></h3>
<p>一维数组</p>
<blockquote></blockquote>
<pre><code>1. 定义：【存储类型】数据类型 标识符【下标】 下标：必须是整形常量或整形表达式。  
2. 初始化    
    不初始化    
    部分初始化    
    全部初始化    
3. 元素引用  
4. 数组名  
5. 数组越界  
</code></pre>
<blockquote></blockquote>
<p>二维数组</p>
<blockquote></blockquote>
<pre><code>1. 定义，初始化  
2. 元素引用  
3. 存储形式  
4. 深入理解二维数组  
</code></pre>
<blockquote></blockquote>
<p>字符数组</p>
<blockquote></blockquote>
<pre><code>1. 定义，初始化存储特点
    【存储类型】数据类型 标识符【下标】
    单个字符初始化
    用字符串常量初始化
2. 输入输出
3. 常用函数
</code></pre>
<blockquote></blockquote>
<p>多维数组</p>
<blockquote></blockquote>
<blockquote></blockquote>
<h3 id="八-指针"><a class="markdownIt-Anchor" href="#八-指针"></a> <strong>八、指针</strong></h3>
<blockquote></blockquote>
<pre><code>1. 变量与地址
2. 指针与指针变量
3. 直接访问与简接访问
4. 空指针与野指针
5. 空类型
6. 指针与初始化的书写规则
7. 指针与运算
    &amp; * 关系运算 ++ --
8. 指针与数组
    指针与一维数组
    指针与二维数组
    指针与字符数组
9. const 与指针
10. 指针数组与数组指针
11. 多级指针
</code></pre>
<blockquote></blockquote>
<h3 id="九-函数"><a class="markdownIt-Anchor" href="#九-函数"></a> <strong>九、函数</strong></h3>
<blockquote></blockquote>
<pre><code>1. 函数的定义
    数据类型 函数名（【形式参数说明表】）
2. 函数的传参
    值传递
    地址传递
    全局变量
3. 函数的调用
    嵌套调用
    递归
4. 函数与数组
5. 函数与指针
    指针函数
        返回值 *函数名（形参）；
        如：int * func(int);
    函数指针
        类型 （*指针名）（形参）；
        如：int （*p)(int);
</code></pre>
<blockquote></blockquote>
<h3 id="十-构造类型"><a class="markdownIt-Anchor" href="#十-构造类型"></a> <strong>十、构造类型</strong></h3>
<p>结构体</p>
<blockquote></blockquote>
<pre><code>1. 产生即意义
2. 类型描述
    struct 结构体名
    &#123;
        数据类型 成员1；
        数据类型 成员2；
        ...
    &#125;;
3. 嵌套定义
    
4. 定义变量（变量，数组，指针），初始化及成员引用
        成员引用：变量名.成员名
            指针-&gt;成员名
            （*指针）.成员名
5. 占用内存空间大小
6. 函数传参（值，地址）
</code></pre>
<blockquote></blockquote>
<p>共用体</p>
<blockquote></blockquote>
<pre><code>1. 产生及意义
2. 类型描述
3. 嵌套定义
4. 定义变量（变量，数组，指针），初始化及成员引用
5. 占用内存大小
6. 函数传参（值，地址）
7. 位域
</code></pre>
<blockquote></blockquote>
<p>枚举</p>
<blockquote></blockquote>
<pre><code>enum 标识符
&#123;
    成员 1，
    成员 2，
    成员 3
&#125;;
</code></pre>
<blockquote></blockquote>
<h3 id="十一-动态内存管理"><a class="markdownIt-Anchor" href="#十一-动态内存管理"></a> <strong>十一、动态内存管理</strong></h3>
<p><em>malloc ralloc realloc free</em></p>
<blockquote></blockquote>
<pre><code>1. 规则：谁申请，谁释放。
</code></pre>
<blockquote></blockquote>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>英语词根记忆法(20000words)</title>
    <url>/2025/03/02/english-%E8%AF%8D%E6%A0%B9%E8%AE%B0%E5%BF%86%E6%B3%95/</url>
    <content><![CDATA[<p>简介：英语词根记忆法是一种通过学习和理解单词的基本构成部分——词根、前缀和后缀来增强词汇量和理解能力的学习策略。这种方法基于许多英语单词都是由拉丁语和希腊语的词根演变而来的事实，因此掌握这些基本组成部分可以帮助学习者更轻松地推测出大量单词的意思。</p>
<span id="more"></span>
<h1 id="词缀词根记忆法"><a class="markdownIt-Anchor" href="#词缀词根记忆法"></a> 词缀词根记忆法</h1>
<h3 id="后缀-cess-cede-ceed-gress-grad-gred"><a class="markdownIt-Anchor" href="#后缀-cess-cede-ceed-gress-grad-gred"></a> 后缀-cess，-cede，-ceed，-gress，-grad，-gred</h3>
<ul>
<li>均表示走=to go</li>
<li>s、t、d相互转换的证据<br />
conclude → conclusion v.总结、结束 n.总结、结束<br />
decide → decision<br />
convert  → conversion<br />
permit  → permission<br />
admit → admission v. 承认(过错、罪行)；招认；准许…进入(某处)；招供；准许…加入（俱乐部、组织）；接收入院<br />
eat → -es, -ed<br />
obese → edible ①adj.肥胖的；病态肥胖的；臃肿的；虚胖的 ②adj.可食用的；(无毒而)可以吃的；适宜食用的 n.食物 记忆：ed- 吃 + -ible 能…的</li>
<li>words</li>
</ul>
<ol>
<li><strong>process</strong> ['prauses] 分析：pro = forward = 向前 n.过程、进程；v.处理、加工<br />
助记：pro（向前）+ cess（走）→ 搭配: data processing（考）: 数据处理 information processing（考）:信息处理、信息加工</li>
<li><strong>processor</strong> ['prausesa,] n.处理器<br />
助记：process（处理）+ or（名词后缀，表东西）→ 搭配:image processor（考）:图片处理器，图像处理器</li>
<li><strong>procession</strong> [pra’se∫(θ)n] n.队伍,行列;一列，一排;列队行进<br />
助记：pro（向前）+cess（走）+ion（名词后缀）→（一群人）向前走→<br />
释义：(N-COUNT）（走路、骑马、开车等的) 队伍 , 行列<br />
A procession is a group of people who are walking, riding, or driving in a line as part of a public event.</li>
<li><strong>graduate</strong> ['gredjueit] v.毕业；n.（本科）毕业生<br />
助记：grad（走）+u（链接符号）+ate（名词或者名词后缀） → 要走（要离开学校）→<br />
拓展：-ate,-ite,-ute ①v.(使)②adj.③少数名词N后缀（人或物）</li>
<li><strong>undergraduate</strong> [,Anda’gradjuat] n.大学本科生或本科肄业生<br />
助记：under（下、未达到）+graduate（本科毕业）→还未本科毕业生→</li>
<li><strong>ingredient</strong> [in’gri:diant] n.原料、要素、组成部分<br />
助记：in（进入）+gredi（=go走）+ent（名词后缀）→走进去（构成新物体）的材料→</li>
<li><strong>aggressive</strong> [a’gresiv] a.侵略性的、激进的<br />
助记：ag（加强语气）+gress（=go:走）+ive（形容词后缀）→强行走进去的→<br />
搭配: aggressive behavior （考） :攻击行为</li>
<li><strong>aggress</strong> [a’gres] v.侵略</li>
<li><strong>progress</strong> ['praugres] v/n.前进、进步<br />
助记：pro（向前）+gress（走）→<br />
搭配: make rapid progress （考） :取得快速进步</li>
<li><strong>proceed</strong> [prau 'si:d] v.前进、继续进行；继续<br />
助记：pro（向前）+ceed（=go:走）→向前走→<br />
搭配:proceed with（考） :继续；继续做… proceed to :前进；继续进行<br />
Please proceed with your report. 请继续做你的报告吧。<br />
Click the Test Connection button to proceed to the next page.<br />
单击Test Connection按钮前进到下一页。</li>
<li><strong>proceedings</strong> [pra’si:dinz] n.诉讼、议程<br />
搭配 :legal proceedings（考）:法律诉讼</li>
<li><strong>procedure</strong> [pra’si:d3a] n.程序、步骤<br />
助记：pro（向前）+ced（走）+ure（名词后缀）→（一步步）向前走<br />
搭配:surgical procedures（考） :手术程序、步骤<br />
legal procedures （考） :法律程序</li>
<li><strong>precede</strong> [pri:'si:d] v. 领先于、优于<br />
助记 ：pre （提前、前面）+cede→走在前面的→</li>
<li><strong>precedent</strong> ['presidant]   n. 先例、前例 ;adj. 先前的<br />
-ant -ent → ①N.表示人或物②adj.形容词后缀表示…的</li>
<li><strong>unprecedented</strong> [∧n’presidantid] a.史无前例的、空前<br />
助记：un（表否定）porecedent（先例）+ed（的）→没有先例的→</li>
<li><strong>precedence</strong> ['presidans] n.优先、居先<br />
-ance -ence -ancy -ency 表示：名词后缀（没有什么实际含义只表示词性）<br />
助记：pre（前面）+ced（走）+ence（名词后缀）→走在前面→<br />
同义 : priority [prai’orati] n. 优先权、优先<br />
助记：prior（优先于、先于）+ity（名词后缀）→<br />
搭配：give priority/precedence to sth(优先考虑某事)</li>
<li><strong>access</strong> ['cekses] v/n. 接近、 进入；使用、获取<br />
助记：ac（加强语气）+cess（走）→走过去→<br />
搭配：access email（考）:查收、获取邮件<br />
have access to (考 ) :利用、使用</li>
<li><strong>accessible</strong> [ak’sesabl] a.可接近的、可使用的、可获得<br />
助记：access（接近、使用、获取）+ible（可以…的）→<br />
搭配 :accessible capital（考） :可用的资金</li>
<li><strong>accessory</strong> [ak’sesari] n.附件、配件、从犯<br />
助记 :ac （ =to :去）+cess（走）+ory（名词后缀）→走进去，加入的东西</li>
<li><strong>recession</strong> [ri’se∫an] n.衰退；凹处；后退；不景气<br />
助记：re（回）+cess（走）+ion（名词后缀）→（经济）往回走→<br />
re- : ①相反 如：resent → 反感②返回 return③反复、又一次、再 repeat<br />
v. recede</li>
<li><strong>excess</strong> [ik’ses; ek-; 'ekses] n.无节制；过度，过量；超过，超额<br />
助记：ex（向外、出去）+cess（走）→走出去了（走过线了）→<br />
搭配 : global excess demand（考） :全球过度的需求<br />
excess weight（考） :过重、超重</li>
<li><strong>excessive</strong> [ik’sesiv] adj.过分的；过多的，极度的<br />
助记：excess（超过）+ive（大、多）→超过很多的→</li>
<li><strong>exceed</strong> [Ik’si:d; ek-] vt.胜过；超过<br />
助记：ex（向外、出）+ceed（走）→走出去、走过→</li>
<li><strong>exceedingly</strong> [ik’si:dinli] adv.非常；极其;极度地<br />
搭配 : exceedingly polite forms （考） :非常有礼貌、极其有礼貌</li>
<li><strong>cease</strong> [si:s] vt/vi/n.停止;终了<br />
助记：ceas（=cess：走；而且-eas部分还在刻意模仿单词end：结束、尽头 ）→走到尽头→</li>
</ol>
<h3 id="前缀sub-sup-suc-sus-的功能"><a class="markdownIt-Anchor" href="#前缀sub-sup-suc-sus-的功能"></a> 前缀sub-，sup-，suc-，sus-的功能</h3>
<ul>
<li>下，向下: subway</li>
<li>从下往上：submit</li>
<li>亚于，次于: suburban</li>
<li>后，后面: subsequent</li>
<li>words</li>
</ul>
<ol>
<li><strong>succeed</strong> [sak’si:d] vi.成功；继承；继任；兴旺<br />
助记：<br />
suc（下）+ceed（走）→一直走下去、一直走到底→<br />
suc（后）+ceed（走）→走在后面→<br />
搭配 : succeed in （doing ） sth.（考）:在做某事方面取得了成功</li>
<li><strong>succeeding</strong> [sak’si:din] adj.随后的，以后的</li>
<li><strong>success</strong> [sak’ses] n.成功，成就;胜利；大大获成功的人或事物</li>
<li><strong>successor</strong> [sak’sesa] n.继承者；后续的事物<br />
助记：success（继承、接任）+or（名词后缀，表人）→<br />
-or →-ar →-er →-ur ①名词后缀（表示人或物）②adj.形容词后缀表示…的③极少情况做动词使用</li>
<li><strong>succession</strong> [sak’sejan] n.连续；继位;继承权;<code>[农业]</code>轮栽<br />
搭配: a succession of books （考）:一连串的书</li>
<li><strong>successive</strong> [sak’sesiv] adj.连续的；继承的：依次的; 接替的<br />
-ive→①大/多 product → productive → 多产的②…的 expense → expensive 贵的<br />
③名词后缀（表示人或物）representative → 表示人 relative → 表示人 incentive → 刺激物、激励、鼓励</li>
<li><strong>predecessor</strong> ['pri:disesa] n.前任，前辈<br />
助记：pre（前）+decess（=retire :退休） +or（表“人”）→走在前面，现在已经下台的人→</li>
<li><strong>necessary</strong>['nesisar1] adj. 必要的；必然的；必需的</li>
<li><strong>necessarily</strong> ['nesas(a)r1l1; ,nesa’ser1l1] adv. 必要地 ； 必定地，必然地</li>
<li><strong>necessity</strong> [ni’sesati] n.需要；必需品；必然性<br />
-ity → -lity → -ility → 名词后缀<br />
助记：necess（=necessary：必须的）+ity（名词后缀）<br />
搭配：out of necessity（考）:出于必须</li>
<li><strong>necessitate</strong> [n1’ses1te1t] vt. 使成为必需，需要；迫使</li>
<li><strong>degrade</strong> ['di’greid]    vt.使…丢脸；使…降级;使…降解；贬低<br />
助记:de（向下）+grade（级别）→级别向下→</li>
<li><strong>degradation</strong> [degra’deisn] n.降格，降级；退化；堕落</li>
<li><strong>upgrade</strong> ['^pgreid, ] vt.提升；使升级；改良品种<br />
助记：up（向上）+grade（级别）→级别向上→</li>
<li><strong>gradual</strong> ['graed3ual] adj.渐进的；逐步的</li>
<li><strong>gradually</strong> ['graed3ul1; 'graedjual1] adv.渐渐地;逐步</li>
<li><strong>congress</strong> ['kongres] n.国会；会议；代表大会；社交<br />
助记：con（共同、一起）+gress（走）→走到一起→<br />
前缀：com-，con-，col-，cor-，co-<br />
①=with/together，共同、一起、全部<br />
②intensive，加强语气</li>
<li><strong>congressional</strong> [kan’gre∫anal] adj. 国会的；会议的；议会</li>
<li><strong>congressman</strong> ['kangrasman] n.国会议员；众议院议员</li>
<li><strong>ancestor</strong> ['cnsesta] n.始祖，祖先；被继承人<br />
前缀：anc- → ①以前、前、前面、老②高</li>
<li><strong>ancestral</strong> [aen’sestr(a)l] adj.祖先的；祖传的</li>
<li><strong>ancestry</strong> ['nsestr1] n. 祖先；血统</li>
<li><strong>concede</strong>[kan’si:d] vt.让步；退让；让与；（勉强）承认</li>
<li><strong>concession</strong> [kan’se∫(a)n] n.让步 ;特许 (权)；承认；退位</li>
</ol>
<hr />
<ul>
<li>High difficulty vocabulary</li>
</ul>
<ol>
<li><strong>abscess</strong> ['eebsis; -ses] n.脓肿；脓疮<br />
助记：abs- = away → cess →散不掉，走不开<br />
释义 : a swollen and infected area on your skin or in your body, full of a thick yellowish liquid.</li>
<li><strong>accede</strong> [ak’si:d] vi. 同意；加入；就任<br />
助记：ac- = to →cede →向…走去<br />
释义：<br />
①When a member of a royal family accedes to the throne, they become king or queen.<br />
②If you accede to someone’s request you do what they ask.</li>
<li><strong>antecede</strong> [,ant1’si:d] vt. 在…之前；先行；胜过；居前<br />
anc- → ant-（以前、从前） →cede（走） → 走在…之前</li>
<li><strong>antecedent</strong> [,ant1’si:d(a)nt] n. 先行词;前事；先例；祖先</li>
<li><strong>incessant</strong> [1n’ses(a)nt] adj. 不断的；不停的；连续的<br />
助记:in（=not） +cess（=cease:停止）+ant<br />
-ant → -ent ①Noun suffix（人或物）②形容词后缀（…的）</li>
<li><strong>intercede</strong> [,1nta’si:d] vi.调解，调停；求情<br />
inter- = between(在…之间) nation → national→international→</li>
<li><strong>secede</strong>  [s1’si:d] vi.退出；脱离<br />
se- = apart（分开、分离）+cede（走）→走开→退出<br />
释义：（从国家、大集团中正式）退出，脱离，分离If a region or group secedes from the country or larger group to which it belongs, it formally becomes a separate country or stops being a member of the larger group.</li>
<li><strong>secession</strong> [s1’se∫(a)n] n.脱离；分离</li>
<li><strong>digress</strong> [a1’gres] vi.离题、岔道<br />
di- = dis（分开、分离）+gress（走）→走开→离题、岔道</li>
<li><strong>regress</strong> [r1’gres] vi.逆行，倒退；复归<br />
re-(返回) + gress（走）→倒退</li>
<li><strong>regressive</strong> [r1 ‘gresiv] adj. 回归的；后退的;退化的</li>
<li><strong>ingress</strong> ['ingres] n.进入；入口；准许进入;入境<br />
例句 : A high seating position makes ingress and egress easy.  较高的座椅位置使入口和出口容易.</li>
<li><strong>transgression</strong> [traens’gre∫n; trnz’gre∫n] n.越界；违反（道德准则）<br />
trans- → 转、穿、传 + gress（走）→走着穿过去→越</li>
</ol>
<h3 id="词根-van-ven-vent的含义"><a class="markdownIt-Anchor" href="#词根-van-ven-vent的含义"></a> 词根 -van，-ven，-vent的含义</h3>
<ul>
<li>= come、go 都表示 ①来或是②走来的含义</li>
<li>words</li>
</ul>
<ol>
<li><strong>advent</strong> ['aedvant] n.来临、出现<br />
助记：ad（=to ）+vent（来临、出现）→走过来、走来了→<br />
搭配 :with the advent of sth.（考）:伴随着某事的出现<br />
写作例句：伴随着电子书的出现，人们的阅读方式发生了巨大的变化。<br />
With the advent of e-books, people’s reading habits have changed significantly.</li>
<li><strong>convene</strong> [kan’vi:n] v.集合、召集、聚集<br />
助记：con（共同、一起）+ven（=come ：来）+e→来到一起→</li>
<li><strong>convention</strong> [kan’venjan] n.开会;习俗</li>
<li><strong>conventional</strong> [kan’ven∫anal]    a.传统的、符合习俗的<br />
搭配:conventional values（考）:传统价值观<br />
conventional lanes （考） :常规车道</li>
<li><strong>conventionally</strong> [kan’venJanlij] adv.照惯例，照常套</li>
<li><strong>unconventional</strong> [&lt;nkan’venJ(e)n(a)l]  adj. 非传统的；不依惯例的</li>
<li><strong>convenient</strong> [kan 'vi:niant] adj. 附近的； 方便的<br />
助记： con（加强语气）+ven（走）+ent→靠走就能到的→</li>
<li><strong>convenience</strong> [kan’vi:n1ans] n.便利;便利的事物<br />
-ance -ence -ancy -ency ①99%是名词后缀②极少数是动词后缀 finance n./v.</li>
<li><strong>conveniently</strong> [kan’vi:njantlij] adv. 便利地<br />
coward n. → cowardly adj.  adj + ly = adv</li>
<li><strong>inconvenience</strong> [1nkan’vi:n1ans] n. 麻烦；不便<br />
in- im- ir- il- i- → ①not: 否定、相反②=in 进入进去③使…</li>
<li><strong>inconvenient</strong> [1nkan’vi:n1ant] adj.不便的、不打扰的</li>
<li><strong>prevent</strong> [pri’vent] v.防止、预防、阻止<br />
助记:pre（提前、先）+vent（来）→先来（演练）一遍<br />
搭配 : prevent them from being marginalized （考） :防止他们被边缘化<br />
pre- 静态：先、提前 pro- = forward 动态：向前<br />
例句 : At last, Greater London Council took actions to prevent this disaster from happening again.<br />
仿写例句：教育相关部门应该采取行动其防止中文被边缘化。<br />
Educational departments should take action to prevent Chinese from being marginalized.</li>
<li><strong>preventable</strong> [pri’ventabl]    adj.可预防的；可阻止的；可防止的<br />
-able -ible -ile ①形容词后缀：可以…的、能…的②形容词后缀：容易的 fragible 易碎的③极少数做名词后缀</li>
<li><strong>preventable</strong> [pri’ventabl] adj.可预防的·可阻止的；可防止的</li>
<li><strong>preventative</strong> [pri’ventativ]  adj. 预防性的<br />
释义 ：=preventive 预防性的;防备的 Preventive actions are intended to help prevent things such as disease or crime.<br />
例句 : People accused the ministry of failing to take preventive adequate measures.<br />
人们谴责该政府部门未能采取足够的预防措施。</li>
<li><strong>prevention</strong> [pri’ven∫n] n.预防；阻止；妨碍<br />
-ion ①99%是名词后缀②极少数是动词后缀</li>
<li><strong>intervene</strong> [inta’vi:n] v.干涉、干预<br />
助记:inter（=between :之间）+ven（来）+e→来到两者之间→</li>
<li><strong>intervention</strong> [inta’venjan]  v.干涉、干预<br />
搭配 ：policy interventions（考）:</li>
<li><strong>intervening</strong> [,1nta’vinin] adj. 介于中间的；发生于期间的<br />
释义：(时间段)介于中间的，发生于其间的 An intervening period of time is one that separates two events or points in time.<br />
例句 : I had spent the intervening time in Beijing, with Leo, my Ex-boyfriend.<br />
(物体、地区)介于中间的 An intervening object or area comes between two other objects or areas.</li>
<li><strong>interfere</strong> [inta 'fia] v.干涉、干预；介入<br />
(VERB) 干涉;干预;介入 If you say that someone interfere in a situation, you mean they get involved in it although it does not concern them and their involvement is not wanted.<br />
例句 : A new generation of GPS cell phones with tracking software make it easier than ever to follow a child’s every movement via the Internet — without seeming to interfere or hover.<br />
写作例句：现在有不少孩子都被家长强迫去参加各种艺术班，而不管他们是否喜欢，这干涉了孩子的自由选择权。<br />
Now, there are a lot of children who are being forced to join art classes by their parents, even though they don’t like them, which interferes with their freedom to choose.</li>
<li><strong>interference</strong> [inta’fiarans] n.干涉、介入<br />
搭配 : interference with natural ecosystems（ 考）：和自然生态系统有冲突<br />
interfer in：干涉、干预<br />
interfer with sth: 和…冲突</li>
<li><strong>revenue</strong> ['revanju] n. 收入<br />
助记：re（回）+ven（=come:来）+ue（名词后缀）→ 回来的钱（因为venue整体在模仿money）→<br />
re- ①反复、又、再②返回③相反<br />
搭配 :tax revenues（考）:税收收入<br />
abandon readership revenue （考） :放弃读者的收入<br />
同义 :<strong>income</strong> ['inkAm] n. 收入<br />
助记：in（进）+come（来）→进来的钱→<br />
搭配 : income inequality（考）:收入不平等<br />
upper-income population （考）:高收入人群</li>
<li><strong>event</strong> [i’vent] n.事件，大事；结果；项目<br />
e- ex- es- ①向外、出来②超出③ex-前</li>
<li><strong>eventual</strong> [i’ven(t)ual]   adj.最后的，结果的；终于的；可能的</li>
<li><strong>eventually</strong> [i’ventuali] adv.最后，终于</li>
<li><strong>advance</strong> [ad’va:ns] n/v. 前进、提前<br />
助记 :ad（=to） +vanc（ =vent :来;另外，-anc还有<code>前</code>的意思）+e→来到前面→</li>
<li><strong>advanced</strong> [ad’va:nst] adj. 高级的、先进的<br />
搭配 : advanced medical technologies （考） :先进的医疗技术</li>
<li><strong>advancement</strong> [ad’vα:nsm(e)nt] n.前进，进步；提升<br />
-ment ①99%是名词后缀②极少数是动词后缀</li>
<li><strong>advancing</strong> [ad’vansin] adj. 前进的；年长的<br />
释义 : ~ years/age used as a polite way of referring to the fact of time passing and of sb growing older 年事渐高<br />
例句 : She is still very active, in spite of her/advancing years. 她尽管年事渐高，仍然十分活跃。</li>
</ol>
<h3 id="词根-anc-ant可以表示前-前面"><a class="markdownIt-Anchor" href="#词根-anc-ant可以表示前-前面"></a> 词根-anc、-ant可以表示“前、前面“</h3>
<ol>
<li><strong>ancient</strong> ['ein∫ant] a.古老的、古代的<br />
助记:anci（以前）+ent（=ant:的）→</li>
<li><strong>ancestor</strong> ['aensesta] n.祖先、始祖<br />
助记：anc（前）+cest（=cess走）+or（人）→走在前面</li>
<li><strong>antique</strong> [n’ti:k] n. 古董；a. 古老的<br />
助记：anti（以前）+que（名词或形容词缀）→以前的东西→<br />
anti- ①前②反</li>
</ol>
<hr />
<p>写在今天的话：四天跟着刘老师下来，根据词根词缀的方法学习记的牢固些，缺点是上课笔记的单词太浪费时间，自己做音标笔记也不太准确。<br />
时间是最大的问题，此后笔记不再更新。<br />
下面是 课后习题的资源和单词教材的资源连接，供各位道友修炼。</p>
<hr />
<h3 id="课后习题"><a class="markdownIt-Anchor" href="#课后习题"></a> 课后习题</h3>
<p><a href="https://ks.wjx.top/jq/43993960.aspx"> 词汇课1 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/44099011.aspx"> 词汇课2 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/44208644.aspx"> 词汇课3 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/44313955.aspx"> 词汇课4 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/44425795.aspx"> 词汇课5 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/44545782.aspx"> 词汇课6 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/44669116.aspx"> 词汇课7 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/44793203.aspx"> 词汇课8 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/44889461.aspx"> 词汇课9 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/45041209.aspx"> 词汇课10 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/45182779.aspx"> 词汇课11 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/45279415.aspx"> 词汇课12 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/45339302.aspx"> 词汇课13 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/45515288.aspx"> 词汇课14 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/45550268.aspx"> 词汇课15 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/45595929.aspx"> 词汇课16 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/45884921.aspx"> 词汇课17 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/46041917.aspx"> 词汇课18 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/46039342.aspx"> 词汇课19 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/46365056.aspx"> 词汇课20 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/46538357.aspx"> 词汇课21 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/46698295.aspx"> 词汇课22 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/46775429.aspx"> 词汇课23 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/46775679.aspx"> 词汇课24 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/46775926.aspx"> 词汇课25 课后作业： </a><br />
<a href="https://ks.wjx.top/jq/47015302.aspx"> 词汇课26 课后作业： </a></p>
<h3 id="词汇教材"><a class="markdownIt-Anchor" href="#词汇教材"></a> 词汇教材</h3>
<p><a href="/images/20000%E8%AF%8D%E6%B1%87%E5%B7%85%E5%B3%B0%E9%80%9F%E8%AE%B0%E8%90%A5%EF%BC%88%E6%95%99%E6%9D%901%EF%BC%89.pdf"> 20000词汇巅峰速记营（教材1）.pdf </a><br />
<a href="/images/20000%E8%AF%8D%E6%B1%87%E5%B7%85%E5%B3%B0%E9%80%9F%E8%AE%B0%E8%90%A5%EF%BC%88%E6%95%99%E6%9D%902%EF%BC%89.pdf"> 20000词汇巅峰速记营（教材2）.pdf </a><br />
<a href="/images/20000%E8%AF%8D%E6%B1%87%E5%B7%85%E5%B3%B0%E9%80%9F%E8%AE%B0%E8%90%A5%EF%BC%88%E6%95%99%E6%9D%903%EF%BC%89.pdf"> 20000词汇巅峰速记营（教材3）.pdf </a></p>
]]></content>
      <tags>
        <tag>外语</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML-前端开发</title>
    <url>/2025/03/02/html/</url>
    <content><![CDATA[<p>简介：HTML（HyperText Markup Language）是用于创建网页的标准标记语言。它通过定义一系列的标签来描述网页的内容结构，这些标签告诉浏览器如何显示内容以及内容之间的关系。HTML与CSS和JavaScript一起构成了前端开发的核心技术。</p>
<span id="more"></span>
<h2 id="html是什么"><a class="markdownIt-Anchor" href="#html是什么"></a> Html是什么？</h2>
<p>全称：HypterText Markup Language, 译为：超文本标记语言</p>
<h2 id="html-标签"><a class="markdownIt-Anchor" href="#html-标签"></a> Html 标签</h2>
<hr />
<ol>
<li><strong>标签</strong>，又称元素，是HTML的基本组成单位。</li>
<li>标签分为：双标签与单标签。多数为双标签。</li>
<li>标签不区分大小写，推荐小写，小写更规范。</li>
<li>双标签：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;marquee&gt;尚硅谷，让天下没有难学的技术！&lt;/marquee&gt;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>单标签：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;intput/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="html标签属性"><a class="markdownIt-Anchor" href="#html标签属性"></a> HTML标签属性</h2>
<hr />
<ol>
<li>用于给标签提供附加信息。</li>
<li>可以写在双标签或单标签中，形式如下 ：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;marquee loop=&quot;1&quot; bgcolor=&quot;red&quot; id=&quot;mar1&quot;&gt;</span><br><span class="line">    尚硅谷，让天下没有难学的技术！</span><br><span class="line">    &lt;input type=&quot;password&quot;&gt;</span><br><span class="line">&lt;/marquee&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>有些特殊的属性，只有属性值没有属性名，如下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input disabled&gt;</span><br></pre></td></tr></table></figure>
<h2 id="html基本结构"><a class="markdownIt-Anchor" href="#html基本结构"></a> HTML基本结构</h2>
<hr />
<ol>
<li><em>在网页中，如何查看在某段结构中的具体代码？</em> 点击鼠标右键，选择“检查”。</li>
<li><strong>检查</strong>和<strong>查看网页源代码</strong>的区别：</li>
</ol>
<blockquote>
<ul>
<li><strong>查看网页源代码</strong>是：程序员编写的源代码.</li>
<li><strong>检查</strong>是：经过浏览器处理过的源代码.</li>
<li>备注：日常开发中，检查使用的多。</li>
</ul>
</blockquote>
<ol start="3">
<li>网页的基本结构</li>
</ol>
<blockquote>
<ul>
<li>想要呈现在网页中的内容写在 <em>body</em>标签中。</li>
<li><em>head</em>标签中的内容不会呈现在网页中。</li>
<li><em>head</em>中的<em>title</em>可以指定网页的标题。</li>
<li>如下：</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;我的网页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;marquee loop=&quot;1&quot; bgcolor=&quot;red&quot; id=&quot;mar1&quot;&gt;</span><br><span class="line">        尚硅谷，让天下没有难学的技术！</span><br><span class="line">        &lt;input type=&quot;password&quot;&gt;</span><br><span class="line">    &lt;/marquee&gt;</span><br><span class="line">    &lt;input disabled&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="html注释"><a class="markdownIt-Anchor" href="#html注释"></a> HTML注释</h2>
<hr />
<p>形式：<code>&lt;!--- 这是一个注释、单行或多行 ---&gt;</code></p>
<h2 id="html文档声明"><a class="markdownIt-Anchor" href="#html文档声明"></a> HTML文档声明</h2>
<hr />
<p>形式：<code>&lt;!DOCTYPE html&gt;</code></p>
<h2 id="html编解码"><a class="markdownIt-Anchor" href="#html编解码"></a> HTML编解码</h2>
<hr />
<p>一句话：<em>存储方式和解码方式都使用UTF-8</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;HTML文档声明&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>
<h2 id="html语言"><a class="markdownIt-Anchor" href="#html语言"></a> HTML语言</h2>
<ol>
<li>主要作用：
<ul>
<li>让浏览器显示对应的翻译提示。</li>
<li>有利于搜索引擎的优化</li>
</ul>
</li>
<li>格式：<code>&lt;html lang=&quot;zh-CN&quot;&gt;</code></li>
<li>lang 属性的编写规则
<ul>
<li>zh-CN :简体中文</li>
<li>zh-TW :繁体中文</li>
<li>zh    :中文</li>
<li>en-US :英语-美国</li>
<li>en-GB :英语-英国</li>
</ul>
</li>
<li>参考：
<blockquote>
<ul>
<li><a href="https://www.w3school.com.cn/tags/html_ref_language_codes.asp">《语言代码参考手册》</a></li>
<li><a href="https://www.w3school.com.cn/tags/html_ref_country_codes.asp">《国家/地区代码参考手册》</a></li>
</ul>
</blockquote>
</li>
</ol>
<h2 id="html标准结构"><a class="markdownIt-Anchor" href="#html标准结构"></a> HTML标准结构</h2>
<ol>
<li>vscode 输入！可以自动插入标准HTML标准结构，代码人如下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;HTML标准结构&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="html标签"><a class="markdownIt-Anchor" href="#html标签"></a> HTML标签</h2>
<h3 id="排版标签"><a class="markdownIt-Anchor" href="#排版标签"></a> 排版标签</h3>
<table>
<thead>
<tr>
<th>标签名</th>
<th>含义</th>
<th>单/双</th>
</tr>
</thead>
<tbody>
<tr>
<td>h1—h6</td>
<td>标题</td>
<td>双</td>
</tr>
<tr>
<td>p</td>
<td>段落</td>
<td>双</td>
</tr>
<tr>
<td>div</td>
<td>布局</td>
<td>双</td>
</tr>
<tr>
<td>说明：</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>h1最好写一个，h2-h6能适当多写</li>
<li>h1-h6不能嵌套</li>
<li>p标签很特殊，它里面不能有 p div h1-h6</li>
</ul>
<h3 id="语义化标签"><a class="markdownIt-Anchor" href="#语义化标签"></a> 语义化标签</h3>
<ol>
<li>概念：用特定的标签表达特定大的语义。</li>
<li>原则：标签的默认效果不重要，语义更重要。</li>
<li>举例：h1标签表达的效果不重要，语义是网页的主要内容（很重要）。</li>
<li>优势：
<ul>
<li>代码结构清晰可读</li>
<li>有利于SEO（搜索引擎优化）</li>
<li>方便设备解析（盲人阅读器、屏幕阅读器）</li>
</ul>
</li>
</ol>
<h3 id="块级元素与行内元素"><a class="markdownIt-Anchor" href="#块级元素与行内元素"></a> 块级元素与行内元素</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 块级元素特点：独占一行 --&gt;</span><br><span class="line">    &lt;!-- &lt;marquee&gt;尚硅谷，让天下没有难学的技术！&lt;/marquee&gt;</span><br><span class="line">    &lt;marquee&gt;尚硅谷，让天下没有难学的技术！&lt;/marquee&gt;</span><br><span class="line">    &lt;h1&gt;尚硅谷，让天下没有难学的技术！&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;尚硅谷，让天下没有难学的技术！&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;尚硅谷，让天下没有难学的技术！&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;尚硅谷，让天下没有难学的技术！&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;尚硅谷，让天下没有难学的技术！&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;尚硅谷，让天下没有难学的技术！&lt;/div&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &lt;!-- 行内元素特点：不独占一行，在一行 --&gt;</span><br><span class="line">    &lt;!-- &lt;input type=&quot;&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;&quot;&gt;</span><br><span class="line">    &lt;span&gt;尚硅谷，让天下没有难学的技术！&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;尚硅谷，让天下没有难学的技术！&lt;/span&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 规则1：块级元素中能写：行内元素，块级元素（几乎都能写） --&gt;</span><br><span class="line">    &lt;!-- &lt;div&gt;</span><br><span class="line">        &lt;span&gt;尚硅谷&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;尚硅谷&lt;/span&gt;</span><br><span class="line">        &lt;p&gt;尚硅谷&lt;/p&gt;</span><br><span class="line">        &lt;div&gt;尚硅谷&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 规则2：行内元素中能写：行内元素，不能写块级元素--&gt;</span><br><span class="line">     &lt;!-- &lt;span&gt;</span><br><span class="line">        &lt;span&gt;尚硅谷&lt;/span&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">        &lt;span&gt;尚硅谷&lt;/span&gt;</span><br><span class="line">     &lt;/span&gt; --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;!-- 特殊规则： h1-h6不能嵌套 --&gt;</span><br><span class="line">     &lt;!-- &lt;h1&gt;</span><br><span class="line">        尚硅谷</span><br><span class="line">        &lt;h2&gt;尚硅谷&lt;/h2&gt;</span><br><span class="line">     &lt;/h1&gt;</span><br><span class="line">     &lt;h3&gt;尚硅谷&lt;/h3&gt; --&gt;</span><br><span class="line"></span><br><span class="line">     &lt;!-- 特殊规则：p标签不能写块元素 --&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        尚硅谷</span><br><span class="line">        &lt;!-- &lt;div&gt;尚硅谷&lt;/div&gt; --&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="常用的文本标签"><a class="markdownIt-Anchor" href="#常用的文本标签"></a> 常用的文本标签</h3>
<ol>
<li>用于包裹：词汇短语</li>
<li>通常写在排版标签里面</li>
<li>排版标签更宏大，文本标签更围观（词汇短语）</li>
<li>文本标签通常是行内元素<br />
常用如下：</li>
</ol>
<table>
<thead>
<tr>
<th>标签名</th>
<th>标签语义</th>
<th>单双</th>
</tr>
</thead>
<tbody>
<tr>
<td>em</td>
<td>要着重阅读的内容</td>
<td>双</td>
</tr>
<tr>
<td>strong</td>
<td>十分重要的内容</td>
<td>双</td>
</tr>
<tr>
<td>span</td>
<td>没有语气用于包裹短语的通用容器</td>
<td>双</td>
</tr>
</tbody>
</table>
<h3 id="不常用的文本标签"><a class="markdownIt-Anchor" href="#不常用的文本标签"></a> 不常用的文本标签</h3>
<table>
<thead>
<tr>
<th>标签名</th>
<th>标签语义</th>
<th>单双</th>
</tr>
</thead>
<tbody>
<tr>
<td>cite</td>
<td>作品标题（书籍、歌曲、电影、电视节目、绘画、雕塑）</td>
<td>双</td>
</tr>
<tr>
<td>dfn</td>
<td>特殊术语或专属名词</td>
<td>双</td>
</tr>
<tr>
<td>del\ins</td>
<td>删除的文本\插入的文本</td>
<td>双</td>
</tr>
<tr>
<td>sub\sup</td>
<td>下标\上标</td>
<td>双</td>
</tr>
<tr>
<td>code</td>
<td>一段代码</td>
<td>双</td>
</tr>
<tr>
<td>samp</td>
<td>从正常的上下文中，将某些内容提取处理，例如：表示设备输出</td>
<td>双</td>
</tr>
<tr>
<td>kbd</td>
<td>键盘文本，表示文本时键盘输入的</td>
<td>双</td>
</tr>
<tr>
<td>abbr</td>
<td>缩写，最好配上title属性</td>
<td>双</td>
</tr>
<tr>
<td>bdo</td>
<td>更改文本方向，要配合dir属性，可选值：itr、rtl</td>
<td>双</td>
</tr>
<tr>
<td>var</td>
<td>标记变量，可以与code一起使用</td>
<td>双</td>
</tr>
<tr>
<td>small</td>
<td>附属细则，例如：包括版权、法律文本（很少使用）</td>
<td>双</td>
</tr>
<tr>
<td>b</td>
<td>摘要中的关键字，评论中的产品名称（很少使用）</td>
<td>双</td>
</tr>
<tr>
<td>i</td>
<td>本意是：人物的思想活动、所说的话等等；现在多用于：呈现字体图标</td>
<td>双</td>
</tr>
<tr>
<td>u</td>
<td>与正常有反差的文本，例如：错的单词、不合适的描述等（很少）</td>
<td>双</td>
</tr>
<tr>
<td>q</td>
<td>短引用（很少使用）</td>
<td>双</td>
</tr>
<tr>
<td>blockquote</td>
<td>长引用（很少使用）</td>
<td>双</td>
</tr>
<tr>
<td>address</td>
<td>地址信息</td>
<td>双</td>
</tr>
</tbody>
</table>
<p>备注：</p>
<ol>
<li>这些不常用的文本标签，编码时不用过于纠结（酌情而定，不用也没毛病）。</li>
<li>blockquote 与 address 是块级元素，其他的文本标签，都是行内元素。</li>
<li>有些语义感不强的标签，我们很少使用，例如：small、b、u、q、blockquote</li>
<li>HTML标签太多了！记住那些：重要的、语义感强的标签即可；截止目前，有这些：<br />
<strong>h1~h6、p、div、em、strong、span</strong></li>
</ol>
<h3 id="图片标签"><a class="markdownIt-Anchor" href="#图片标签"></a> 图片标签</h3>
<p><img src="/images/img%E6%A0%87%E7%AD%BE.png" alt="img标签" /><br />
<img src="/images/img%E6%A0%87%E7%AD%BE%E6%80%BB%E7%BB%93.png" alt="img标签总结" /></p>
<h3 id="图片格式"><a class="markdownIt-Anchor" href="#图片格式"></a> 图片格式</h3>
<ol>
<li>jpg格式：<br />
概述：扩展名为.jpg或.jpeg，是一种有损的压缩格式（把肉眼不容易观察出来的细节丢弃了）。<br />
主要特点：<strong>支持的颜色丰富、占用空间较小</strong>、不支持透明背景、不支持动态图。<br />
使用场景：对图片细节没有极高要求的场景，例如：网站的产品宣传图等。一一该格式网页中很常见。</li>
<li>png 格式:<br />
概述：扩展名为.png，是一种无损的压缩格式，能够更高质量的保存图片。<br />
主要特点：<strong>支持的颜色丰富</strong>、占用空间略大、<strong>支持透明背景</strong>、不支持动态图。<br />
使用场景：①想让图片有透明背景；②想更高质量的呈现图片；例如：公司logo图、重要配图等。</li>
<li>bmp 格式:<br />
概述：扩展名为.bmp，不进行压缩的一种格式，在最大程度上保留图片更多的细节。<br />
主要特点：<strong>支持的颜色丰富、保留的细节更多</strong>、占用空间极大、不支持透明背景、不支持动态图。<br />
使用场景：对图片细节要求极高的场景，例如：一些大型游戏中的图片。（网页中很少使用)</li>
<li>gif 格式:<br />
概述：扩展名为·gif，仅支持256种颜色，色彩呈现不是很完整。<br />
主要特点：支持的颜色较少、<strong>支持简单透明背景、支持动态图</strong>。<br />
使用场景：网页中的动态图片。</li>
<li>webp 格式：<br />
概述：扩展名为.webp，谷歌推出的一种格式，专门用来在网页中呈现图片。<br />
主要特点：<strong>具备上述几种格式的优点</strong>，但兼容性不太好，一旦使用务必要解决兼容性问题。<br />
使用场景：网页中的各种图片。</li>
<li>base64格式<br />
本质：一串特殊的文本，要通过浏览器打开，传统看图应用通常无法打开。<br />
原理：把图片进行base64编码，形成一串文本。<br />
如何生成：靠一些工具或网站。<br />
如何使用：直接作为img标签的src属性的值即可，并且不受文件位置的影响。<br />
使用场景：一些较小的图片，或者需要和网页一起加载的图片。</li>
</ol>
<h3 id="超链接"><a class="markdownIt-Anchor" href="#超链接"></a> 超链接</h3>
<ol>
<li>
<p>跳转链接<br />
<img src="/images/a%E6%A0%87%E7%AD%BE.png" alt="a标签" /><br />
说明如下：<br />
<img src="/images/a%E6%A0%87%E7%AD%BE%E8%AF%B4%E6%98%8E.png" alt="a标签说明" /></p>
</li>
<li>
<p>跳转到文件<br />
<img src="/images/a%E8%B7%B3%E8%BD%AC%E6%96%87%E4%BB%B6.png" alt="a标签跳转到文件" /></p>
</li>
<li>
<p>跳转描点</p>
</li>
</ol>
<p><img src="/images/a%E6%A0%87%E7%AD%BE%E8%B7%B3%E8%BD%AC%E6%8F%8F%E7%82%B9.png" alt="a标签跳转描点" /></p>
<ol start="4">
<li>唤起指定应用</li>
</ol>
<p><img src="/images/a%E6%A0%87%E7%AD%BE%E5%94%A4%E8%B5%B7%E6%8C%87%E5%AE%9A%E5%BA%94%E7%94%A8.png" alt="a标签唤起应用" /></p>
<h3 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h3>
<ol>
<li>有序列表<br />
概念：有顺序或侧重顺序的列表。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>要把大象放冰箱总共分几步<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>把冰箱门打开<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象放进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>把冰箱门关上<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>无序列表<br />
概念：无顺序或不侧重顺序的列表。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我想去的几个城市<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    &lt;1i&gt;上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>西安<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">    &lt;1i&gt;武汉&lt;/1i&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>列表嵌套<br />
概念：列表中的某项内容，又包含一个列表（注意：嵌套时，请务必把解构写完整）</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我想去的几个城市<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>外滩<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>杜莎夫人蜡像馆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                &lt;ahref=&quot;https: //www.opg.cn/&quot;&gt;东方明珠<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>迪士尼乐园&lt;/1i&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>西安<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：li标签最好写在ul 或ol 中，不要单独使用。<br />
4. 自定义列表<br />
1．概念：所谓自定义列表，就是一个包含术语名称以及术语描述的列表。<br />
2．一个dl就是一个自定义列表，一个dt就是一个术语名称，一个dd就是术语描述（可以有多个）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>如何高效的学习？<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>做好笔记<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>笔记是我们以后复习的一个抓手<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>笔记可以是电子版，也可以是纸质版<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>多加练习<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>只有敲出来的代码，才是自己的<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>别怕出错<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>错很正常，改正后并记住，就是经验<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h3>
<ol>
<li>基本结构</li>
</ol>
<ul>
<li>一个完整的表格由：表格标题、表格头部、表格主体、表格脚注，四部分组成。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表格标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表头 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>民族<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>政治面貌<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表格主体 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>汉族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>团员<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>满族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>群众<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>回族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>党员<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>赵六<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>壮族<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>团员<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表格脚注 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>共计：4人<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>表格涉及到的标签：<br />
<em>table</em>：表格<br />
<em>caption</em>：表格标题<br />
<em>thead</em>：表格头部<br />
<em>tbody</em>：表格主体<br />
<em>tfoot</em>：表格注脚<br />
<em>tr</em>：每一行<br />
<em>th、td</em>：每一个单元格（备注：表格头部中用th，表格主体、表格脚注中用：td）</li>
<li>跨行跨列<br />
rowspan：指定要跨的行数。<br />
colspan：指定要跨的列数。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>课程表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>项目<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>上课<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>活动与休息<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期六<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>星期日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>上午<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>3---2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>3---3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>3---4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>3---5<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>3---6<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>3---7<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>休息<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>4---2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>4---3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>4---4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>4---5<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>4---6<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>4---7<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>5---2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>5---3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>5---4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>5---5<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>5---6<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>5---7<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>6---2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>6---3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>6---4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>6---5<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>6---6<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>6---7<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>下午<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>7---2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>7---3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>7---4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>7---5<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>7---6<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>7---7<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>休息<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>8---2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>8---3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>8---4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>8---5<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>8---6<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>8---7<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="常用标签补充"><a class="markdownIt-Anchor" href="#常用标签补充"></a> 常用标签补充</h3>
<table>
<thead>
<tr>
<th>标签名</th>
<th>标签含义</th>
<th>单、双标签</th>
</tr>
</thead>
<tbody>
<tr>
<td>br</td>
<td>换行</td>
<td>单</td>
</tr>
<tr>
<td>hr</td>
<td>分割线</td>
<td>单</td>
</tr>
<tr>
<td>pre</td>
<td>按原文显示（一般用于在页面中嵌入大段代码）</td>
<td>单</td>
</tr>
</tbody>
</table>
<p>注意点：</p>
<ul>
<li>不要用<code>&lt;br&gt;</code>来增加文本之间的行间隔，应使后面即将学到的cSSmargin属性。</li>
<li><code>&lt;hr&gt;</code> 的语义是分隔，如果不想要语义，只是想画一条水平线，那么应当使用cSS完成。</li>
</ul>
<h3 id="表单"><a class="markdownIt-Anchor" href="#表单"></a> 表单</h3>
<ol>
<li>基本结构</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.baidu.com/s&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>去百度搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://search.jd.com/search&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>去京东搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>常用表单控件<br />
代码如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://search.jd.com/search&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文本框 --&gt;</span></span><br><span class="line">        账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 密码输入框 --&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 单选框 --&gt;</span></span><br><span class="line">        性别：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 多选框 --&gt;</span></span><br><span class="line">        爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span> <span class="attr">checked</span>&gt;</span>抽烟</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span>喝酒</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span> <span class="attr">checked</span>&gt;</span>汤头</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;from&quot;</span> <span class="attr">value</span>=<span class="string">&quot;toutiao&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确认&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>a. 文本输入框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">```   </span><br><span class="line">&gt; 常用属性如下：</span><br><span class="line">&gt; * name属性：数据的名称。</span><br><span class="line">&gt; * value属性：输入框的默认输入值。</span><br><span class="line">&gt; * maxlength属性：输入框最大可输入长度。</span><br><span class="line"></span><br><span class="line">b. 密码输入框</span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>常用属性如下：</p>
<ul>
<li>name属性：数据的名称。</li>
<li>value属性：输入框的默认输入值（一般不用，无意义）。</li>
<li>maxlength属性：输入框最大可输入长度。</li>
</ul>
</blockquote>
<p>c. 单选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女 </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男</span><br></pre></td></tr></table></figure>
<blockquote>
<p>常用属性如下：<br />
name属性：数据的名称，注意：想要单选效果，多个radio的name属性值要保持一致。<br />
value属性：提交的数据值。<br />
checked属性：让该单选按钮默认选中。</p>
</blockquote>
<p>d. 复选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span>抽烟 </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span>喝酒 </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span>&gt;</span>烫头  </span><br></pre></td></tr></table></figure>
<blockquote>
<p>常用属性如下：<br />
name属性：数据的名称。<br />
value属性：提交的数据值。<br />
checked属性：让该复选框默认选中。</p>
</blockquote>
<p>e. 提交按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit”value=&quot;</span><span class="attr">点我提交表单</span>&quot;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点我提交表单<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   </span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<ul>
<li>button标签type属性的默认值是submit。</li>
<li>button不要指定name属性</li>
<li>input标签编写的按钮，使用value属性指定按钮文字。</li>
</ul>
</blockquote>
<p>f. 禁用表单控件<br />
给表单控件的标签设置disabled既可禁用表单控件。</p>
<blockquote>
<p>input、textarea、button、select、option都可以设置 disabled属性</p>
</blockquote>
<h3 id="label标签"><a class="markdownIt-Anchor" href="#label标签"></a> label标签</h3>
<p>1abe1标签可与表单控件相关联，关联之后点击文字，与之对应的表单控件就会获取焦点。两种与label关联方式如下：</p>
<ol>
<li>让label标签的for属性的值等于表单控件的id。</li>
<li>把表单控件套在1abe1标签的里面。</li>
</ol>
<h3 id="fieldset与legend的使用了解"><a class="markdownIt-Anchor" href="#fieldset与legend的使用了解"></a> fieldset与legend的使用（了解）</h3>
<p>fieldset可以为表单控件分组、legend标签是分组的标题。</p>
<h3 id="框架标签"><a class="markdownIt-Anchor" href="#框架标签"></a> 框架标签</h3>
<table>
<thead>
<tr>
<th>标签名</th>
<th>功能和语义</th>
<th>属性</th>
<th>单/双标签</th>
</tr>
</thead>
<tbody>
<tr>
<td>iframe</td>
<td>框架（在网页中嵌入其他文件）</td>
<td>name：框架名字，可以与target属性配合。 width：框架的宽。height：框架的高度。frameborder：是否显示边框，值：0或者1。</td>
<td>双</td>
</tr>
</tbody>
</table>
<p>iframe标签的实际应用：</p>
<ol>
<li>在网页中嵌入广告。</li>
<li>与超链接或表单的target配合，展示不同的内容。</li>
</ol>
]]></content>
      <tags>
        <tag>前端开发</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda-expression</title>
    <url>/2024/01/02/lambda-expression/</url>
    <content><![CDATA[<p>前言：Lambda表达式是现代编程语言的一个基础特性，比如LISP、Python、C#等都具备该该特性。<em>C++11</em>标准为我们提供Lambda表达式的支持，而且语法非常简洁明了。</p>
<span id="more"></span>
<h2 id="lambda表达式的语法"><a class="markdownIt-Anchor" href="#lambda表达式的语法"></a> Lambda表达式的语法</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[captures](params) specifiers exception -&gt; ret &#123; body &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>[captures]—捕获列表，捕获列表中的变量存在于两个作用域，一是lambda表达式定义的函数作用域。二是lambda表达式函数体中的作用域。前者是为了捕获变量后者是为了使用变量。标准还规定，捕获变量必须是自动存储的类型，简单说就是非静态的局部变量。</li>
<li>(params) —可选参数列表，语法和普通函数一样，在不需要参数的时候可以省略。</li>
<li>specifiers — 可选限定符。<em>C++11</em>中可以mutable，它允许我们在lambda表达式函数体内改变值捕获的变量，或调用非const的成员函数。</li>
<li>exception — 可选异常说明符。noexcept来指明lambda不抛出异常</li>
<li>ret — 可选的返回类型</li>
<li>{body} — lambda表达式的函数体。</li>
<li>C++ 最简单的表达式: []{}</li>
</ul>
<h3 id="lambda表达式按值和按引用捕获的例子"><a class="markdownIt-Anchor" href="#lambda表达式按值和按引用捕获的例子"></a> Lambda表达式按值和按引用捕获的例子</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int x = 5, y = 8;</span><br><span class="line">auto foo = [x, &amp;y]() mutable &#123;</span><br><span class="line">        x += 1;</span><br><span class="line">        y += 2;</span><br><span class="line">        std::cout &lt;&lt; &quot;lambda x = &quot; &lt;&lt; x &lt;&lt; &quot;, y = &quot; &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">        return x * y;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    foo();</span><br><span class="line">    std::cout &lt;&lt; &quot;call1  x = &quot; &lt;&lt; x &lt;&lt; &quot;, y = &quot; &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    foo();</span><br><span class="line">    std::cout &lt;&lt; &quot;call2  x = &quot; &lt;&lt; x &lt;&lt; &quot;, y = &quot; &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // 结果如下：</span><br><span class="line">    lambda x = 6, y = 10</span><br><span class="line">    call1  x = 5, y = 10</span><br><span class="line">    lambda x = 7, y = 12</span><br><span class="line">    call2  x = 5, y = 12</span><br></pre></td></tr></table></figure>
<p><strong>注意：捕获值的变量在lambda表达式定义的时候已经固定下来了，无论函数在lambda表达式后如何修改外部变量的值，lambda表达式捕获的值都不会变。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int x = 5, y = 8;</span><br><span class="line">    auto foo = [x, &amp;y]() mutable &#123;</span><br><span class="line">        x += 1;</span><br><span class="line">        y += 2;</span><br><span class="line">        std::cout &lt;&lt; &quot;lambda x = &quot; &lt;&lt; x &lt;&lt; &quot;, y = &quot; &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">        return x * y;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    x = 9;</span><br><span class="line">    y = 20;</span><br><span class="line">    foo();</span><br><span class="line">    std::cout &lt;&lt; &quot;call1  x = &quot; &lt;&lt; x &lt;&lt; &quot;, y = &quot; &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    //结果如下：</span><br><span class="line">    lambda x = 6, y = 22</span><br><span class="line">    call1  x = 9, y = 22</span><br></pre></td></tr></table></figure>
<h3 id="广义捕获"><a class="markdownIt-Anchor" href="#广义捕获"></a> 广义捕获</h3>
<p>说明：<em>C++14</em>标准定义了广义捕获，其实是两种捕获方式，一种是<em>C++11</em>中定义的。第二种，初始化捕获。<br />
初始化捕获的代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int x = 5;</span><br><span class="line">auto foo = [r = x + 1] &#123; return r; &#125;;</span><br><span class="line">std::string y = &quot;hello, c++&quot;;</span><br><span class="line">auto foo1 = [y = std::move(y)] &#123; return y + &quot;world!&quot;; &#125;;</span><br></pre></td></tr></table></figure>
<p>初始化捕获的第二场景：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class work</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    work() : value_(42) &#123;&#125;</span><br><span class="line">    std::future&lt;int&gt; spawn()</span><br><span class="line">    &#123;</span><br><span class="line">        return std::async([=, tmp = *this]() &#123; return tmp.value_; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    int value_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：第二场景实在异步调用时复制this对象，防止lambda表达式被调用时因原始this 对象被析构造成未定义的行为。</p>
<h3 id="常量lambda表达式和捕获this"><a class="markdownIt-Anchor" href="#常量lambda表达式和捕获this"></a> 常量lambda表达式和捕获*this</h3>
<ul>
<li><em>C++17</em>开始，lambda表达式在条件允许的情况下都会隐式声明为constexpr.</li>
<li><em>C++17</em>在捕获列表直接[*this]来简化<em>C++14</em>初始化[tmp = *this]的用法，[*this]的语法让程序生成了一个*this的对象的副本并存储在lambda表达式内，可以在lambda表达式内直接访问这个复制对象的成员，消除了通过tmp访问对象成员的尴尬。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class work</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    work() : value_(42) &#123;&#125;</span><br><span class="line">    std::future&lt;int&gt; spawn()</span><br><span class="line">    &#123;</span><br><span class="line">        return std::async([=, *this]() &#123; return value_; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    int value_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="捕获-this"><a class="markdownIt-Anchor" href="#捕获-this"></a> 捕获[=, this]</h3>
<ul>
<li><em>C++20</em>标准中，[=, this]捕获this指针的语法，它实际上表达的意思和[=]相同，目的是让程序员区分他与[=, *this]的不同；</li>
</ul>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础</title>
    <url>/2023/05/29/linux%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>前言：Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。</p>
<span id="more"></span>
<p>Linux系统一般有四个主要部分：内核、shell、文件系统、应用程序。前三者一起构成了基本的操作系统，应用程序则是在这个基础上运行的。</p>
<h3 id="part-1-标准io"><a class="markdownIt-Anchor" href="#part-1-标准io"></a> <strong>Part 1: 标准IO</strong></h3>
<p>I/O：input &amp; output,是一切实现的基础</p>
<blockquote></blockquote>
<pre><code>stdio 标准IO  
sysio 系统调用IO（文件IO）
</code></pre>
<blockquote></blockquote>
<p>stdio: FILE类型贯穿始终</p>
<blockquote></blockquote>
<pre><code>fopen();
fclose();
fgetc();
fputc();
fgets();
fputs();
fread();    binary read
fwrite();   binary write

printf();
scanf();

fseek();
ftell();
int fseeko(FILE *stream, off_t offset, int whence);  
     node: On  some  architectures,  both off_t and long are 32-bit types, but    
     
     defining _FILE_OFFSET_BITS 64 
     
     with the value 64 (before including any header   files) will turn off_t into a 64-bit type.  

off_t ftello(FILE *stream);

rewind();
fflush();
    1. 缓冲区的作用：大多数情况下是好事，合并系统调用。
    2. 行缓冲：换行时候刷新，满了的时候刷新，强制刷新（标准输出是这样的，因为是终端设备）
    3. 全缓冲：满了的时候刷新，强制刷新（默认是全缓冲，只要不是终端设备）
    4. 无缓冲：如stderr, 需要立即输出的内容
    5. 更改缓冲模式的函数 setvbuf()--- 一般用不上
</code></pre>
<blockquote></blockquote>
<h3 id="part-2-系统io文件io"><a class="markdownIt-Anchor" href="#part-2-系统io文件io"></a> <strong>Part 2: 系统IO/文件IO</strong></h3>
<p>fd 是在文件IO中贯穿始终的类型<br />
文件描述符的概念：<br />
<img src="/images/fd_desc.png" alt="文件描述符的概念" /></p>
<blockquote></blockquote>
<pre><code>1. 实质：整形数---数组的下标，优先使用当前可用范围最小的。
2. 当前数组是在一个进程空间中的，不同进程不会共用。
3. 是进程用来访问操作系统对象的“指针”。
</code></pre>
<blockquote></blockquote>
<p>文件IO相关操作：</p>
<blockquote></blockquote>
<pre><code>1. open(const char *pathname, int flags); flags --- 位图
2. flags must be:  O_RDONLY,  O_WRONLY,  or O_RDWR.  
3. or has O_CLOEXEC,  O_CREAT,  O_DIRECTORY,  O_EXCL,  O_NOCTTY,O_NOFOLLOW,  O_TMPFILE,  O_TRUNC... see man 2 open.
4. r ---    O_RDONLY
5. r+ ----  O_RDWR
6. w ----   O_WRONLY|O_CREATE|O_TRUNC
7. w+ ----  O_RDWR|O_TRUNC|O_CREATE
8. read()
9. write()
10. close()
11. lseek
</code></pre>
<blockquote></blockquote>
<p>文件IO和标准IO的区别</p>
<blockquote></blockquote>
<pre><code>1. 响应速度 &amp; 吞吐量
2. 如何使一个程序变快？主要考虑上面两个方面进行回答。
3. 标准IO和系统IO 不可混用
</code></pre>
<blockquote></blockquote>
<p>IO的效率问题</p>
<blockquote></blockquote>
<pre><code>bufsize 的大小会影响效率，但有一个最佳的bufsize 大小，需要测试。
</code></pre>
<blockquote></blockquote>
<p>文件共享</p>
<blockquote></blockquote>
<pre><code>线程共享，在一个进程空间多次打开文件。
进程共享，在两个进程中去打开文件，利用进程间共享。
试题：写一个程序删除一个文件的第10行。
</code></pre>
<blockquote></blockquote>
<p>原子操作</p>
<blockquote></blockquote>
<pre><code>1. 不可分割的操作
2. 不可分割的最小单位
3. 解决竞争和冲突
4. 如：tmpnam()
</code></pre>
<blockquote></blockquote>
<p>程序中的重定向：dup dup2</p>
<blockquote></blockquote>
<pre><code>dup2(old_fd, new_fd) : 把old_fd 从定向到new_fd,第一，关闭new_fd。 第二，copy old_fd 到new_fd。第三，如果old_fd == new_fd时，什么都不做。
</code></pre>
<blockquote></blockquote>
<p>同步：sync fsync, fdatasysnc</p>
<blockquote></blockquote>
<pre><code>1. sync - commit buffer cache to disk,同步内核层面的buf cache
2. 解除设备挂载时用到。 man 2 sync see the details.
</code></pre>
<blockquote></blockquote>
<p>fcntl()</p>
<blockquote></blockquote>
<pre><code>1. 文件描述符所变的魔术几乎都来源与该函数。
</code></pre>
<blockquote></blockquote>
<p>ioctl()</p>
<blockquote></blockquote>
<pre><code>1. 设备相关的内容
</code></pre>
<blockquote></blockquote>
<p>/dev/fd/目录</p>
<blockquote></blockquote>
<pre><code>1. 虚目录
</code></pre>
<blockquote></blockquote>
<h3 id="part-3-file-system"><a class="markdownIt-Anchor" href="#part-3-file-system"></a> <strong>Part 3: File System</strong></h3>
<p>文件系统：<br />
一、目录和文件</p>
<blockquote></blockquote>
<pre><code>1. 获取文件属性
    stat()：通过文件路径获取属性，面对符号链接文件时获取的是所指向的属性。
    fstat():通过文件描述符获取属性。
    lstat():面对符号链接文件时获取的是符号链接文件的属性。
    文件类型：7种 --- dcb-lsp d:目录文件 c:字符设备文件 b:块设备文件 -：常规文件  
    l:链接文件（符号链接文件）s:网络套接字socket 文件 p:管道文件
2. 文件访问权限
    st_mode 是一个16位的位图，用于表示文件类型，文件访问权限，特殊权限位
3. umask
    作用：防止产生权限过松的文件
4. 文件权限的更改/管理
    chmod();
        chmod a+x big.c --- a+x：所有可读可写可执行 rwxrwxrwx. u+x 代表user rwx.
        g+x: group rwx. o+x :other x.
    fchmod();
5. 粘住位
    t 位 /tmp 目录有t位
6. 文件系统：FAT，UFS
    文件或数据的存储和管理
7. 硬链接，符号链接
    硬链接与目录项是同义词，且建立硬链接有限制：不能给目录建立，不能给分区建立。
    符号链接优点：可跨分区，可以给目录建立。
    link() ---&gt; ln src dest/ln -s src dest.
     unlink()
    remove() ---&gt; rm
    rename() ---&gt; mv
8. utime
    change file last access and modification times.
9. 目录的创建和销毁
    mkdir()
    rmdir()
10. 更改当前工作路径
    chdir(); ---&gt; cd: change working directory.
    fchdir();
    getcwd();---&gt; pwd: get current working directory.
11. 分析目录/读取目录内容
    glob()：解析模式/ 统配符 可以实现以下方法的集合。

    opendir();
    closedir();
    readdir();
    rewinddir();
    fseekdir();
    seekdir();
    telldir();
</code></pre>
<blockquote></blockquote>
<p>二、系统数据文件和信息</p>
<blockquote></blockquote>
<pre><code>1. /etc/passed
    getpwuid();
    getpwnam();

2. /etc/group
    getgrgid();
    getgrgnam();
3. /etc/shadow
    getspnam();
    crypt();
    getpass();

4. 时间戳: time_t   char *   struct tm
    time();
    gmtime();
    localtime();
    mktime();
    strftime(); 
</code></pre>
<blockquote></blockquote>
<p>三、进程环境</p>
<blockquote></blockquote>
<pre><code>1. main() 函数
    int main(int argc, char **argv);
2. 进程的终止
    正常终止：
        1）从main 函数返回
        2）调用exit()
        3) 调用_exit() 或_Exit()
        4) 最后一个线程从其启动例程返回
        5) 最后一个线程调用pthread_exit()
    异常终止：
        1）调用abort()
        2) 接到一个信号并终止
        3) 最后一个线程对其取消请求作出响应 
    atexit();
        在进程正常结束时钩子函数逆序被调用，但是进程如果是调用_exit()或_Exit()不会执行钩子函数
3. 命令行参数的分析
     getopt()
     getopt_long()
4. 环境变量
    key=value
    getenv();
    setenv();
    putenv();
5. c程序的存储空间布局 (pmap p_id)
</code></pre>
<p><img src="/images/c_program_layout.png" alt="c程序的存储空间布局" /></p>
<pre><code>6. 库  
    动态库  
    静态库  
    手工装载库  
        dlopen();  
        dlerror();  
        dlsym();  
        dlclose();  
7. 函数跳转
    setjmp();
        设置跳转点
    longjmp();
        安全跨函数的跳转
8. 资源的获取及控制
    getrlimit();
    setrlimit();
</code></pre>
<blockquote></blockquote>
<h3 id="part-4-process"><a class="markdownIt-Anchor" href="#part-4-process"></a> <strong>Part 4: Process</strong></h3>
<p>进程基本知识， 已经进入多进程。</p>
<blockquote></blockquote>
<pre><code>1. 进程标识符 pid
    1）类型pid_t 有符号16位整数（现在已经扩展根据机器环境有不同的大小）
    2）命令ps (man ps) 例如： ps axf ps axm ps ax -L 
    3）进程号是顺次向下使用
    4）getpid();
    5）getppid(); 
2. 进程的产生
    1）fork();
    2）注意理解关键字：duplicating，意味着拷贝，克隆，一模一样等含义，代码从fork()的位置开始一式两份。  
    3）fork后父子进程的区别：fork的返回值不一样，pid不同，ppid也不同，未决信号和文件锁不继承，资源利用量清零。
    4）init进程：是所有进程的祖先进程 进程号是1号
    5）调度器的调度策略决定了哪个进程先运行，不可假设。
    6）fork() 之前fflush() 的重要性。
    7）子进程exit() 的重要性。
    8）vfork()

3. 进程的消亡及释放资源
    wait();
    waitpid()
    wait3();
    wait4();
4. exec函数族
    execl();
    execlp();
    execle();
    execv();
    execvp();
    注意：exec组函数使用注意fflush 的使用。
5. 用户权限及组权限
    u + s
    g + s
    getuid();
    geteuid();
    getgid();
    getegid();
    setuid();// 常用 例子：mysu.c
    setgid();
    setreuid();
    setregid();
    seteuid();
    setguid();
    chown root ./mysu
    chmod u+s ./mysu

6. 解释器文件
    #！  /bin/bash

7. system();
    理解：fork + exec + wait 封装
    例子： 
    fork() + exec(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;date + %s &lt; /dev/null&quot;, NULL) + wait()的一个简单封装
8. 进程会计
    acct();

9. 进程时间
    进程时间
    times() ---&gt; time ./myexec 

10. 守护进程
    会话 session
        是一个容器，承载进程组。
        标识sid
        setsid() 
            creates a new session if the calling process is not a process   
            group leader.The calling process is the leader of the new session,
            the process group leader of the new process group,
            and has no controlling tty.
    终端
        输入和输出
    setpgid();
    getpgid();
    getpgrp();
    单实例的守护进程：用的是锁文件 /var/run/xxx.pid
    启动脚本文件：/etc/rc1./xx

11. 系统日志
    存放的位置： /var/log
    rsyslogd 服务
    openlog();
    syslog();
    closelog();
</code></pre>
<blockquote></blockquote>
<h3 id="part-5-concurrency"><a class="markdownIt-Anchor" href="#part-5-concurrency"></a> <strong>Part 5: Concurrency</strong></h3>
<p>同步<br />
异步<br />
异步事件的处理：查询法，通知法。<br />
异步事件发生的很稀疏通知法是合适的，发生很频繁用查询法。</p>
<p>一、信号</p>
<blockquote></blockquote>
<pre><code>1. 信号的概念
    信号是软件层面的中断。
    信号的响应依赖于中断。

2. signal();
    kill -l 显示信号
    SIGINT ---&gt; ctrl + c
    信号会打断阻塞的系统调用。

3. 信号的不可靠
    指信号行为的不可靠

4. 可重入函数
    所有的系统调用都是可重入的，一部分库函数也是可重入的。memcpy()可重入，rand()不可重入，
    rand_r() 可重入。

5. 信号的响应过程
    信号从受到到响应有一个不可避免的延迟  
    思考：信号如何忽略掉一个信号的？  
    标准信号为什么要丢失？
    标准信号的响应没有严格的顺序。  
    不能从信号处理函数中随意的往外跳
</code></pre>
<p><img src="/images/process_mask_pending.png" alt="信号的响应过程" /></p>
<pre><code>6. 常用函数
    kill(); -- send signal to a process
    raise();-- send a signal to the caller

    alarm();
    setitimer();
    例：使用单一计时器，setitimer()或alarm()构造一组函数，实现任意数量的计时器。

    pause();-- wait a signal
    abort();-- create a core dump file
    system();
        During execution of the command, SIGCHLD will  
        be blocked and SIGINT and SIGQUIT will be  ignored,  
        in  the  process  that  calls  system().
    sleep();
    usleep();
    nanosleep();
    select();
    
7. 信号集
    类型：sigset_t
    sigemptyset();
    sigfillset();
    sigaddset();
    sigismember();

8. 信号屏蔽子/pending 集的处理
    sigprocmask(); 例子：block.c
    sigpending(); --- 不常用


9. 扩展集
    sigsuspend(); -- wait for a signal
        解除信号集马上进入等待一个信号
    sigaction(); -- signal()

10. 实时信号
    范围： [SIGRTMIN, SIGRTMAX]
    不丢失排队，排队的多少查看ulimit -a
</code></pre>
<blockquote></blockquote>
<p>二、线程</p>
<blockquote></blockquote>
<pre><code>1. 线程的概念
    一个正在运行的函数  
    posix 线程是一套标准，而不是实现  
    openmp线程  
    线程标识：pthread_t
    pthread_equal();
    pthread_self(); -- obtain ID of the calling thread.

2. 线程的创建
    pthread_create();
    线程的调度取决于调度器策略

    线程的终止
        3种方式：
            1）线程从启动例程返回，返回值就是线程的退出码
            2）线程可以被同一进程中的其他线程取消
            3）线程调用pthread_exit()函数
        pthread_join() -- join with a terminated thread

    栈的清理
        pthread_cleanup_push();
        pthread_cleanup_pop();

    线程的取消选项
        线程取消： pthread_cancel();
        取消有2种状态： 允许和不允许
        允许取消又分为：异步cancel,推迟cancel(默认)，推迟至cancel点在响应。
        cancel点：posix定义的cancel点，都是可能引发阻塞的系统调用。
        pthread_setcancelstate(): 设置是否允许取消
        pthread_setcanceltype(): 设置取消方式
        pthread_testcancel(): 本函数什么都不做，就是一个取消点。

    线程分离：
        pthread_detach();

3. 线程的同步
    互斥量： 
        pthread_mutex_t
        pthread_mutex_init();
        pthread_mutex_destroy();
        pthread_mutex_lock();
        pthread_mutex_trylock();
        pthread_mutex_unlock();
        pthread_once(); // 只执行一次

    条件变量：
        pthread_cond_t
        pthread_cond_init();
        pthread_cond_destroy();
        pthread_cond_broadcast();
        pthread_cond_signal();
        pthread_cond_wait(); -- 解锁等待 被通知后抢锁
        pthread_cond_timedwait();

    信号量：
    多写锁：读锁 ---&gt; 共享锁    写锁 ---&gt; 互斥锁

4. 线程属性
    pthread_attr_t 
    pthread_attr_init();
    pthread_attr_destroy();
    pthread_attr_setstacksize();
    见 man pthread_attr_init 的see also

    线程同步的属性
        互斥量属性：
            pthread_mutexattr_init();
            pthread_mutexattr_destroy();
            pthread_mutexattr_setpshared();
            pthread_mutexattr_getpshared();
            clone();
            pthread_mutexattr_gettype();
            pthread_mutexattr_settype();
        
        条件变量：
            pthread_condattr_init();
            pthread_condattr_destroy();

        读写锁属性：

5. 重入
    多线程中的IO
    线程与信号
        pthread_sigmask();
        sigwait();
        pthread_kill();

    线程与fork
</code></pre>
<blockquote></blockquote>
<h3 id="part-6-advanced-io"><a class="markdownIt-Anchor" href="#part-6-advanced-io"></a> <strong>Part 6: Advanced IO</strong></h3>
<p>非阻塞IO – 阻塞IO<br />
补充：有限状态机编程</p>
<blockquote></blockquote>
<pre><code>1. 非阻塞IO
    简单流程：自然流程是结构化的
    复杂流程：自然流程不是结构化的

2. IO 多路转接
    select(); --- 古老
        以事件（读，写，异常）为单位，来组织文件描述符
        缺陷：监视现场和监视结果是放在同一空间，只要select 有返回，除了你感兴趣的事件，  
        其他的集合都清空，需要重新布置监视现场。监视的事件太单一。

        void FD_CLR(int fd, fd_set *set); ---&gt; 删除
        int  FD_ISSET(int fd, fd_set *set); ---&gt; 测试
        void FD_SET(int fd, fd_set *set); ---&gt; 添加
        void FD_ZERO(fd_set *set); ---&gt; 清空

    poll(); --- 可移植，wait for some events on a fd.
        以文件描述符为单位，来组织事件

    epoll(); --- linux 方言
        epoll_create();
        epoll_ctl();
        epoll_wait();

3. 其他读写函数
    readv();
    writev();

4. 存储映射IO
    mmap(); ---&gt; 映射
    munmap(); ---&gt; 解除映射

5. 文件锁
    fcntl()
    lockf()
    flock()
</code></pre>
<blockquote></blockquote>
<h3 id="part-7-ipc"><a class="markdownIt-Anchor" href="#part-7-ipc"></a> <strong>Part 7: IPC</strong></h3>
<blockquote></blockquote>
<pre><code>1.管道
    内核提供，单工（一端为读，一端为写），自同步机制
    匿名管道
        pipe()
    命名管道
        mkfifo()


2. XSI -&gt; SysV
    IPC -&gt; Inter-Process Communication
    主动端：先发包的一方
    被动端：先发包的一方（先运行）

    key:ftok 

    Message Queues

    Shared Memory Segments

    Semaphore Arrays

    以上创建方法都是：xxxget xxxop xxxctl for exmaple:man msgget msgop msgctl semget 
    semop semctl man shemget ...


3. 网络套接字socket
    讨论：跨主机的传输要注意的问题
        1 字节序问题：
            大端模式：就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。
            小端模式：就是低字节排放在内存的低地址端，高位字节排放在内存的高地址端。
            主机字节序：host
            网络字节序：network
            解决：_to__: htons, htols, ntohs, ntohs
</code></pre>
<p><img src="/images/big_endian.png" alt="大端存储" /><br />
<img src="/images/little_endian.png" alt="小端存储" /></p>
<pre><code>        2 对齐：
            <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
            解决：不对齐（让编译器不对齐）

        3 类型长度问题：
            int
            char
            解决：int32_t, uint32_t, int64_t int8_t uint8_t

    Socket 是什么？

    报式套接字：
        被动端：(先运行)
            1 取得socket
            2 给socket 绑定地址（本地地址、端口）
            3 收/发 消息
            4 关闭socket
        主动端：
            1 取得socket
            2 给socket 绑定地址（可省略，系统会自动分配一个端口）
            3 发/收 消息
            4 关闭socket

        UDP 包的推荐长度是512byte， 报头长度为8byte.
        socket()
        bind()
        sendto()
        recvfrom()
        inet_pton()
        inet_ntop()
        setsockopt()
        getsockopt()

        多点通讯：广播（全网广播，子网广播）， 多播/组播

    流式套接子：
        C 端（主动端）
            1 获得socket
            2 给socket 绑定地址（可省略）
            3 发送连接
            4 收/发消息
            5 关闭


        S 端（被动端）
            1 获得socket
            2 给socket 绑定地址
            3 将socket 置为监听模式
            4 接受链接
            5 收/发消息
            6 关闭
</code></pre>
<blockquote></blockquote>
]]></content>
      <tags>
        <tag>CS</tag>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2023/05/29/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>前言：熟练掌握常用的Linux命令，可以提高生产力，研究问题的能力。常用命令包括：文件操作，系统查看，GCC命令，GDB调试等。这些都在系统开发中起到很重要的作用。</p>
<span id="more"></span>
<h2 id="linux常用命令"><a class="markdownIt-Anchor" href="#linux常用命令"></a> Linux常用命令</h2>
<h3 id="file-文件常用命令"><a class="markdownIt-Anchor" href="#file-文件常用命令"></a> file-文件常用命令</h3>
<ul>
<li>查看</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配查找文件</span></span><br><span class="line"><span class="built_in">ls</span> /etc/a*.conf</span><br><span class="line"><span class="comment"># 当前目录递归查找</span></span><br><span class="line">grep <span class="string">&quot;#define container_of&quot;</span> -R .</span><br><span class="line"><span class="comment"># 比较文件的差异</span></span><br><span class="line">diff /etc/service tmp</span><br><span class="line"><span class="comment"># 查看文件内容 | 统计file文件内容的行数</span></span><br><span class="line"><span class="built_in">cat</span> file</span><br><span class="line"><span class="built_in">cat</span> file | <span class="built_in">wc</span> -l</span><br><span class="line"><span class="comment"># 查看文件最后几行</span></span><br><span class="line"><span class="built_in">tail</span> -n 10 out.log (-f 动态模式)</span><br><span class="line"><span class="comment"># 动态查看文件最后几行内容</span></span><br><span class="line"><span class="built_in">tail</span> -n 10 out.log -f</span><br><span class="line"><span class="comment"># 较好的方式显示文件的大小</span></span><br><span class="line"><span class="built_in">ls</span> -lh </span><br><span class="line"><span class="comment"># 查看文件的类型</span></span><br><span class="line">file a.out </span><br><span class="line"><span class="comment"># 分析文件/目录占用磁盘空间大小 默认是以k字节为单位</span></span><br><span class="line"><span class="built_in">du</span> abc.c/directory </span><br></pre></td></tr></table></figure>
<ul>
<li>修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建多级目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p a/b/c </span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line"><span class="built_in">touch</span> a.txt</span><br><span class="line"><span class="comment"># 创建软链接</span></span><br><span class="line">1n -s /root/.acme.sh/acme.sh /usr/local/bin/acme.sh</span><br><span class="line"><span class="comment"># 更改文件的权限 常用权限664可读可写可执行</span></span><br><span class="line"><span class="built_in">chmod</span> a+x a.out </span><br><span class="line"><span class="comment"># 将 a.out文件的所有者更改为 root 用户</span></span><br><span class="line"><span class="built_in">chown</span> root a.out</span><br><span class="line"><span class="comment"># 设置文件或目录的 setuid 位。当一个带有 setuid 位的文件或目录被执行时，</span></span><br><span class="line"><span class="comment"># 它会以该文件或目录的所有者的权限而不是执行它的用户的权限来运行。</span></span><br><span class="line"><span class="comment"># 这对于需要以提升的权限运行但不能作为 root 运行的程序非常有用。</span></span><br><span class="line"><span class="comment"># 如果您想允许用户运行需要 root 权限的程序而不给他们访问 root 帐户，</span></span><br><span class="line"><span class="comment"># 可以在程序文件上设置 setuid 位。</span></span><br><span class="line"><span class="built_in">chmod</span> u+s mysu  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="system-系统常用命令"><a class="markdownIt-Anchor" href="#system-系统常用命令"></a> system-系统常用命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前用户的资源限制，如最大打开文件数、最大进程数等等</span></span><br><span class="line"><span class="built_in">ulimit</span> -a </span><br><span class="line"><span class="comment"># 看可执行文件的系统调用是如何发生的</span></span><br><span class="line">strace ./a.out </span><br><span class="line"><span class="comment"># 查看调用时间</span></span><br><span class="line"><span class="keyword">time</span> ./a.out   </span><br><span class="line"><span class="comment"># 显示所有的环境变量</span></span><br><span class="line"><span class="built_in">export</span> </span><br><span class="line"><span class="comment"># 显示进程,及进程下子进程</span></span><br><span class="line">ps axf</span><br><span class="line"><span class="comment"># 显示进程不显示递进关系</span></span><br><span class="line">ps axm</span><br><span class="line"><span class="comment"># 显示进程的状态信息，包括进程的 PID、PPID、CPU 占用率、内存占用率等等</span></span><br><span class="line">ps axj</span><br><span class="line"><span class="comment"># 显示进程和线程</span></span><br><span class="line">ps ax -L</span><br><span class="line"><span class="comment"># 打印系统进程树</span></span><br><span class="line">pstree </span><br><span class="line"><span class="comment"># 查看程序的进程空间的分布</span></span><br><span class="line">pmap p_id</span><br><span class="line"><span class="comment"># list all signal</span></span><br><span class="line"><span class="built_in">kill</span> -l</span><br><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> pid</span><br><span class="line"><span class="comment"># 查看系统进程间通信的信息</span></span><br><span class="line">ipcs </span><br></pre></td></tr></table></figure>
<h3 id="network-网络查看"><a class="markdownIt-Anchor" href="#network-网络查看"></a> network-网络查看</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看网络环境</span></span><br><span class="line">ip addr </span><br><span class="line"><span class="comment"># 查看网卡信息</span></span><br><span class="line">ip add sh</span><br><span class="line"><span class="comment"># 查看ip路由表的命令</span></span><br><span class="line">ip ro sh</span><br><span class="line"><span class="comment"># 添加默认路由</span></span><br><span class="line">ip ro add default via 192.168.1.125</span><br><span class="line"><span class="comment"># local pc udp info</span></span><br><span class="line">netstat -anu</span><br><span class="line"><span class="comment"># local pc tcp info</span></span><br><span class="line">netstat -ant</span><br></pre></td></tr></table></figure>
<h3 id="gcc-编译常用命令"><a class="markdownIt-Anchor" href="#gcc-编译常用命令"></a> gcc-编译常用命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预处理</span></span><br><span class="line">gcc -E hello.c  </span><br><span class="line"><span class="comment"># 将预处理结果保存在hello.i文件中</span></span><br><span class="line">gcc -E hello.c &gt; hello.i</span><br><span class="line"><span class="comment"># 将预处理结果编译成汇编文件</span></span><br><span class="line">gcc -S hello.i</span><br><span class="line"><span class="comment"># 将汇编文件编译成目标文件</span></span><br><span class="line">gcc -c hello.s </span><br><span class="line"><span class="comment"># 将目标文件链接成可执行文件</span></span><br><span class="line">gcc hello.o -o hello</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">gcc hello.c </span><br><span class="line"><span class="comment"># 编译并生成可执行文件</span></span><br><span class="line">gcc hello.c -o myhello</span><br><span class="line"><span class="comment"># 编译并生成可执行文件(makefile)</span></span><br><span class="line">make hello</span><br><span class="line"><span class="comment"># 反汇编 汇编码-d</span></span><br><span class="line">objdump -d a.out</span><br><span class="line"><span class="comment"># 追踪gcc a.c 的过程，包括gcc 启动的其他程序</span></span><br><span class="line">strace -f gcc a.c </span><br><span class="line">strace -f gcc a.c 2&gt;&amp;1 | grep execve</span><br><span class="line"><span class="comment"># 移除调试信息</span></span><br><span class="line">strip test_sqlist </span><br></pre></td></tr></table></figure>
<h3 id="gdb-调试器常用命令"><a class="markdownIt-Anchor" href="#gdb-调试器常用命令"></a> gdb-调试器常用命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 载入程序</span></span><br><span class="line">gdb a.out </span><br><span class="line"><span class="comment"># 开始运行程序</span></span><br><span class="line">run/r	</span><br><span class="line"><span class="comment"># 运行第一条指令</span></span><br><span class="line">starti </span><br><span class="line"><span class="comment"># 查看汇编代码</span></span><br><span class="line">layout asm </span><br><span class="line"><span class="comment"># 单步查看-&gt;汇编单步</span></span><br><span class="line">si </span><br><span class="line"><span class="comment"># 查看寄存器代码</span></span><br><span class="line">info registers </span><br><span class="line"><span class="comment"># 打印系统调用栈</span></span><br><span class="line">bt </span><br><span class="line"><span class="comment"># 打印可执行程序的进程号</span></span><br><span class="line">info inferiors</span><br><span class="line"><span class="comment"># 打印寄存器rdx的值</span></span><br><span class="line"><span class="built_in">print</span>/p <span class="variable">$rdx</span> </span><br><span class="line"><span class="comment"># 开始记录</span></span><br><span class="line">target record-full </span><br><span class="line"><span class="comment"># 观察寄存器rax的值</span></span><br><span class="line">watch <span class="variable">$rax</span></span><br><span class="line"><span class="comment"># 在地址7c00处设置监视点</span></span><br><span class="line">watch *0x7c00 </span><br><span class="line"><span class="comment"># 单步回退查看-&gt;汇编单步</span></span><br><span class="line">rsi </span><br><span class="line"><span class="comment"># 调试源代码</span></span><br><span class="line">layout src</span><br><span class="line"><span class="comment"># 可以使其他处理器（线程不要干扰）</span></span><br><span class="line"><span class="built_in">set</span> scheduler-locking on </span><br><span class="line"><span class="comment"># switching to thread 1</span></span><br><span class="line">thread 1</span><br></pre></td></tr></table></figure>
<h2 id="vps科学上网"><a class="markdownIt-Anchor" href="#vps科学上网"></a> vps+科学上网</h2>
<h3 id="v2ray和xray"><a class="markdownIt-Anchor" href="#v2ray和xray"></a> v2ray和xray</h3>
<ul>
<li>安装v2ray和xray</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> &lt;(curl -sL https://multi.netlify.app/v2ray.sh) --zh </span><br></pre></td></tr></table></figure>
<ul>
<li>关闭防火墙</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos 停止防火墙</span></span><br><span class="line">systemctl stop firewalld.service </span><br><span class="line"><span class="comment"># centos 禁用防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"><span class="comment"># Debian禁用ufw防火墙</span></span><br><span class="line"><span class="built_in">sudo</span> ufw <span class="built_in">disable</span> </span><br></pre></td></tr></table></figure>
<h3 id="安装tls"><a class="markdownIt-Anchor" href="#安装tls"></a> 安装tls</h3>
<ul>
<li>安装acme证书</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>
<ul>
<li>安装socat</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install socat</span><br></pre></td></tr></table></figure>
<ul>
<li>添加软链接</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/bin</span><br><span class="line">1n -s/root/.acme.sh/acme.sh /usr/local/bin/acme.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>设置默认的CA</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh --set-default-ca --server letsencrypt</span><br></pre></td></tr></table></figure>
<ul>
<li>开放80端口：非必需</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw allow 80</span><br></pre></td></tr></table></figure>
<ul>
<li>申请证书ipv4默认方式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d freeqing.dpdns.org --standalone -k ec-256</span><br></pre></td></tr></table></figure>
<ul>
<li>申请证书ipv6方式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh --issue -d freeqing.dpdns.org --standalone -k ec-256 --listen-v6 --insecure</span><br></pre></td></tr></table></figure>
<ul>
<li>安装或复制证书到特定位置，非必须</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh --installcert -d freeqing.dpdns.org --ecc --key-file  /etc/v2ray/server.key --fullchain-file /etc/v2ray/server.crt</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CS</tag>
        <tag>Linux</tag>
        <tag>工具命令</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2023/05/29/network-%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>前言：计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。计算机网络的基础知识，包括TCP / UDP协议、Http协议、Socket等方面。</p>
<span id="more"></span>
<h3 id="课程主要内容"><a class="markdownIt-Anchor" href="#课程主要内容"></a> <strong>课程主要内容</strong></h3>
<ul>
<li>计算机网络和互联网</li>
<li>应用层</li>
<li>传输层</li>
<li>网络层：数据平面</li>
<li>网络层：控制平面</li>
<li>数据链路和局域网</li>
<li>网络安全</li>
<li>无线和移动网络</li>
<li>多媒体网络</li>
<li>网络管理</li>
</ul>
<h3 id="chapter-1概论"><a class="markdownIt-Anchor" href="#chapter-1概论"></a> <strong>Chapter 1:概论</strong></h3>
<ol>
<li>什么是Internet?</li>
</ol>
<blockquote></blockquote>
<pre><code>节点：
    主机以及其上运行的应用程序
    路由器、交换机等网络交换设备

边：通信链路
    接入网络链路：主机连接到互联网的链路
    主干链路：路由器间的链路

协议：
    协议定义了在两个或多个通信实体之间交换的报文格式和次序，以及在报文传输和/或接受或其他事件方面所采用的动作
</code></pre>
<blockquote></blockquote>
<ol start="2">
<li>网络结构</li>
</ol>
<blockquote></blockquote>
<pre><code>网络边缘：
    主机
    应用程序（客户端和服务器）

网络核心：
    互联者的路由器
    网络的网络

    数据怎样通过网络进行传输？
    通信网络分为：
        电路交换：通常被传统电话网络采用
            FDM ---&gt; 频分
            TMD ---&gt; 时分


        分组交换：以分组为单位存储-转发方式
            网络带宽资源不再分分为一个个片，传输时使用全部带宽。
            主机之间传输的数据分为一个个分组
            资源共享，按需使用:
                存储-转发：分组每次移动一跳
                在转发之前，节点必须存储整个分组
                延迟比线路交换要大
                排队时间
            适合对于突发式数据传输
            过度使用会造成网络拥塞：分组丢失和延时

            分组交换网络：
                虚电路网络
                数据报网络


接入网、物理媒体：
    有线或者无线通信链路
</code></pre>
<blockquote></blockquote>
<ol start="3">
<li>Internet 结构和ISP</li>
</ol>
<blockquote></blockquote>
<pre><code>第一层 ISP (如 UUNet, BBN/Genuity, Sprint,AT&amp;T )国家 / 国际覆盖,速率极高
第二层 ISP: 更小些的 ( 通常是区域性的 ) ISP
第三层 ISP 与其他本地 ISP
</code></pre>
<blockquote></blockquote>
<ol start="4">
<li>分组延迟、丢失和吞吐量<br />
分组丢失和延时是怎样发生的？</li>
</ol>
<blockquote></blockquote>
<pre><code>四种分组延时：
1）节点处理延时
2）排队延时
3）传输延时
4）传播延时

分组丢失：
链路的队列缓冲区容量有限
当分组到达一个满的队列时，该分组将会丢失
丢失的分组可能会被前一个节点或源端系统重传，或根本不重传

吞吐量：
在源端和目标端之间传输的速率（数据量/单位时间）

瓶颈链路：
端到端路径上，限制端到端吞吐的链路
</code></pre>
<blockquote></blockquote>
<ol start="5">
<li>协议层次和服务模型</li>
</ol>
<blockquote></blockquote>
<pre><code>层次化方式实现复杂网络功能 :
    将网络复杂的功能分层功能明确的层次,每一层实现了其中一个或一
    组功能,功能中有其上层可以使用的功能:服务

    本层协议实体相互交互执行本层的协议动作,目的是实现本层功能,
    通过接口为上层提供更好的服务

    在实现本层协议的时候,直接利用了下层所提供的服务

    本层的服务:借助下层服务实现的本层协议实体之间交互带来的新功
    能(上层可以利用的) + 更下层所提供的服务

面向连接的服务 ( Connection-oriented Service)
    连接 (Connection) :两个通信实体为进行通信而建立的一种结合
    面向连接的服务通信的过程:建立连接,通信,拆除连接
    面向连接的服务的例子:网络层的连接被成为虚电路
    适用范围:对于大的数据块要传输 ; 不适合小的零星报文
    特点:保序
服务类型 :
    可靠的信息流 传送页面 ( 可靠的获得 , 通过接收方的确认 )
    可靠的字节流 远程登录
    不可靠的连接 数字化声音

服务与协议的区别
    服务 (Service) :低层实体向上层实体提供它们之间的通信的能力,是通过原语 (primitive) 来操作的,垂直
    协议 (protocol) :对等层实体 (peer entity) 之间在相互通信的过程中,需要遵循的规则的集合,水平
服务与协议的联系
    本层协议的实现要靠下层提供的服务来实现
    本层实体通过协议为上层提供更高级的服务


Internet 协议栈
分层处理和实现复杂系统的好处?
应用层 : 网络应用
    为人类用户或者其他应用进程提供网络应用服务
    FTP, SMTP, HTTP,DNS

传输层 : 主机之间的数据传输
    在网络层提供的端到端通信基础上,细分为进程到进程,将不可靠的通信变成可靠地通信
    TCP, UDP

网络层 : 为数据报从源到目的选择路由
    主机主机之间的通信,端到端通信,不可靠
    IP, 路由协议对于其他层次而言是透明的

链路层 : 相邻网络节点间的数据传输
    2 个相邻 2 点的通信,点到点通信,可靠或不可靠
    点对对协议 PPP, 802.11(wifi), Ethernet
物理层 : 在线路上传送 bit

各层次的的协议数据单元
    应用层：报文（message）
    传输层：报文段（segment）:TCP段，UDP数据报
    网络层：分组packet(如果无连接方式：数据报datagram)
    链路层：帧（frame)
    物理层：位（bit)
</code></pre>
<blockquote></blockquote>
<ol start="6">
<li>历史</li>
</ol>
<blockquote></blockquote>
<pre><code>1961---1972：早期的分组交换概念
1972---1980：专用网络和网络互联
    Cerf and Kahn 网络互联原则：
        极简、自治
        尽力而为（best effort)服务模型
        无状态的路由器
        分布控制
1980---1990： 体系结构变化，网络数量激增，应用丰富
1990---2000： 商业化，web，新的应用
2005---2022： 移动互联网
</code></pre>
<blockquote></blockquote>
<h3 id="chapter-2-应用层"><a class="markdownIt-Anchor" href="#chapter-2-应用层"></a> <strong>Chapter 2: 应用层</strong></h3>
<ol>
<li>
<p>网络应用的体系结构</p>
<ul>
<li>C/S</li>
<li>P2P</li>
<li>混合体：客户-服务器和对等体系结构</li>
</ul>
</li>
<li>
<p>TCP之上的socket<br />
对于使用面向连接服务TCP的应用而言，套接字是4元组的一个具有本地意义的标识</p>
<ul>
<li>4元组（源IP，源port,目标IP，目标port）</li>
<li>唯一的指定了一个会话（2个进程之间的会话关系）</li>
<li>应用使用这个标识，与远程的应用进程通信</li>
<li>不必在每一个报文的发送都要指定这4元组</li>
<li>简单、便于管理</li>
</ul>
</li>
<li>
<p>UDP之上的socket<br />
对于使用无连接服务UDP的应用而言，套接字是2元组的一个具体本地意义的标识</p>
<ul>
<li>2元组：IP， port (源端指定)</li>
<li>UDP套接字指定了应用所在的一个端节点（end point)</li>
<li>在发送数据报时，采用创建好的本地套接字（标识ID），就不必在发送每个报文中指明自己所采用的IP和port</li>
<li>但是在发送报文时，必须指定对方的ip和port</li>
</ul>
</li>
<li>
<p>Http：超文本传输协议<br />
<img src="/images/http_request.png" alt="http request" title="request" /><br />
<img src="/images/http_response.png" alt="http response" title="response" /></p>
</li>
<li>
<p>cookies 维护状态</p>
</li>
<li>
<p>web 缓存</p>
</li>
<li>
<p>FTP： 文件传输协议</p>
</li>
<li>
<p>Email</p>
<ul>
<li>用户代理</li>
<li>邮件服务器</li>
<li>简单邮件传输协议：SMTP</li>
</ul>
</li>
<li>
<p>DNS（Domain Name System)</p>
<ul>
<li>DNS的主要思路：
<ul>
<li>分层的、基于域的命名机制</li>
<li>若干分布式的数据库完成名字到IP地址的转换</li>
<li>运行在UDP之上端口号为53的应用服务</li>
<li>核心的Internet功能，但以应用层协议实现（在网络边缘处理复杂性）</li>
</ul>
</li>
<li>DNS主要目的：
<ul>
<li>实现主机名-IP地址的转换</li>
<li>主机别名到规范名字的转换</li>
<li>负载均衡</li>
</ul>
</li>
</ul>
</li>
<li>
<p>p2p<br />
纯P2P架构</p>
<ul>
<li>没有（或极少）一直运行的服务器</li>
<li>任意端系统都可以直接通信</li>
<li>利用peer 的服务能力</li>
<li>Peer 节点间歇上网，每次IP地址都有可能变化</li>
<li>例子：
<ul>
<li>文件分发（BitTorrent）</li>
<li>流媒体</li>
<li>VoIP(Skype)</li>
</ul>
</li>
</ul>
</li>
<li>
<p>CDN（Content Distribution Networks)</p>
<ul>
<li>在CDN节点中存储内容的多个拷贝
<ul>
<li>e.g. Netflix stores copies of MandMen</li>
</ul>
</li>
<li>用户从CDN中请求内容
<ul>
<li>重定向到最近拷贝，请求内容</li>
<li>如果网络路径拥塞，可能选择不同的拷贝</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Socket<br />
<strong>分布式应用进程之间的门，传输层协议提供的端到端服务接口， 2种传输层服务的Socket 类型</strong></p>
</li>
</ol>
<ul>
<li>TCP：可靠的，字节流的服务
<ul>
<li>从一个进程向另一个进程可靠地传输字节流</li>
<li>TCP 在客户端和服务器进程之间提供了可靠的、字节流(管道)服务</li>
<li>TCP套接字：四元组本地标识：
<ul>
<li>源IP地址</li>
<li>源端口号</li>
<li>目的IP地址</li>
<li>目的端口号</li>
</ul>
</li>
<li>解复用：接收主机用这四个值来将数据报定位到合适的套接字</li>
<li>服务器能够在一个TCP端口上同时支持多个TCP套接字：
<ul>
<li>每个套接字由其四元组标识（有不同的源IP和源Port)</li>
</ul>
</li>
<li>Web服务对每个连接客户端有不同的套接字</li>
</ul>
</li>
<li>UDP：不可靠（数据UDP数据报）服务
<ul>
<li>没有握手</li>
<li>发送端在每个报文中明确指定目标的IP地址和端口</li>
<li>服务器必须从受到的分组中提取出发送端IP地址和端口号</li>
<li>传诵的数据可能乱序，也可能丢失</li>
</ul>
</li>
</ul>
<h3 id="chapter-3-传输层"><a class="markdownIt-Anchor" href="#chapter-3-传输层"></a> <strong>Chapter 3: 传输层</strong></h3>
<ol>
<li>多路复用/解复用
<ul>
<li>在发送端主机多路复用
<ul>
<li>从多个套接字接收来自多个进程的报文，根据套接字对应的IP地址和端口号等信息对报文段用头部加以封装（该头部信息用于以后的解复用）</li>
</ul>
</li>
<li>在接受方主机多路解复用
<ul>
<li>根据报文段的头部信息中的IP地址和端口号将接收到的报文段发给正确的套接字（和对应的应用进程）</li>
</ul>
</li>
</ul>
</li>
<li>UDP：用户数据报协议</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">header</th>
<th style="text-align:left">16位源端口号</th>
<th style="text-align:right">16位目的端口号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left">16位UDP长度</td>
<td style="text-align:right">16位UDP校验和</td>
</tr>
<tr>
<td style="text-align:center">body</td>
<td style="text-align:left">xxx</td>
<td style="text-align:right">xxx</td>
</tr>
<tr>
<td style="text-align:center">为什么要有UDP？</td>
<td style="text-align:left"></td>
<td style="text-align:right"></td>
</tr>
</tbody>
</table>
<ul>
<li>不建立连接（会增加延时）</li>
<li>简单：在发送端和接受端没有连接状态</li>
<li>报文段的头部很小（开销小）</li>
<li>无拥塞控制和流量控制，UDP可以尽可能快的发送报文段
<ul>
<li>应用 -&gt; 传输的速率 = 主机 -&gt; 网络的速率</li>
</ul>
</li>
</ul>
<ol start="3">
<li>
<p>可靠数据传输（rdt协议）的原理</p>
<ul>
<li>rdt在应用层、传输层和数据链路层都很重要</li>
<li>是网络Top10问题之一</li>
<li>信道的不可靠性决定了可靠数据传输协议（rdt）的复杂性</li>
</ul>
</li>
<li>
<p>流水线协议</p>
<ul>
<li>流水线：允许发送方在未得到对方确认的情况下一次发送多个分组
<ul>
<li>必须增加序号的范围：用多个bit 表示分组的序号</li>
<li>在发送方/接收方要有缓冲区</li>
<li>两种通用的流水线协议：回退N步（GBN)和选择重传（SR）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>通用：滑动窗口（slide window）协议</p>
<ul>
<li>发送缓冲区
<ul>
<li>形式:内存中的一个区域,落入缓冲区的分组可以发送</li>
<li>功能:用于存放已发送,但是没有得到确认的分组</li>
<li>必要性:需要重发时可用</li>
</ul>
</li>
<li>发送缓冲区的大小:一次最多可以发送多少个未经确认的分组
<ul>
<li>停止等待协议 =1</li>
<li>流水线协议 &gt;1 ,合理的值,不能很大,链路利用率不能够超 100%</li>
</ul>
</li>
<li>发送缓冲区中的分组
<ul>
<li>未发送的:落入发送缓冲区的分组,可以连续发送出去;</li>
<li>已经发送出去的、等待对方确认的分组:发送缓冲区的分组只有得到确认才能删除</li>
</ul>
</li>
<li>接收窗口 (receiving window)= 接收缓冲区
<ul>
<li>接收窗口用于控制哪些分组可以接收;
<ul>
<li>只有收到的分组序号落入接收窗口内才允许接收</li>
<li>若序号在接收窗口之外,则丢弃;</li>
</ul>
</li>
<li>接收窗口尺寸 Wr=1 ,则只能顺序接收;</li>
<li>接收窗口尺寸 Wr&gt;1，则可以乱序接收</li>
</ul>
</li>
</ul>
</li>
<li>
<p>GBN 协议和 SR 协议的异同</p>
<ul>
<li>相同之处
<ul>
<li>发送窗口&gt;1</li>
<li>一次能够可发送多个未经确认的分组</li>
</ul>
</li>
<li>不同之处
<ul>
<li>GBN：接收窗口尺寸=1
<ul>
<li>接收端：接收窗口尺寸=1</li>
<li>发送端:从表现来看,一旦一个分组没有发成功,如: 0,1,2,3,4; 假如 1 未成功, 234 都发送出去了,要返回 1 再发送; GB1</li>
</ul>
</li>
<li>SR：接收窗口尺寸&gt;1
<ul>
<li>接收端：可以乱序接收</li>
<li>发送端:发送发送 0,1,2,3,4 ,一旦 1未成功, 2,3,4, 已发送,无需重发,选择性发送 1</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>TCP连接的建立<br />
<strong>连接的建立经历以下3个步骤，通常称为三次握手，如下图：</strong><br />
<img src="/images/tcp_three_handshake.png" alt="tcp three-way handshake" /></p>
</li>
</ol>
<ul>
<li>第一步：客户机的TCP首先向服务器的TCP发送一个连接请求报文段。这个特殊的报文段中不含应用层数据，其首部中的SYN标志位被置为1.另外，客户机会随机选择一个起始号seq=x（连接请求报文不携带数据，但要消耗一个序号）。</li>
<li>第二步：服务器的TCP收到连接请求报文段后，如同意建立连接，就向客户机发回确认，并为该TCP连接分配TCP缓存和变量。在确认报文段中，SYN和ACK位都被置为1，确认号字段的值为x+1，并且服务器随机产生起始序号seq=y(确认报文段不携带数据，但也要消耗一个序号)。</li>
<li>第三步：当客户机收到确认报文段后，还要向服务器给出确认，并且也要给该连接分配缓存和变量。这个报文段的ACK标志位被直为1，序号字段为x+1，确认号字段ack=y+1。该报文段可以携带数据，若不携带数据则不消耗序号。</li>
<li>总结：成功进行以上三步后，就建立了TCP连接，接下来就可以传送应用层数据。TCP提供的是全双工通信，因此通信双方的应用进程在任何时候都能发送数据。另外，值的值的注意的是，服务器端的资源是在完成第二次握手时分配的，而客户端资源是在完成第三次握手时分配的，这就使得服务器易于受到SYN洪范攻击。</li>
</ul>
<ol start="8">
<li>TCP连接的释放<br />
<strong>参与TCP连接的两个进程中的任何一个都能终止该连接。TCP连接释放的过程通常称为四次挥手，如下图：</strong><br />
<img src="/images/tcp_four_handshake.png" alt="tcp four-way handwake" /></li>
</ol>
<ul>
<li>第一步：客户机打算关闭连接时，向其TCP发送一个连接释放报文段，并停止发送数据，主动关闭TCP连接，该报文段的FIN标志位被置为1，seq=u，它等于前面已传送过的数据的最后一个字节的序号加1（FIN报文段即使不携带数据，也要消耗一个序号）。TCP是全双工的，即可以想象为一条TCP连接上有两个数据通路。发送FIN报文时，发送FIN的一端不能再发送数据，即关闭了其中一条数据通路，但双方还可以发送数据。</li>
<li>第二步：服务器收到连接释放报文段后即发出确认，确认号是ack=u+1，而这个报文段自己的序号是v，等于它前面已传送过的数据的最后一个字节的序号加1.此时，从客户机到服务器这个方向的连接就释放了，TCP连接处于半关闭状态。但服务器若发送数据，客户机仍要接收，即从服务器到客户机这个方向的连接并未关闭。</li>
<li>第三步：若服务器已经没有要向客户机发送的数据，就通知TCP释放连接，此时其发出FIN=1的连接释放报文段。</li>
<li>第四步：客户机收到连接释放报文段后，必须发出确认。在确认报文段中，ACK字段被置为1，确认号ack=w+1,序号seq=u+1.此时TCP连接还未释放，必须经过时间等待计时器设置的时间2MSL后，客户机才进入连接关闭的状态。</li>
</ul>
<p>9.对上述TCP连接建立和释放的总结如下：</p>
<ul>
<li>1)连接建立。分为3步：
<ul>
<li>SYN=1，seq=x.</li>
<li>SYN=1, ACK=1，seq=y, ack=x+1.</li>
<li>ACK=1, seq=x+1, ack=y+1.</li>
</ul>
</li>
<li>2)释放连接。分为4步：
<ul>
<li>FIN=1, seq=u.</li>
<li>ACK=1, seq=v, ack=u+1.</li>
<li>FIN=1, ACK=1, seq=w, ack=u+1.</li>
<li>ACK=1, seq=u+1, ack=w+1.</li>
</ul>
</li>
</ul>
<h3 id="chapter-4网络层"><a class="markdownIt-Anchor" href="#chapter-4网络层"></a> <strong>Chapter 4:网络层</strong></h3>
<ol>
<li>路由与转发</li>
</ol>
<ul>
<li>路由选择.按照复杂的分布式算法，根据从相邻路由器所得到的关于整个网络拓扑的变化情况，动态的改变所选择的路由。</li>
<li>分组转发。路由器根据转发表将用户的IP数据报从合适的端口转发出去。</li>
</ul>
<ol start="2">
<li>IP（Internet Protocol）</li>
</ol>
<ul>
<li>一个IP分组由首部和数据两个部分组成。首部前一部分的长度固定，共20B，是所有IP分组必须具有的。在首部固定部分的后面是一些可选字段，其长度可变，用来提供错误检测及安全等机制。IP数据报的格式如下图：<br />
<img src="/images/ip_datagram.png" alt="ip datagram " /></li>
<li>连接到因特网上的每台主机（或路由器）都分配一个32比特的全球唯一标识符，即IP地址。传统的IP地址是分类地址，分为ABCDE五类。无论哪种IP地址，都由网络号和主机号组成。其中网络号标志主机（或路由器）所连接到的网络。一个网络号在整个因特网范围内必须是唯一的。主机号标志该主机（或路由器）。一台主机号在它前面的网络号所指明的网络范围内必须是唯一的。由此可见，一个IP地址在整个因特网范围内是唯一的。<br />
<img src="/images/ip_addr_classified.png" alt="ip addr classified" /></li>
<li>在各类IP地址中，有些IP地址具有特殊用途，不用做主机的IP地址：
<ul>
<li>主机号全为0表示本网络本身，如C类-&gt;202.98.174.0</li>
<li>主机号全为1表示本网络的广播地址，又称直接广播地址，如：202.98.174.255</li>
<li>127.0.0.1保留为环路自检（Loopback Test）地址，此地址表示任意主机本身，目的地址为环回地址的IP数据报永远不会出现在任何网络上</li>
<li>32位全为0，即0.0.0.0表示本网络上的本主机</li>
<li>32位全为1，即255.255.255.255表示整个TCP/IP网络的广播地址，又称受限广播地址。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">网络类别</th>
<th style="text-align:center">最大可用网络数</th>
<th style="text-align:center">第一个可用的网络号</th>
<th style="text-align:center">最后一个可用的网络号</th>
<th style="text-align:center">每个网络中的最大主机数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">2<sup>7</sup> -2</td>
<td style="text-align:center">1</td>
<td style="text-align:center">126</td>
<td style="text-align:center">2<sup>24</sup> - 2</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">2<sup>14</sup> -1</td>
<td style="text-align:center">128.1</td>
<td style="text-align:center">191.255</td>
<td style="text-align:center">2<sup>16</sup> - 2</td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">2<sup>21 - 1</td>
<td style="text-align:center">192.0.1</td>
<td style="text-align:center">223.255.255</td>
<td style="text-align:center">2<sup>8</sup> - 2</td>
</tr>
</tbody>
</table>
<ul>
<li>A类地址可用的网络数为2<sup>7</sup> - 2,减2的原因是：
<ul>
<li>第一，网络号字段全为0的IP地址是保留地址，意思是本网络</li>
<li>第二，网络号为127的IP地址是换回测试地址</li>
</ul>
</li>
<li>B类地址的可用网络号数为2<sup>14</sup> - 1,减1的原因是128.0这个网络号不可指派的。</li>
<li>C类地址的可用网络号数为2<sup>21</sup> - 1,减1的原因是192.0.0这个网络号不可指派的。</li>
</ul>
]]></content>
      <tags>
        <tag>CS</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统-南大</title>
    <url>/2023/05/29/operating-system%E5%8D%97%E5%A4%A7/</url>
    <content><![CDATA[<p>前言：南大操作系统课程是蒋岩炎老师主讲，他在B站公开了课程，讲的非常强。在B站搜南京大学计算机操作系统就可找到。</p>
<span id="more"></span>
<h2 id="p1-操作系统概述-操作系统的历史学习建议"><a class="markdownIt-Anchor" href="#p1-操作系统概述-操作系统的历史学习建议"></a> P1: 操作系统概述 (操作系统的历史；学习建议)</h2>
<h4 id="1-why-为什么要学操作系统"><a class="markdownIt-Anchor" href="#1-why-为什么要学操作系统"></a> 1. (Why): 为什么要学操作系统？</h4>
<p>重走从无到有的发现过程</p>
<ul>
<li>基本思想、基本方法、里程碑、走过的弯路</li>
<li>最终目的：应用/创新</li>
<li>操作系统带你补完编程的技术体系</li>
<li>具有编写一切 “能写出来” 程序的能力 (具备阅读论文的能力)</li>
</ul>
<h4 id="2-what-到底什么是操作系统"><a class="markdownIt-Anchor" href="#2-what-到底什么是操作系统"></a> 2. (What): 到底什么是操作系统？</h4>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Operating System: A body of software, in fact, that is responsible for making it   </span><br><span class="line">easy to run programs (even allowing you to seemingly run many at the same time),   </span><br><span class="line">allowing programs to share memory, enabling programs to interact with devices,   </span><br><span class="line">and other fun stuff like that. (OSTEP)    </span><br></pre></td></tr></table></figure>
<p>理解操作系统:</p>
<blockquote>
<p>理解硬件(计算机)和软件(程序)的发展历史, 夹在中间的就是操作系统</p>
</blockquote>
<ul>
<li>1950s的操作系统</li>
<li>操作(operate)任务(jobs)的系统(system)</li>
<li>批处理系统 = 程序自动切换+库函数API</li>
<li>Disk Operating System(DOS)</li>
<li>操作系统开始出现设备，文件，任务等对象和API</li>
</ul>
<blockquote>
<p>今天的操作系统</p>
</blockquote>
<ul>
<li>通过虚拟化硬件资源为程序运行提供服务的软件。</li>
</ul>
<h4 id="3-how-怎么学操作系统"><a class="markdownIt-Anchor" href="#3-how-怎么学操作系统"></a> 3. (How): 怎么学操作系统？</h4>
<blockquote>
<p>学习操作系统：现代方法</p>
</blockquote>
<ol>
<li>读得懂的教科书和阅读材料</li>
</ol>
<ul>
<li><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/">Operating System: Three Easy Pieces</a></li>
</ul>
<ol start="2">
<li>问题驱动，用代码说话</li>
</ol>
<ul>
<li>Demo 小程序，各类系统工具(strace, gdb,…)的使用</li>
<li>xv6-risv, AbstractMachine</li>
<li>RTFM, STFW，， RTFSC(F can be a colorful word)</li>
</ul>
<h4 id="4-prerequisites"><a class="markdownIt-Anchor" href="#4-prerequisites"></a> 4. Prerequisites</h4>
<blockquote>
<p>计算机专业学生必须具备的核心素质。</p>
</blockquote>
<ul>
<li>是一个合格的操作系统用户</li>
<li>会 STFW/RTFM 自己动手解决问题</li>
<li>不怕使用任何命令行工具</li>
<li>vim, tmux, grep, gcc, binutils, …</li>
<li>不怕写代码</li>
<li>能管理一定规模 (数千行) 的代码</li>
<li>能在出 bug 时默念 “机器永远是对的、我肯定能调出来的”</li>
<li>然后开始用正确的工具/方法调试</li>
</ul>
<h4 id="5-学术诚信-academic-integrity"><a class="markdownIt-Anchor" href="#5-学术诚信-academic-integrity"></a> 5. 学术诚信 (Academic Integrity)</h4>
<blockquote>
<p>Academic integrity 不是底线，而是 “自发的要求”</p>
</blockquote>
<ul>
<li>对 “不应该做的事情” 有清楚的认识</li>
<li>不将代码上传到互联网</li>
<li>主动不参考别人完成的实验代码</li>
<li>不使用他人测试用例 (depends)</li>
<li>有些行为可能使你得到分数，但失去应有的训练</li>
</ul>
<blockquote>
<p>一些过去的例子</p>
</blockquote>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/40568346">代码抄袭：那些让985学生沉默，211学生流泪的真相</a></li>
<li>我们也在 Academic Integrity 方面有一些考虑</li>
</ul>
<h4 id="6-成为-power-user"><a class="markdownIt-Anchor" href="#6-成为-power-user"></a> 6. 成为 Power User</h4>
<blockquote>
<p>感到 Linux/PowerShell/… 很难用？</p>
</blockquote>
<ul>
<li>没有建立信心、没有理解基本逻辑
<ul>
<li>计算机科学自学指南</li>
<li>没有找对材料/没有多问 “能不能再做点什么”</li>
<li>Baidu v.s. Google/Github/SO v.s. ChatGPT</li>
<li>没有用对工具 (man v.s. tldr; 该用 IDE 就别 Vim)</li>
<li>过了入门阶段，都会好起来</li>
</ul>
</li>
<li>本章代码请参考github: <a href="https://github.com/lsqyling/OperatingSys_NJ/tree/main/part_01">操作系统-南大-part_01</a></li>
</ul>
<hr />
<h2 id="p2-应用视角的操作系统-程序的状态机模型编译优化"><a class="markdownIt-Anchor" href="#p2-应用视角的操作系统-程序的状态机模型编译优化"></a> P2: 应用视角的操作系统 (程序的状态机模型；编译优化)</h2>
<blockquote>
<p>本讲内容：指令序列和高级语言的状态机模型；回答以下问题：</p>
</blockquote>
<ul>
<li>什么是软件 (程序)？</li>
<li>如何在操作系统上构造最小/一般/图形界面应用程序？</li>
<li>什么是编译器？编译器把一段程序翻译成什么样的指令序列才算 “正确”？</li>
</ul>
]]></content>
      <tags>
        <tag>CS</tag>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/2023/05/28/pco-%E8%AE%A1%E7%BB%84%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>前言：计算机组成原理是计算机科学的一门基础课程，主要研究计算机的硬件系统，包括计算机的基本组成、指令系统、CPU设计、存储器层次结构、总线结构、I/O系统等方面。</p>
<span id="more"></span>
<h1 id="第一章计算机系统概述"><a class="markdownIt-Anchor" href="#第一章计算机系统概述"></a> 第一章：计算机系统概述</h1>
<h2 id="111-计算机硬件的发展"><a class="markdownIt-Anchor" href="#111-计算机硬件的发展"></a> 1.1.1 计算机硬件的发展</h2>
<p>1946 年世界上第一台电子数字计算机（ENIAC）问世以来，计算机的发展经历了四代。</p>
<blockquote>
<ol>
<li>电子管时代（1946-1957)</li>
<li>晶体管时代（1958-1964）</li>
<li>中小规模集成电路时代（1965-1971）</li>
<li>超大规模集成电路（1972-至今）</li>
</ol>
</blockquote>
<h2 id="112-计算机软件的发展"><a class="markdownIt-Anchor" href="#112-计算机软件的发展"></a> 1.1.2 计算机软件的发展</h2>
<blockquote>
<ul>
<li>机器语言—&gt; 汇编语言—&gt; 面向问题的高级语言</li>
<li>操作系统方面, Windows, UNIX, Linux</li>
</ul>
</blockquote>
<h2 id="113-计算机的分类和发展方向"><a class="markdownIt-Anchor" href="#113-计算机的分类和发展方向"></a> 1.1.3 计算机的分类和发展方向</h2>
<p>计算机按指令和数据流分类：</p>
<blockquote>
<ol>
<li>单指令和单数据流（SISD), 即传统<strong>冯诺依曼体系结构</strong>。</li>
<li>单指令和多数据流（SIMD), 包括阵列处理器和向量处理器系统。</li>
<li>多指令和单数据流（MISD), 这种计算机实际不存在。</li>
<li>多指令和多数据流（MIMD), 包括多处理器和多计算机系统。</li>
</ol>
</blockquote>
<h2 id="114-习题精选"><a class="markdownIt-Anchor" href="#114-习题精选"></a> 1.1.4 习题精选</h2>
<p><em>解释程序的特点是翻译一句执行一句，边翻译边执行；由高级语言转化为汇编语言的过程称为编译，把汇编语言源程序翻译为机器语言程序的过程称为汇编。</em></p>
<h2 id="121-计算机系统的组成"><a class="markdownIt-Anchor" href="#121-计算机系统的组成"></a> 1.2.1 计算机系统的组成</h2>
<blockquote>
<p>硬件系统和软件系统共同构成了一个完成的计算机系统。</p>
</blockquote>
<h2 id="122-计算机硬件的基本组成"><a class="markdownIt-Anchor" href="#122-计算机硬件的基本组成"></a> 1.2.2 计算机硬件的基本组成</h2>
<h3 id="1-早期的冯诺依曼机"><a class="markdownIt-Anchor" href="#1-早期的冯诺依曼机"></a> 1. 早期的冯诺依曼机</h3>
<p>冯诺依曼提出了<code>存储程序</code>的概念，<code>存储程序</code>的思想奠定了现代计算机的基本结构。</p>
<blockquote>
<p><code>存储程序</code>的概念是指令以代码的形式事先存入计算机的主存储器，然后按其在存储器中的首地址执行程序的第一条指令，以后按该程序的规定顺序执行其他指令，直至程序执行结束。<br />
<img src="/images/cs_vn_s.png" alt="典型的冯诺依曼计算机结构" /></p>
</blockquote>
<h3 id="2-现代计算机组织结构"><a class="markdownIt-Anchor" href="#2-现代计算机组织结构"></a> 2. 现代计算机组织结构</h3>
<p>现代计算机已发展为以存储器为中心，使I/O操作尽可能的绕过CPU,直接在I/O设备和存储器之间完成，以提高系统的整体运行效率。<br />
<img src="/images/cs_modern_s.png" alt="以存储器为中心的计算机结构" /></p>
<h3 id="3-计算机的功能部件"><a class="markdownIt-Anchor" href="#3-计算机的功能部件"></a> 3. 计算机的功能部件</h3>
<blockquote>
<p>(1) 输入设备<br />
(2) 输出设备<br />
(3) 存储器</p>
<ul>
<li>主存储器：cpu能够直接访问，简称<strong>主存</strong>。它由许多存储单元组成可存储一串二进制代码，称这串代码为存储字，称这串代码的位数为存储字长，存储字长可以是1B（8bit）或是字节的偶数倍。</li>
<li>MAR,MDR虽然是存储器的一部分，但在现代CPU中却存在于CPU中，另外高速缓存Cache也存在CPU中。</li>
</ul>
<p>(4) 运算器<br />
(5) 控制器</p>
<ul>
<li>控制器是计算机的指挥中心，由程序计数器（PC),指令寄存器（IR）和控制单元（CU）组成。</li>
</ul>
<p>总结：现在计算机一般将运算器和控制器集成到同一个芯片上,合成中央处理器，简称CPU。CPU和主存储器构成主机，而计算机中除主机外的其他硬件装置(如I/O)统称为外设，外设主要包括外存和I/O设备。<br />
<img src="/images/cs_c_detail.png" alt="computer detail" title="细化的计算机组成框图" /></p>
</blockquote>
<h2 id="123-计算机软件分类"><a class="markdownIt-Anchor" href="#123-计算机软件分类"></a> 1.2.3 计算机软件分类</h2>
<blockquote>
<ol>
<li>系统软件和应用软件</li>
<li>三个级别的语言</li>
</ol>
</blockquote>
<h2 id="124-计算机的工作过程"><a class="markdownIt-Anchor" href="#124-计算机的工作过程"></a> 1.2.4 计算机的工作过程</h2>
<blockquote>
<ol>
<li>把程序和数据装入主存储器</li>
<li>从程序的起始地址运行程序</li>
<li>用程序的首地址从存储器中取出第一条指令，经过译码、执行步骤等控制计算机各功能部件协同运行，完成这条指令的功能，并计算下一条指令的地址。</li>
<li>用新得到指令地址继续读取第二条指令并执行，直到程序结束为止；每条指令都在取指、译码和执行的循环过程中完成的。<br />
取数指令为例说明信息流程如下:</li>
</ol>
<ul>
<li>取指令:PC—&gt;MAR—&gt;M—&gt;MDR—&gt;IR</li>
<li>分析指令:OP(IR)—&gt;CU</li>
<li>执行指令:Ad(IR)—&gt;MAR—&gt;M—&gt;MDR—&gt;ACC</li>
<li>(PC) + 1—&gt; PC</li>
</ul>
</blockquote>
<h2 id="125-计算机系统的多层次结构"><a class="markdownIt-Anchor" href="#125-计算机系统的多层次结构"></a> 1.2.5 计算机系统的多层次结构</h2>
<p><img src="/images/cs_mulit_level.png" alt="computer mulit level" /></p>
<h2 id="126-习题"><a class="markdownIt-Anchor" href="#126-习题"></a> 1.2.6 习题</h2>
<p><em>冯诺依曼机的基本工作方式是<code>控制流驱动方式</code>。<br />
<code>按地址访问并顺序执行指令</code>是冯诺依曼机工作方式的基本特点。<br />
冯诺依曼计算机中指令和数据均以二进制形式存放在存储器中，CPU区分它们的依据是<code>指令周期的不同阶段</code>。</em><br />
<img src="/images/c_process_exc.png" alt="C 语言编译链接过程" /></p>
<h2 id="131-计算机的主要性能指标"><a class="markdownIt-Anchor" href="#131-计算机的主要性能指标"></a> 1.3.1 计算机的主要性能指标</h2>
<blockquote>
<ol>
<li>机器字长
<ul>
<li>机器字长是指计算机进行一次整数运算（即定点整数运算）所能处理的二进制数据的位数，通常与CPU的寄存器位数、加法器有关。机器字长一般等于内部寄存器的大小，子长越长，计算精度越高。</li>
</ul>
</li>
<li>数据通路带宽
<ul>
<li>是指数据总线一次所能并行传送信息的位数，这里所说的数据通路带宽是指外部数据总线的带宽，它与CPU内部的数据总线宽度（内部寄存器的大小）有可能不同。</li>
</ul>
</li>
<li>主存容量
<ul>
<li>是指主存储器所能存储信息的最大容量，通常以字节来衡量，可用字数*子长（512K *16位）来表示存储容量。其中，MAR的位数反映存储单元的个数，反映可寻址范围的最大值。例如，MAR为16位表示2^16 = 65536,即此存储体内有65536个存储单元（可称为64K内存，1K=1024），若MDR为32位，表示存储容量为64K*32位。</li>
</ul>
</li>
<li>运算速度
<ul>
<li>吞吐量 指系统单位时间内处理请求的数量，主要取决于主存的存取周期。</li>
<li>响应时间 指用户向计算机发送一个请求，到系统对该请求做出响应并获得所需结果的等待时间，通常包括CPU时间与等待时间（用于磁盘访问，存储访问，I/O操作，操作系统开销等时间）。</li>
<li>CPU时钟周期 通常为节拍脉冲或T周期，即主频的倒数，它是CPU中最小的时间单位，每个动作至少需要1个时钟周期。</li>
<li>主频（CPU时钟频率） 主频的倒数是CPU时钟周期，对于同一个型号的计算机主频越高，完成指令的一个执行步骤所用的时间越短，执行指令的速度越快。</li>
<li>CPU时钟周期 = 1/主频</li>
<li>CPI(Clock cycle Per Instruction)，即执行一条指令所需要的时钟周期数。</li>
<li>CPU 执行时间 = CPU时钟周期数/主频 = （指令条数*CPI)/主频</li>
<li>MIPS (Million Instruction Per Second),即每秒执行多少百万条指令。MIPS = 指令条数/(执行时间*10^6) = 主频/CPI,主频单位为MHz</li>
<li>MFLOPS(Megal Floating-point Operations Per Second),即每秒执行多少百万次浮点运算。MFLOPS = 浮点操作次数/(执行时间 * 10^6)</li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="132-几个专业术语"><a class="markdownIt-Anchor" href="#132-几个专业术语"></a> 1.3.2 几个专业术语</h2>
<blockquote>
<ol>
<li>系列机。具有相同的体系结构，使用相同基本指令系统的多个不同型号的计算机组成的一个产品系列。</li>
<li>固件。将程序固定在ROM中组成的部件称为固件。</li>
</ol>
</blockquote>
<h1 id="第二章数据的表示和运算"><a class="markdownIt-Anchor" href="#第二章数据的表示和运算"></a> 第二章：数据的表示和运算</h1>
<h2 id="211-进位计数制及其相互转换"><a class="markdownIt-Anchor" href="#211-进位计数制及其相互转换"></a> 2.1.1 进位计数制及其相互转换</h2>
<blockquote>
<ol>
<li>进位计数法
<ul>
<li>进位计数法是一种计数方法。常用有十进制、二进制、十六进制、八进制。</li>
</ul>
</li>
<li>不同进制数之间的相互转换
<ul>
<li>例子：将二进制 1111000010.01101分别转换为八进制数和十六进制数。</li>
<li>(<u>001</u> <u>111</u> <u>000</u> <u>010</u>. <u>011</u> <u>010</u>)<sub>2</sub> = （1702.32)<sub>8</sub></li>
<li>(<u>0011</u> <u>1100</u> <u>0010</u>. <u>0110</u> <u>1000</u>)<sub>2</sub> = (3C2.68)<sub>16</sub><br />
<img src="/images/base_trans.jpeg" alt="将十进制数123.6875转换为二进制" title="将十进制数123.6875转换为二进制" /></li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="212-真值和机器数"><a class="markdownIt-Anchor" href="#212-真值和机器数"></a> 2.1.2 真值和机器数</h2>
<blockquote>
<ul>
<li>通常把带&quot;+&quot;或“-”符号的数称为真值，真值是机器数所代表的实际值。</li>
<li>在计算机中，通常采用数的符号和数值一起编码的方法来表示数据。常用有原码、补码、反码。把符号“数字化”的数称为机器数。</li>
</ul>
</blockquote>
<h2 id="213-bcd码"><a class="markdownIt-Anchor" href="#213-bcd码"></a> 2.1.3 BCD码</h2>
<p>二进制编码的十进制数(Binary-Coded Decimal,BCD)，通常采用4位二进制数来表示一位十进制数中的0—9 这10个数。但4位二进制数有16中状态，故必有6中冗余状态。</p>
<blockquote>
<ol>
<li>8421码（常用）：若两个8421码相加之和小于等于9，不需修正。若之和大于等于10，需加6修正，并向高位进位。</li>
<li>余3码。这是一种无权码，是在8421码的基础上加（0011)<sub>2</sub>形成的。如 8–&gt;1011;9–&gt;1100;</li>
<li>2421码。这是一种有权码，权值由高到底分别为2，4，2，1，特点是大于等于5的4位二进制中最高位为1，小于5的为高位为0.如5–&gt;1011而非0101。</li>
</ol>
</blockquote>
<h2 id="214-字符和字符串"><a class="markdownIt-Anchor" href="#214-字符和字符串"></a> 2.1.4 字符和字符串</h2>
<blockquote>
<ol>
<li>ASCII 码。在ASCII码中，编码值0<sub>31为控制字符，用于通信控制和设备的功能控制；编码值为127是DEL码；编码值32是空格；编码值32</sub>126共95个字符为可印刷字符。<strong>提示：0~9 的ASCII码值为48（011 0000）~ 57（011 1001），即去掉高3位，只保留低4位，正好是二进制的0~9。</strong></li>
<li>汉字的表示和编码。GB2312-1980中，每个编码用两个字节，共计7445个。目前最新的汉字编码是GB18030-2000，它收录27484个汉字。编码标准采用1B，2B和4B。</li>
<li>字符串的存放。字符串通常是一串连续的字符，占用主存连续的多个字节，每个字节存放一个字符，主存字由2B或4B组成时，即可按大端模式也可小端模式。</li>
</ol>
</blockquote>
<h2 id="215-校验码"><a class="markdownIt-Anchor" href="#215-校验码"></a> 2.1.5 校验码</h2>
<p>码距，任意两个合法码字之间最少变化的二进制位数。例如：1100和1101之间的码距为1，因为只有最低位翻转了。而1001和0010之间的码距是3，因为只有1位没有变化。码距越大，检错，纠错能力越强，而且检错能力总大于纠错能力。</p>
<blockquote>
<ol>
<li>奇偶校验码</li>
</ol>
<p><img src="/images/parity_check_code.png" alt="Parity check code" /><br />
例：给出两个编码1001101和1010111的奇校验码和偶校验码。</p>
</blockquote>
<table>
<thead>
<tr>
<th>1001101</th>
<th><u>1</u>1001101（奇校验码)</th>
<th><u>0</u>1001101(偶校验码)</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>1010111</strong></td>
<td><strong><u>0</u>1010111(奇校验码)</strong></td>
<td><strong><u>1</u>1010111(奇偶校验码)</strong></td>
</tr>
</tbody>
</table>
<blockquote>
<ol start="2">
<li>海明码。它是一种广泛采用的有效的校验码，是一种多重奇偶校验码，具有检错和纠错能力。例如：在n=4，k = 3时，求1010的海明码。设n为有效信息的位数，k为校验位的位数，则信息位n和校验位k应满足:</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo>≤</mo><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">n+k+1\leq2^k
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>海明码位数为:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>n</mi><mo>+</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo>=</mo><mn>8</mn><mo>≤</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">n+k+1=8\leq2^3
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>则n，k有效。</p>
<ol start="3">
<li>循环冗余校验（CRC）码。CRC的基本思想：在K位信息位后再拼接R位的校验码，整个编码的长度为N位，因此这种编码又称（N，K）码。计算过程如下：<br />
<img src="/images/crc_check.jpeg" alt="CRC 计算过程" title="CRC 计算过程" /></li>
</ol>
</blockquote>
<h2 id="221-定点数的表示"><a class="markdownIt-Anchor" href="#221-定点数的表示"></a> 2.2.1 定点数的表示</h2>
<blockquote>
<ol>
<li>无符号数和有符号数的表示
<ul>
<li>无符号数：指整个机器字长的全部二进制位均为数值位，没有符号位，相当于数的绝对值。若机器字长为8位，则数的范围为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>8</mn></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,2^8-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>.</li>
<li>有符号数。有符号数的机器表示有原码、补码、反码、移码。</li>
</ul>
</li>
<li>机器数的定点表示
<ul>
<li>定点小数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>=</mo><msub><mi>X</mi><mn>0</mn></msub><mi mathvariant="normal">.</mi><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><msub><mi>x</mi><mn>3</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo separator="true">,</mo><mi>i</mi><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">X=X_0.x_1x_2x_3...x_n=1-2^{-n},if(x_0 = 0).</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.021331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mord">.</span></span></span></span></li>
<li>定点整数：是纯整数，约定小数点位置在有效数值部分最低位之后。若数据X的形式为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><msub><mi>x</mi><mn>3</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">X=x_0x_1x_2x_3...x_n=2^n-1,if(x_0=0).</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mord">.</span></span></span></span></li>
</ul>
</li>
<li>补数和模数<br />
一个数减去两一个数（加上一个负数）等于第一个数加上第二个个数的补数。例如：时钟指针<br />
8+(-2) = (8 + 10)(mod 12) = 6<br />
n 位二进制数的模数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><br />
n 位小数的模数为2</li>
<li>原码、补码、反码、移码</li>
</ol>
<ul>
<li>纯小数的原码定义<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>X</mi><msub><mo stretchy="false">]</mo><mrow><mi>y</mi><mi>u</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mo stretchy="false">(</mo><mn>1</mn><mo>&gt;</mo><mi>x</mi><mo>≥</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>−</mo><mi>x</mi><mo>=</mo><mn>1</mn><mo>+</mo><mrow><mo fence="true">∣</mo><mi>x</mi><mo fence="true">∣</mo></mrow><mspace width="2em"/><mo stretchy="false">(</mo><mn>0</mn><mo>&gt;</mo><mo>=</mo><mi>x</mi><mo>&gt;</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">[X]_{yuan}=
\begin{cases}
x\qquad\qquad\qquad\qquad(1&gt;x\geq0)
\\ 1-x=1+\left|x\right|\qquad(0&gt;=x&gt;-1)
\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br />
<em>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mo>+</mo><mn>0.1101</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>0.1101</mn></mrow><annotation encoding="application/x-tex">x_1=+0.1101,x_2=-0.1101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span></span></span></span>，字长为8位，则其原码表示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>y</mi><mi>u</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>0.1101000</mn><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>y</mi><mi>u</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>1</mn><mo>−</mo><mo stretchy="false">(</mo><mo>−</mo><mn>0.1101</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1.1101000</mn></mrow><annotation encoding="application/x-tex">[x_1]_{yuan}=0.1101000,[x_2]_{yuan}=1-(-0.1101)=1.1101000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>,若字长为n+1,则原码小数的表示范围为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo stretchy="false">)</mo><mo>&lt;</mo><mo>=</mo><mi>x</mi><mo>&lt;</mo><mo>=</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">-(1-2^{-n})&lt;=x&lt;=1-2^{-n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.021331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>,关于原点对称。</em></li>
<li>纯整数的原码定义<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>X</mi><msub><mo stretchy="false">]</mo><mrow><mi>y</mi><mi>u</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo><mi>x</mi><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>&gt;</mo><mi>x</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mi>x</mi><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup><mo>+</mo><mrow><mo fence="true">∣</mo><mi>x</mi><mo fence="true">∣</mo></mrow><mspace width="2em"/><mo stretchy="false">(</mo><mn>0</mn><mo>&gt;</mo><mo>=</mo><mi>x</mi><mo>&gt;</mo><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">[X]_{yuan}=\begin{cases}
0,x\qquad\qquad\qquad\qquad(2^n&gt;x&gt;=0)
\\2^n-x=2^n+\left|x\right|\qquad(0&gt;=x&gt;-2^n)
\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">∣</span></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br />
例如，若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mo>+</mo><mn>1110</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>1110</mn></mrow><annotation encoding="application/x-tex">x_1=+1110,x_2=-1110</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span></span></span></span>,字长为8位，则其原码表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>y</mi><mi>u</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>0001110</mn><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>y</mi><mi>u</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>0001110</mn></mrow><annotation encoding="application/x-tex">[x_1]_{yuan}=0,0001110,[x_2]_{yuan}=1,0001110</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span></span></span></span>,其中最高位是符号位。<br />
<em>注意：真值0的原码表示有正零和负零两种形式，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>+</mo><mn>0</mn><msub><mo stretchy="false">]</mo><mrow><mi>y</mi><mi>u</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>0</mn><mtext> </mtext><mn>0000</mn><mo separator="true">,</mo><mo stretchy="false">[</mo><mo>−</mo><mn>0</mn><msub><mo stretchy="false">]</mo><mrow><mi>y</mi><mi>u</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>1</mn><mtext> </mtext><mn>0000</mn></mrow><annotation encoding="application/x-tex">[+0]_{yuan}=0\ 0000,[-0]_{yuan}=1\ 0000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord">+</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>。</em></li>
<li>纯小数的补码定义<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>X</mi><msub><mo stretchy="false">]</mo><mrow><mi>b</mi><mi>u</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mo stretchy="false">(</mo><mn>1</mn><mo>&gt;</mo><mi>x</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mo>+</mo><mi>x</mi><mo>=</mo><mn>2</mn><mo>−</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">(</mo><mn>0</mn><mo>&gt;</mo><mi>x</mi><mo>&gt;</mo><mo>=</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">[X]_{bu}=\begin{cases}x\qquad\qquad\qquad(1&gt;x&gt;=0)\\2+x=2-|x|(0&gt;x&gt;=-1)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> (mod 2)<br />
若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mo>+</mo><mn>0.1001</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>0.0110</mn></mrow><annotation encoding="application/x-tex">x_1=+0.1001,x_2=-0.0110</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span></span></span></span>，字长为8位，则其补码表示：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>b</mi><mi>u</mi></mrow></msub><mo>=</mo><mn>0.1001000</mn><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>b</mi><mi>u</mi></mrow></msub><mo>=</mo><mn>2</mn><mo>−</mo><mn>0.0110</mn><mo>=</mo><mn>1.1010000</mn></mrow><annotation encoding="application/x-tex">[x_1]_{bu}=0.1001000,[x_2]_{bu}=2-0.0110=1.1010000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>。若字长为n+1,则补码的表示范围为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn><mo>&lt;</mo><mo>=</mo><mi>x</mi><mo>&lt;</mo><mo>=</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">-1&lt;=x&lt;=1-2^{-n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>(比原码多表示一个-1)</li>
<li>纯整数的补码定义<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>X</mi><msub><mo stretchy="false">]</mo><mrow><mi>b</mi><mi>u</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo><mi>x</mi><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>&gt;</mo><mi>x</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mi>x</mi><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mspace width="1em"/><mo stretchy="false">(</mo><mn>0</mn><mo>&gt;</mo><mo>=</mo><mi>x</mi><mo>&gt;</mo><mo>=</mo><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><mspace width="1em"/><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[X]_{bu}=\begin{cases}0,x\qquad\qquad\qquad(2^n&gt;x&gt;=0)\\2^{n+1}+x=2^{n+1}-|x|\quad(0&gt;=x&gt;=-2^n)\end{cases}\quad(mod\ 2^{n+1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br />
若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mo>+</mo><mn>1010</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>1101</mn></mrow><annotation encoding="application/x-tex">x_1=+1010,x_2=-1101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span></span></span></span>字长为8位，则其补码表示：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>b</mi><mi>u</mi></mrow></msub><mo>=</mo><mn>0</mn><mtext> </mtext><mn>0001010</mn><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>b</mi><mi>u</mi></mrow></msub><mo>=</mo><msup><mn>2</mn><mn>8</mn></msup><mo>−</mo><mn>00001101</mn><mo>=</mo><mn>1</mn><mtext> </mtext><mn>1110011</mn></mrow><annotation encoding="application/x-tex">[x_1]_{bu}=0\ 0001010,[x_2]_{bu}=2^8-00001101=1\ 1110011</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span></span></span></span>。<br />
若字长为n+1，则补码的表示范围为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup><mo>&lt;</mo><mo>=</mo><mi>x</mi><mo>&lt;</mo><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-2^n&lt;=x&lt;=2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>.</li>
<li>由原码求补码，由补码求原码
<ul>
<li><strong>对于正数，补码与原码的表示相同，[X]<sub>补</sub>=[X]<sub>原</sub></strong>。</li>
<li><strong>对于负数，原码符号位不变，数值部分按位取反，末位加1，此规则同样使用于由[X]<sub>补</sub>求[X]<sub>原</sub>。</strong></li>
</ul>
</li>
<li>补码的算术移位<br />
<strong>将[X]<sub>补</sub>的符号位与数值位一起右移一位并保持原符号位的值不变，可实现除法功能（除以2）</strong></li>
<li>纯小数的反码表示法<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>X</mi><msub><mo stretchy="false">]</mo><mrow><mi>f</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mo stretchy="false">(</mo><mn>1</mn><mo>&gt;</mo><mi>x</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mn>2</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi><mspace width="1em"/><mo stretchy="false">(</mo><mn>0</mn><mo>&gt;</mo><mo>=</mo><mi>x</mi><mo>&gt;</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><mspace width="1em"/><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mn>2</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[X]_{fan}=\begin{cases}x\qquad\qquad\qquad(1&gt;x&gt;=0)\\(2-2^{-n})+x\quad(0&gt;=x&gt;-1)\end{cases}\quad(mod\ 2-2^{-n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.021331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br />
若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mo>+</mo><mn>0110</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>0.0110</mn></mrow><annotation encoding="application/x-tex">x_1=+0110,x_2=-0.0110</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span></span></span></span>，字长为8位，则其反码表示：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>f</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>0.</mn><mtext> </mtext><mn>0110000</mn><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>f</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>1.1111111</mn><mo>−</mo><mn>0.0110000</mn><mo>=</mo><mn>1.</mn><mtext> </mtext><mn>1001111</mn></mrow><annotation encoding="application/x-tex">[x_1]_{fan}=0.\ 0110000,[x_2]_{fan}=1.1111111-0.0110000=1.\ 1001111</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mspace"> </span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mspace"> </span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span></span></span></span>。<br />
若字长为n+1，则反码的表示范围为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo><mo>&lt;</mo><mo>=</mo><mi>x</mi><mo>&lt;</mo><mo>=</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">-(1-2^n)&lt;=x&lt;=1-2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>.(关于原点对称)</li>
<li>纯整数的反码定义<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>X</mi><msub><mo stretchy="false">]</mo><mrow><mi>f</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo><mi>x</mi><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>&gt;</mo><mi>x</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi><mspace width="1em"/><mo stretchy="false">(</mo><mn>0</mn><mo>&gt;</mo><mo>=</mo><mi>x</mi><mo>&gt;</mo><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><mspace width="1em"/><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[X]_{fan}=\begin{cases}0,x\qquad\qquad\qquad(2^n&gt;x&gt;=0)\\(2^{n+1}-1)+x\quad(0&gt;=x&gt;-2^n)\end{cases}\quad(mod\ 2^{n+1}-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><br />
若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mo>+</mo><mn>1011</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>1011</mn></mrow><annotation encoding="application/x-tex">x_1=+1011,x_2=-1011</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span></span></span></span>，字长为8位，则其反码表示：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>f</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>0</mn><mtext> </mtext><mn>0001011</mn><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>f</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>1</mn><mtext> </mtext><mn>1111111</mn><mo>−</mo><mn>00001011</mn><mo>=</mo><mn>1</mn><mtext> </mtext><mn>1110100</mn></mrow><annotation encoding="application/x-tex">[x_1]_{fan}=0\ 0001011,[x_2]_{fan}=1\ 1111111-00001011=1\ 1110100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>。<br />
若字长为n+1，则反码的表示范围为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>&lt;</mo><mo>=</mo><mi>x</mi><mo>&lt;</mo><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-(2^n-1)&lt;=x&lt;=2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>.(关于原点对称)</li>
</ul>
</blockquote>
<p>真值、原码、补码、反码及[-X]<sub>补</sub>的转换规律，如下图：<br />
<img src="/images/machine_num_trans.jpg" alt="真值和机器数之间的转换关系" /></p>
<blockquote>
<ul>
<li>移码表示法。移码常用来表示浮点数的阶码。它只能表示整数。<br />
定义为：<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>X</mi><msub><mo stretchy="false">]</mo><mrow><mi>y</mi><mi>i</mi></mrow></msub><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup><mo>+</mo><mi>x</mi><mspace width="2em"/><mspace width="2em"/><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>&gt;</mo><mi>x</mi><mo>&gt;</mo><mo>=</mo><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[X]_{yi}=2^n+x\qquad\qquad(2^n&gt;x&gt;=-2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br />
若正数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mo>+</mo><mn>10101</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mo>−</mo><mn>10101</mn></mrow><annotation encoding="application/x-tex">x_1=+10101,x_2=-10101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span></span></span></span>，字长为8位，则其移码表示为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>y</mi><mi>i</mi></mrow></msub><mo>=</mo><msup><mn>2</mn><mn>7</mn></msup><mo>+</mo><mn>10101</mn><mo>=</mo><mn>1</mn><mtext> </mtext><mn>0010101</mn><mo separator="true">,</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mrow><mi>y</mi><mi>i</mi></mrow></msub><mo>=</mo><msup><mn>2</mn><mn>7</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>10101</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mtext> </mtext><mn>1101011</mn></mrow><annotation encoding="application/x-tex">[x_1]_{yi}=2^7+10101=1\ 0010101,[x_2]_{yi}=2^7+(-10101)=0\ 1101011</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span></span></span></span>。<br />
移码有一下特点：
<ul>
<li>移码中零的表示唯一。</li>
<li>一个真值的移码和补码仅差一个符号位，[X]<sub>补</sub>的符号位取反即得[X]<sub>移</sub>，反之亦然。</li>
<li>移码全为0时，对应真值的最小值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">-2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>；移码全为1，对应真值的最大值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</li>
<li>移码保持了数据原有的大小顺序，移码大真值就大，移码小真值就小。</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="222-定点数的运算"><a class="markdownIt-Anchor" href="#222-定点数的运算"></a> 2.2.2 定点数的运算</h2>
<h3 id="1定点数的移位"><a class="markdownIt-Anchor" href="#1定点数的移位"></a> 1.定点数的移位</h3>
<blockquote>
<ol>
<li>算术移位</li>
</ol>
</blockquote>
<table width="375" border="0" cellpadding="0" cellspacing="0" style='width:281.25pt;border-collapse:collapse;table-layout:fixed'>
   <col width="43" style='mso-width-source:userset;mso-width-alt:1376;'/>
   <col width="188" style='mso-width-source:userset;mso-width-alt:6016;'/>
   <col width="144" style='mso-width-source:userset;mso-width-alt:4608;'/>
   <tr height="18" style='height:13.50pt;'>
    <td class="xl65" height="18" width="43" style='height:13.50pt;width:32.25pt;'></td>
    <td class="xl65" width="188" style='width:141.00pt;' x:str>码制</td>
    <td class="xl65" width="144" style='width:108.00pt;' x:str>填补代码</td>
   </tr>
   <tr height="18" style='height:13.50pt;'>
    <td class="xl65" height="18" style='height:13.50pt;' x:str>正数</td>
    <td class="xl65" x:str>原码、补码、反码</td>
    <td class="xl65" x:num>0</td>
   </tr>
   <tr height="18" style='height:13.50pt;'>
    <td class="xl65" height="72" rowspan="4" style='height:54.00pt;border-right:none;border-bottom:none;' x:str>负数</td>
    <td class="xl65" x:str>原码</td>
    <td class="xl65" x:num>0</td>
   </tr>
   <tr height="18" style='height:13.50pt;'>
    <td class="xl65" rowspan="2" style='border-right:none;border-bottom:none;' x:str>补码</td>
    <td class="xl65" x:str>左移添0</td>
   </tr>
   <tr height="18" style='height:13.50pt;'>
    <td class="xl65" x:str>右移添1</td>
   </tr>
   <tr height="18" style='height:13.50pt;'>
    <td class="xl65" x:str>反码</td>
    <td class="xl65" x:num>1</td>
   </tr>
   <![if supportMisalignedColumns]>
    <tr width="0" style='display:none;'>
     <td width="43" style='width:32;'></td>
     <td width="188" style='width:141;'></td>
     <td width="144" style='width:108;'></td>
    </tr>
   <![endif]>
  </table>
<blockquote>
<ul>
<li>算术移位的对象是有符号数，在移位过程中符号位保持不变。</li>
<li>负数的原码数值部分与真值相同，故在移位时只要使符号位不变，其空位添0。</li>
</ul>
<ol start="2">
<li>逻辑移位：逻辑移位的操作数视为无符号数，移位规则：逻辑左移时，高位丢失，低位添0；逻辑右移时，低位丢失，高位添0.</li>
<li>循环移位：循环移位操作适合将数据的低字节数据和高字节数据互换。</li>
</ol>
</blockquote>
<h3 id="2原码定点数的加减运算"><a class="markdownIt-Anchor" href="#2原码定点数的加减运算"></a> 2.原码定点数的加减运算</h3>
<blockquote>
<ul>
<li>加法规则：先判断符号位，若相同，则绝对值相加，结果符号位不变；若不同，则做减法，绝对值大数减去绝对值小的数，结果符号位与绝对值大的数形同。</li>
<li>减法规则：两个原码表示的数相减，首先将减数符号位取反，然后做加法运算。</li>
</ul>
</blockquote>
<h3 id="3补码定点数的加减运算"><a class="markdownIt-Anchor" href="#3补码定点数的加减运算"></a> 3.补码定点数的加减运算</h3>
<blockquote>
<p><strong>补码运算规则简单，因此计算机系统普遍采用补码加减运算。</strong></p>
<ul>
<li>参与运算的两个数均用补码表示。</li>
<li>按二进制规则运算，逢二进一。</li>
<li>符号位与数值位按同样规则一起参与运算，符号位运算产生的进位要丢掉，结果的符号位由运算得出。</li>
<li>补码加减运算公式。当参加运算的数是定点小数时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">M=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>；当参加运算的数是定点整数时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">M=2^{n+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>.<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>A</mi><mo>+</mo><mi>B</mi><msub><mo stretchy="false">]</mo><mrow><mi>b</mi><mi>u</mi></mrow></msub><mo>=</mo><mo stretchy="false">[</mo><mi>A</mi><msub><mo stretchy="false">]</mo><mrow><mi>b</mi><mi>u</mi></mrow></msub><mo>+</mo><mo stretchy="false">[</mo><mi>B</mi><msub><mo stretchy="false">]</mo><mrow><mi>b</mi><mi>u</mi></mrow></msub><mspace width="2em"/><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>M</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[A+B]_{bu}=[A]_{bu}+[B]_{bu}\qquad(mod\ M)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>A</mi><mo>−</mo><mi>B</mi><msub><mo stretchy="false">]</mo><mrow><mi>b</mi><mi>u</mi></mrow></msub><mo>=</mo><mo stretchy="false">[</mo><mi>A</mi><msub><mo stretchy="false">]</mo><mrow><mi>b</mi><mi>u</mi></mrow></msub><mo>+</mo><mo stretchy="false">[</mo><mo>−</mo><mi>B</mi><msub><mo stretchy="false">]</mo><mrow><mi>b</mi><mi>u</mi></mrow></msub><mspace width="2em"/><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>M</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[A-B]_{bu}=[A]_{bu}+[-B]_{bu}\qquad(mod\ M)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span><br />
<em>注意：mod M 运算是为了将溢出位丢掉。</em></li>
<li>补码运算的结果亦为补码。</li>
</ul>
</blockquote>
<h3 id="4符号扩展"><a class="markdownIt-Anchor" href="#4符号扩展"></a> 4.符号扩展</h3>
<blockquote>
<p>在计算机算术运算中，8位数和32位数相加时，必须将8位数转换为32位形式，这称为“符号扩展”。</p>
<ul>
<li>正数符号位不变，附加位添0。</li>
<li>负数。
<ul>
<li>原码：符号位为1，附加位添0。</li>
<li>补码：符号位不变，附加位添1（整数），添0（小数）。</li>
<li>反码：符号位不变，附加位添1。</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="5溢出概念和判别方法"><a class="markdownIt-Anchor" href="#5溢出概念和判别方法"></a> 5.溢出概念和判别方法</h3>
<blockquote>
<p>仅当两个符号位相同的数相加，或符号位不同的数相减才有可能溢出。</p>
<ul>
<li>采用一位符号位。设A的符号<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">A_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，B的符号<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">B_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，结果为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">R_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>=</mo><msub><mi>A</mi><mi>s</mi></msub><msub><mi>B</mi><mi>s</mi></msub><mover accent="true"><msub><mi>R</mi><mi>s</mi></msub><mo>ˉ</mo></mover><mo>+</mo><mover accent="true"><msub><mi>A</mi><mi>s</mi></msub><mo>ˉ</mo></mover><mover accent="true"><msub><mi>B</mi><mi>s</mi></msub><mo>ˉ</mo></mover><mi>R</mi></mrow><annotation encoding="application/x-tex">V=A_sB_s\bar{R_s}+\bar{A_s}\bar{B_s}R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9701099999999999em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9701099999999999em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">ˉ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>，若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">V=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，表示无溢出；若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">V=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，表示有溢出。</li>
<li>采用双符号位。
<ul>
<li>①S<sub>1</sub>S<sub>2</sub>=00，结果为正，无溢出。</li>
<li>②S<sub>1</sub>S<sub>2</sub>=01，结果正溢出。</li>
<li>③S<sub>1</sub>S<sub>2</sub>=10，结果负溢出。</li>
<li>④S<sub>1</sub>S<sub>2</sub>=11，结果为负，无溢出。</li>
</ul>
</li>
<li>采用一位符号位根据数据位的进位判断溢出<br />
若符号位的进位C<sub>s</sub>与最高数位的进位C<sub>1</sub>相同，则说明没有溢出，否则发生溢出。</li>
</ul>
</blockquote>
<h2 id="223-强制类型转换"><a class="markdownIt-Anchor" href="#223-强制类型转换"></a> 2.2.3 强制类型转换</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">short</span> x = <span class="number">-4321</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> y = x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x = %d, y = %u\n&quot;</span>, x, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">结果：x = <span class="number">-4321</span>, y = <span class="number">61215</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>分析：[x]<sub>补</sub> = 1 110 1111 0001 1111，[y]<sub>补</sub>=1110 1111 0001 1111，因此，[x]<sub>补</sub>=[y]<sub>补</sub>，所以，强制类型转换保持位值不变，改变了解释这些位的方式。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">165537</span>, u = <span class="number">-34991</span>;</span><br><span class="line">    <span class="type">short</span> y = x, v = u;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x = %d, y = %d\n&quot;</span>, x, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;u = %d, v = %d\n&quot;</span>, u, v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">x = <span class="number">165537</span>, y = <span class="number">-31071</span></span><br><span class="line">u = <span class="number">-34991</span>, v = <span class="number">30545</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>分析：[x]<sub>补</sub> =0000 0000 0000 0010 1000 0110 1010 0001，[y]<sub>补</sub>=1000 0110 1010 0001，因此，[y]<sub>补</sub>只是截取了[x]<sub>补</sub>的低两位字节，这也是一种保持位值的处理方法。[u]<sub>补</sub> =1111 1111 1111 1111 0111 0111 0101 0001，[v]<sub>补</sub>=0111 0111 0101 0001，同理[v]<sub>补</sub>只是截取了[u]<sub>补</sub>的低两位字节。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">short</span> x = <span class="number">-4321</span>;</span><br><span class="line">    <span class="type">int</span> y = x;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> u = x;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v = u;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x = %d, y = %d\n&quot;</span>, x, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;u = %d, v = %d\n&quot;</span>, u, v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">x = <span class="number">-4321</span>, y = <span class="number">-4321</span></span><br><span class="line">u = <span class="number">61215</span>, v = <span class="number">61215</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>分析：[x]<sub>补</sub> =1110 1111 0001 1111，[u]<sub>补</sub>=1110 1111 0001 1111，[x]<sub>补</sub>=[u]<sub>补</sub>。数值位不变，解释方式不同。其他的就很好理解了。</p>
</blockquote>
<h2 id="224-位运算"><a class="markdownIt-Anchor" href="#224-位运算"></a> 2.2.4 位运算</h2>
<ol>
<li>按位与（&amp;）运算</li>
</ol>
<ul>
<li>将某一位置0，其他位不变：将char 型变量a 的最低位置0：a = a &amp; 0b1111’1110;(a = a &amp; 0xfe).</li>
<li>取指定位：有char c; int a; 取出a的低字节，置于c中：c=a &amp; 0xff; (0xff:1111 1111)</li>
</ul>
<ol start="2">
<li>按位或（|）运算</li>
</ol>
<ul>
<li>将某些位置1，其他位不变：将 int 型变量 a 的低字节置 1 ： a = a | 0xff;</li>
</ul>
<ol start="3">
<li>位运算——取反（~）</li>
</ol>
<ul>
<li>025：0000000000010101</li>
<li>~025：1111111111101010</li>
</ul>
<ol start="4">
<li>位运算——按位异或（^）</li>
</ol>
<ul>
<li>使特定位翻转（与0异或保持原值，与1异或取反）: 0111’1010 ^ 0000’1111 = 0111’0101 低四位翻转</li>
</ul>
<ol start="5">
<li>位运算——移位（&lt;&lt;、&gt;&gt;）</li>
</ol>
<ul>
<li>左移运算（&lt;&lt;）<br />
左移后，低位补0，高位舍弃</li>
<li>右移运算（&gt;&gt;）<br />
低位舍弃，高位：无符号数补0，有符号数补“符号位”</li>
</ul>
<h2 id="231-浮点数的表示"><a class="markdownIt-Anchor" href="#231-浮点数的表示"></a> 2.3.1 浮点数的表示</h2>
<blockquote>
<ol>
<li>浮点数的表示规格<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><msup><mi>r</mi><mi>E</mi></msup><mo>×</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">N=r^E\times M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.924661em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>，E,M 都是有符号的定点数，E称为阶码，M称为尾数。<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">J_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mn>1</mn></msub><msub><mi>J</mi><mn>2</mn></msub><msub><mi>J</mi><mn>3</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>J</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">J_1J_2J_3...J_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">S_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><msub><mi>S</mi><mn>2</mn></msub><msub><mi>S</mi><mn>3</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">S_1S_2S_3...S_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">J_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>—阶符；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mn>1</mn></msub><msub><mi>J</mi><mn>2</mn></msub><msub><mi>J</mi><mn>3</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>J</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">J_1J_2J_3...J_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>—阶码的数值部分；<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">S_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>—数符；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><msub><mi>S</mi><mn>2</mn></msub><msub><mi>S</mi><mn>3</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">S_1S_2S_3...S_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>—尾数的数值部分；</li>
<li>规格化浮点数<br />
所谓规格化操作，是指通过调整一个非规格化浮点数的尾数和阶码的大小，使非零的浮点数在尾数在尾数的最高位是一个有效值。</li>
</ol>
<ul>
<li>左规：将尾数算术左移一位，阶码减1的方法称为左规，左规可能要进行多次。</li>
<li>右规：当浮点数运算结果尾数出现溢出（双符号位为01或10）时，将尾数算术右移，阶码加1.需要右规时，只需进行一次。</li>
<li>1）原码规格化后。<br />
正数为0.1xx…x的形式，其最大值为0.11…1，最小值表示为0.100…0.尾数的范围为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>&lt;</mo><mo>=</mo><mi>M</mi><mo>&lt;</mo><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{1}{2}&lt;=M&lt;=(1-2^{-n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.021331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。<br />
负数为1.1xx…x的形式，其最大值为1.10…0,最小值表示为1.11…1.尾数的表示范围：<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo stretchy="false">)</mo><mo>&lt;</mo><mo>=</mo><mi>M</mi><mo>&lt;</mo><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">-(1-2^{-n})&lt;=M&lt;=-\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.021331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。</li>
<li>2)补码规格化后。<br />
正数为0.1xx…x的形式，其最大值为0.11…1，最小值表示为0.100…0.尾数的范围为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>&lt;</mo><mo>=</mo><mi>M</mi><mo>&lt;</mo><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{1}{2}&lt;=M&lt;=(1-2^{-n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.021331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。<br />
负数为1.0xx…x的形式，其最大值为1.01…1，最小值表示为1.000…0.尾数的范围为：<br />
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn><mo>&lt;</mo><mo>=</mo><mi>M</mi><mo>&lt;</mo><mo>=</mo><mo>−</mo><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">-1&lt;=M&lt;=-(\frac{1}{2}+2^{-n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.021331em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。<br />
<em>注意：这里补码规格化尾数的最大负数为1.01…1，而不是原码形式1.10…0，因为1.100…0不是补码的规格化数，所以规格化尾数的最大负值是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo stretchy="false">(</mo><mn>0.10...0</mn><mo>+</mo><mn>0.0...1</mn><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mn>0.100...01</mn></mrow><annotation encoding="application/x-tex">-(0.10...0+0.0...1)=-0.100...01</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">0</span><span class="mord">1</span></span></span></span></em>。</li>
</ul>
<ol start="3">
<li>IEEE 754标准<br />
按照IEEE 754标准，常用的浮点数的格式：</li>
</ol>
</blockquote>
<table border="1" width="400">
    <tr>
        <td>M<sub>s</sub></td>
        <td>E</td>
        <td>M</td>
    </tr>
</table>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">M_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> — 数符；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span> — 阶码部分，用移码表示；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>—尾数部分，用原码表示；<br />
IEEE 754浮点数的格式如下：</p>
</blockquote>
<table border="1">
    <tr>
        <th>类型</th>
        <th>数符</th>
        <th>阶码</th>
        <th>尾数数值</th>
        <th>总位数</th>
        <th>偏置值</th>
    </tr>
    <tr>
        <td>短浮点数</td>
        <td>1</td>
        <td>8</td>
        <td>23</td>
        <td>32</td>
        <td>7FH  127</td>
    </tr>
    <tr>
        <td>长浮点数</td>
        <td>1</td>
        <td>11</td>
        <td>52</td>
        <td>64</td>
        <td>3FFH  1023</td>
    </tr>
    <tr>
        <td>临时浮点数</td>
        <td>1</td>
        <td>15</td>
        <td>64</td>
        <td>80</td>
        <td>3FFFH  16383</td>
    </tr>
</table>  
<blockquote>
<p>对于规格化的二进制浮点数，数值的最高位总是 1，为了能使尾数多表示一位有效位，将这个 1 隐去，因此尾数数值实际上是24位，隐含的 1 是一位正数，在浮点数格式中表示的23位尾数是纯小数。例如，(12)<sub>10</sub>=1100,将它规格化后结果为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.1</mn><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">1.1\times 2^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>，其中整数部分的 1 将不存储在23位尾数中。</p>
</blockquote>
<h2 id="232-浮点数的加减运算"><a class="markdownIt-Anchor" href="#232-浮点数的加减运算"></a> 2.3.2 浮点数的加减运算</h2>
<blockquote>
<ol>
<li>对阶。先求阶差，然后以小阶向大阶看齐，将阶码小的尾数右移一位，阶加1，直到两个数的阶码相等为止。尾数右移时，舍弃掉有效位数会产生误差，影响精度。</li>
<li>尾数求和。将对阶后的尾数按定点数加减运算规则进行运算。</li>
<li>规格化。以双符号位为例，当尾数大于0时，其补码规格化形式为：<br />
[S]<sub>补</sub>=00.1xx…x，当尾数小于0时，其补码规格化为：[S]<sub>补</sub>=11.0xx…x。规格化分为左规和右规：</li>
</ol>
<blockquote>
<ul>
<li>左规：当尾数出现00.0xx…x或11.1xx…x时，需左规，即尾数左移1位，和的阶码减1，直到尾数为00.1xx…x或11.0xx…x。</li>
<li>右规：当尾数求和结果溢出（如尾数为01.xx…x或01.xx…x）时，需右规，即尾数右移一位，和的阶码加1。</li>
</ul>
</blockquote>
<ol start="4">
<li>舍入。常见的舍入方法有：</li>
</ol>
<blockquote>
<ul>
<li>&quot;0&quot;舍“1”入法：类似十进制的四舍五入，即在尾数右移时，被移去的最高位数值为0，则舍去；被移去的最高位数值为1，则在尾数的末位加1.这样做可能会使尾数又溢出，此时需在做一次右规。</li>
<li>恒置“1”法。尾数右移时，不论丢掉的最高位数值为1还是0，都使右移后的尾数末位恒置1.这种方法同样有使尾数变大和变小两种可能。</li>
</ul>
</blockquote>
<ol start="5">
<li>溢出判断。<br />
浮点数的溢出是否由阶码的符号位决定的。以双符号为补码为例，当阶码的符号位出现01时，即阶码大于最大阶码时，表示上溢，进入中断处理；当阶码的符号位出现10时，即阶码小于最小阶码时，表示下溢出，按机器零处理。</li>
<li>强制类型转换<br />
以char — int—long—double和float—double最为常见，从前到后范围和精度都从小到大，转换过程没有损失。</li>
</ol>
<blockquote>
<ul>
<li>1) char 为8为ASCII 码整数，转换为int，在前补0。</li>
<li>2) int和unsigned int 可以互相转换，但彼此都可能因溢出而造成数据丢失，如8位int和unsigned int ，a=-1,(unsigned int)a=255；(unsigned int)a=128,(int)a=-128;</li>
<li>3) int和float转换，若float 是小数，则转换为int可能会发生精度损失和溢出，从int转换为float 时，虽然不会溢出，但int可以保留32位，float保留24位，可能有数据舍入，double 则不会。</li>
</ul>
</blockquote>
</blockquote>
<h1 id="241-串行加法器和并行加法器"><a class="markdownIt-Anchor" href="#241-串行加法器和并行加法器"></a> 2.4.1 串行加法器和并行加法器</h1>
<blockquote>
<p>加法器是由全加器再配以其他必要的逻辑电路组成的，根据组成加法器的全加器个数是单个还是多个，加法器有串行和并行之分。</p>
<ol>
<li>一位全加器</li>
</ol>
</blockquote>
]]></content>
      <tags>
        <tag>CS</tag>
        <tag>计组</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt-base</title>
    <url>/2023/12/22/qt-base/</url>
    <content><![CDATA[<p>前言：Qt 是一个跨平台的C++ 图形用户界面。它为应用程序开发者提供建立艺术级图形界面所需的所有功能。它是完全面向对象的，很容易扩展，并且允许真正的组件编程。</p>
<span id="more"></span>
<h3 id="创建第一个qt程序"><a class="markdownIt-Anchor" href="#创建第一个qt程序"></a> 创建第一个QT程序</h3>
<ul>
<li>主要是处理环境的搭建</li>
<li>main 函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    QApplication a(argc, argv);</span><br><span class="line"></span><br><span class="line">    qt5ui_widget widget;</span><br><span class="line">    widget.resize(800, 600);</span><br><span class="line"></span><br><span class="line">    widget.show();</span><br><span class="line">    return QApplication::exec();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>分析：</p>
<ul>
<li>QAPPlication a 应用程序对象有且只有一个</li>
<li>qt5ui_widget widget实例化窗口对象</li>
<li>widget.show()调用show 函数显示窗口</li>
<li>return QApplication::exec()让应用程序对象进入消息循环机制中，代码阻塞到当前行</li>
</ul>
<h3 id="按钮常用的api"><a class="markdownIt-Anchor" href="#按钮常用的api"></a> 按钮常用的API</h3>
<ul>
<li>QPushButton</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto *btn = new QPushButton;</span><br><span class="line">    btn-&gt;setParent(this);</span><br><span class="line">    btn-&gt;setText(&quot;第一个按钮&quot;);</span><br><span class="line"></span><br><span class="line">    auto *btn2 = new QPushButton(&quot;第二个按钮&quot;, this);</span><br><span class="line">    btn2-&gt;move(100, 100);</span><br><span class="line">    btn2-&gt;resize(100, 50);</span><br><span class="line"></span><br><span class="line">    auto *my_btn = new my_push_button;</span><br><span class="line">    my_btn-&gt;setParent(this);</span><br><span class="line">    my_btn-&gt;move(200, 0);</span><br><span class="line">    my_btn-&gt;setText(&quot;myselfbutton&quot;);</span><br><span class="line"></span><br><span class="line">    resize(800, 600);</span><br><span class="line">    setFixedSize(400, 400);</span><br><span class="line">    setWindowTitle(&quot;第一个窗口&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="对象树"><a class="markdownIt-Anchor" href="#对象树"></a> 对象树</h3>
<ol>
<li>当创建的对象在堆区时，如果指定它的父类是QObject派生下来的类或者它的子类派生类，可以不用管理释放的操作，将对象放入对象树中，QT自己会释放。</li>
<li>一定程度上简化了内存回收机制</li>
</ol>
<ul>
<li>窗口坐标系<br />
以左上角为原点，x 向右为正，y 向下为正方向</li>
</ul>
<h3 id="singal-and-slots"><a class="markdownIt-Anchor" href="#singal-and-slots"></a> singal and slots</h3>
<ol>
<li>连接函数：connect(my_btn, &amp;QPushButton::clicked, this, &amp;QWidget::close);</li>
<li>参数解释<br />
2.1. 参数1 信号的发送者<br />
2.2. 参数2 发送的信号（函数地址）<br />
2.3. 参数3 信号接收者<br />
2.4. 参数4 处理的slot函数（函数地址）</li>
<li>松散耦合</li>
</ol>
<ul>
<li>自定义信号和槽</li>
</ul>
<ol>
<li>自定义信号</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class teacher : public QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">public:</span><br><span class="line">    explicit teacher(QObject *parent);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 自定义信号 写在signal</span><br><span class="line">// 返回值void 只需写声明无需写实现</span><br><span class="line">// 可以有参可以重载</span><br><span class="line">signals:</span><br><span class="line">    void hungry();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>自定义槽</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class student : public QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">public:</span><br><span class="line">    explicit student(QObject *parent);</span><br><span class="line"></span><br><span class="line">//  早期QT 必须写到public slots,高级版本写在public 或全局作用域下</span><br><span class="line">//  返回值void 需要声明需要实现</span><br><span class="line">//  可以有参数可以重载</span><br><span class="line">    void treat();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>当自定义的信号和槽出现重载</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    连接代参数的 信号和槽</span><br><span class="line">    void (teacher:: *tc_signal)(QString) = &amp;teacher::hungry;</span><br><span class="line">    void (student:: *stu_slot)(const QString&amp;) = &amp;student::treat;</span><br><span class="line">    connect(tc_, tc_signal, stu_, stu_slot);</span><br><span class="line">    class_over();</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>拓展<br />
4.1 信号可以连接信号<br />
4.2 一个信号可以连接多个槽函数<br />
4.3 多个信号可以连接一个槽函数<br />
4.4 信号和槽函数参数类型必须类型一致<br />
4.5 信号参数个数可以多余槽函数参数的个数,剩下参数必须类型一致<br />
4.6. 信号槽可以断开 disconnect()</li>
<li>Lambda 表达式</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    lambda</span><br><span class="line">    auto btn5 = new QPushButton(&quot;Lambda&quot;, this);</span><br><span class="line">    btn5-&gt;move(0, 400);</span><br><span class="line">    connect(btn5, &amp;QPushButton::clicked, this, [=]()&#123;</span><br><span class="line">        emit tc_-&gt;hungry(&quot;酸菜鱼&quot;);</span><br><span class="line">        this-&gt;close();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="qmainwindow"><a class="markdownIt-Anchor" href="#qmainwindow"></a> QMainWindow</h3>
<ul>
<li><strong>菜单栏</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    菜单栏 最多只能有一个</span><br><span class="line">    auto bar = menuBar();</span><br><span class="line">//    将菜单栏放入主窗口中</span><br><span class="line">    setMenuBar(bar);</span><br><span class="line">//    创建菜单</span><br><span class="line">    auto file_menu = bar-&gt;addMenu(&quot;文件&quot;);</span><br><span class="line">    auto edit_menu = bar-&gt;addMenu(&quot;编辑&quot;);</span><br><span class="line">//    创建菜单项</span><br><span class="line">    file_menu-&gt;addAction(&quot;新建&quot;);</span><br><span class="line">    file_menu-&gt;addAction(&quot;打开&quot;);</span><br><span class="line">//    添加分割线</span><br><span class="line">    file_menu-&gt;addSeparator();</span><br><span class="line">    file_menu-&gt;addAction(&quot;保存&quot;);</span><br><span class="line">    file_menu-&gt;addAction(&quot;另存为&quot;);</span><br><span class="line">    edit_menu-&gt;addAction(&quot;拷贝&quot;);</span><br><span class="line">    edit_menu-&gt;addAction(&quot;粘贴&quot;);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>工具栏</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    工具栏 可以有多个</span><br><span class="line">    auto tool_bar = new QToolBar(this);</span><br><span class="line">    addToolBar(Qt::LeftToolBarArea, tool_bar);</span><br><span class="line">//    设置停靠范围</span><br><span class="line">    tool_bar-&gt;setAllowedAreas(Qt::LeftToolBarArea | Qt::RightToolBarArea);</span><br><span class="line">//    设置浮动</span><br><span class="line">    tool_bar-&gt;setFloatable(false);</span><br><span class="line">//    设置移动</span><br><span class="line">    tool_bar-&gt;setMovable(false);</span><br><span class="line">//    工具栏添加内容</span><br><span class="line">    tool_bar-&gt;addAction(&quot;设置&quot;);</span><br><span class="line">    tool_bar-&gt;addSeparator();</span><br><span class="line">    tool_bar-&gt;addAction(&quot;文本&quot;);</span><br><span class="line">//    工具栏添加控件</span><br><span class="line">    auto btn = new QPushButton(&quot;aaa&quot;, this);</span><br><span class="line">    tool_bar-&gt;addWidget(btn);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>状态栏</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    状态栏 最多只能有一个</span><br><span class="line">    auto status_bar = statusBar();</span><br><span class="line">//    设置到窗口中</span><br><span class="line">    setStatusBar(status_bar);</span><br><span class="line">//    放标签控件</span><br><span class="line">    auto label = new QLabel(&quot;提示&quot;);</span><br><span class="line">    auto label2 = new QLabel(&quot;字数&quot;);</span><br><span class="line">    auto label3 = new QLabel(&quot;统计&quot;);</span><br><span class="line">    status_bar-&gt;addWidget(label);</span><br><span class="line">    status_bar-&gt;addWidget(label2);</span><br><span class="line">    status_bar-&gt;addPermanentWidget(label3);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>浮动窗口</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    铆接部件（浮动窗口）可以有多个</span><br><span class="line">    auto dock_widget = new QDockWidget(&quot;浮动&quot;, this);</span><br><span class="line">    addDockWidget(Qt::BottomDockWidgetArea, dock_widget);</span><br><span class="line">    dock_widget-&gt;setAllowedAreas(Qt::BottomDockWidgetArea | Qt::TopDockWidgetArea);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>中心部件</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    设置中心部件 只有一个</span><br><span class="line">    auto text_edit = new QTextEdit(&quot;中心部件&quot;, this);</span><br><span class="line">    setCentralWidget(text_edit);</span><br></pre></td></tr></table></figure>
<h3 id="对话框"><a class="markdownIt-Anchor" href="#对话框"></a> 对话框</h3>
<ul>
<li>模态对话框</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   connect(ui-&gt;actionNew, &amp;QAction::triggered, [=]() &#123;</span><br><span class="line">//        对话框 分类</span><br><span class="line">//      模态对话框（不可以对其他对话框操作） 和 非模态对话框（可以对其他对话框操作）</span><br><span class="line">//      模态创建</span><br><span class="line">        QDialog dlg(this);</span><br><span class="line">        dlg.resize(200, 100);</span><br><span class="line">        dlg.exec();</span><br><span class="line">        std::cout &lt;&lt; &quot;模态对话框弹出了&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>非模态对话框</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> connect(ui-&gt;actionSave, &amp;QAction::triggered, [=]() &#123;</span><br><span class="line">//        非模态创建</span><br><span class="line">        auto dlg2 = new QDialog(this);</span><br><span class="line">        dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose);</span><br><span class="line">        dlg2-&gt;resize(200, 100);</span><br><span class="line">        dlg2-&gt;show();</span><br><span class="line">        std::cout &lt;&lt; &quot;非模态对话框弹出了&quot; &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>消息对话框</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">connect(ui-&gt;actionItem, &amp;QAction::triggered, [=]() &#123;</span><br><span class="line">//        消息对话框</span><br><span class="line">//        错误对话框</span><br><span class="line">        QMessageBox::critical(this, &quot;critical&quot;, &quot;错误&quot;);</span><br><span class="line">//        信息对话框</span><br><span class="line">        QMessageBox::information(this, &quot;information&quot;, &quot;信息&quot;);</span><br><span class="line">//        提问对话框</span><br><span class="line">//        参数分析：参数1，父亲 参数2 标题 参数3 提示内容 参数4 按键类型 参数5 默认关联回车键</span><br><span class="line">        auto ret = QMessageBox::question(this, &quot;question&quot;, &quot;提问&quot;, QMessageBox::Save | QMessageBox::Cancel, QMessageBox::Cancel);</span><br><span class="line">        if (ret == QMessageBox::Save)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; &quot;选择的是保存&quot; &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; &quot;选择的取消&quot; &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//        警告对话框</span><br><span class="line">        QMessageBox::warning(this, &quot;warning&quot;, &quot;警告&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>其他标准对话框</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//        其他标准对话框</span><br><span class="line">//        颜色对话框</span><br><span class="line">        auto color = QColorDialog::getColor(QColor(255, 0, 0));</span><br><span class="line">        fmt::println(&quot;r:&#123;&#125;, g:&#123;&#125;, b:&#123;&#125;&quot;, color.red(), color.green(), color.blue());</span><br><span class="line"></span><br><span class="line">//        文件对话框</span><br><span class="line">        QFileDialog::getOpenFileName(this, &quot;打开文件&quot;, &quot;D:/dev&quot;, &quot;(*.exe)&quot;);</span><br><span class="line">//        字体对话框</span><br><span class="line">        bool flag;</span><br><span class="line">        auto front = QFontDialog::getFont(&amp;flag, this);</span><br><span class="line">        fmt::print(&quot;字体：&#123;&#125;， 字号：&#123;&#125;， 是否加粗：&#123;&#125;， 是否倾斜:&#123;&#125;\n&quot;,</span><br><span class="line">                   front.family().toStdString(), front.pointSize(), front.bold(), front.italic());</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="控件布局"><a class="markdownIt-Anchor" href="#控件布局"></a> 控件布局</h3>
<ul>
<li>按钮</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    设置默认选中的按钮</span><br><span class="line">    ui-&gt;radioButtion_man-&gt;setChecked(true);</span><br><span class="line">//    设置选中女的响应</span><br><span class="line">    connect(ui-&gt;radioButton_woman, &amp;QRadioButton::clicked, [=]() &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;女的被选中了&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">//    多选按钮 2选中 0未选 1半选</span><br><span class="line">    connect(ui-&gt;checkBox_5_lady, &amp;QCheckBox::stateChanged, [=](int state) &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;state = &quot; &lt;&lt; state &lt;&lt; std::endl;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">//  listWidget</span><br><span class="line">    auto item = new QListWidgetItem(&quot;锄禾日当午&quot;);</span><br><span class="line">    auto item1 = new QListWidgetItem(&quot;汗滴禾下土&quot;);</span><br><span class="line">    auto item2 = new QListWidgetItem(&quot;谁知盘中餐&quot;);</span><br><span class="line">    auto item3 = new QListWidgetItem(&quot;粒粒皆辛苦&quot;);</span><br><span class="line">    ui-&gt;listWidget-&gt;addItem(item);</span><br><span class="line">    ui-&gt;listWidget-&gt;addItem(item1);</span><br><span class="line">    ui-&gt;listWidget-&gt;addItem(item2);</span><br><span class="line">    ui-&gt;listWidget-&gt;addItem(item3);</span><br><span class="line">    item-&gt;setTextAlignment(Qt::AlignHCenter);</span><br><span class="line">    item1-&gt;setTextAlignment(Qt::AlignHCenter);</span><br><span class="line">    item2-&gt;setTextAlignment(Qt::AlignHCenter);</span><br><span class="line">    item3-&gt;setTextAlignment(Qt::AlignHCenter);</span><br><span class="line"></span><br><span class="line">    QStringList list;</span><br><span class="line">    list &lt;&lt; &quot;杜甫 登高&quot;</span><br><span class="line">         &lt;&lt; &quot;风急天高猿啸哀，渚清沙白鸟飞回。&quot;</span><br><span class="line">         &lt;&lt; &quot;无边落木萧萧下，不尽长江滚滚来。&quot;</span><br><span class="line">         &lt;&lt; &quot;万里悲秋常作客，百年多病独登台。&quot;</span><br><span class="line">         &lt;&lt; &quot;艰难苦恨繁霜鬓，潦倒新停浊酒杯。&quot;;</span><br><span class="line">    ui-&gt;listWidget-&gt;addItems(list);</span><br><span class="line">    for (int i = 0; i &lt; ui-&gt;listWidget-&gt;count(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;listWidget-&gt;item(i)-&gt;setTextAlignment(Qt::AlignHCenter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>treeWidget</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    treeWidget</span><br><span class="line">//    设置水平头</span><br><span class="line">    ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList() &lt;&lt; &quot;英雄&quot; &lt;&lt; &quot;英雄介绍&quot;);</span><br><span class="line"></span><br><span class="line">    auto tree_item = new QTreeWidgetItem(QStringList() &lt;&lt; &quot;力量&quot;);</span><br><span class="line">    auto tree_item1 = new QTreeWidgetItem(QStringList() &lt;&lt; &quot;敏捷&quot;);</span><br><span class="line">    auto tree_item2 = new QTreeWidgetItem(QStringList() &lt;&lt; &quot;智力&quot;);</span><br><span class="line"></span><br><span class="line">//    加载顶层的节点</span><br><span class="line">    ui-&gt;treeWidget-&gt;addTopLevelItem(tree_item);</span><br><span class="line">    ui-&gt;treeWidget-&gt;addTopLevelItem(tree_item1);</span><br><span class="line">    ui-&gt;treeWidget-&gt;addTopLevelItem(tree_item2);</span><br><span class="line"></span><br><span class="line">//    追加子节点</span><br><span class="line">    new QTreeWidgetItem(tree_item,</span><br><span class="line">                        QStringList() &lt;&lt; &quot;刚被猪&quot; &lt;&lt; &quot;前排坦克， 能在吸收伤害的同时造成可观的范围输出&quot;);</span><br><span class="line">    new QTreeWidgetItem(tree_item1,</span><br><span class="line">                        QStringList() &lt;&lt; &quot;刚被猪&quot; &lt;&lt; &quot;前排坦克， 能在吸收伤害的同时造成可观的范围输出&quot;);</span><br><span class="line">    new QTreeWidgetItem(tree_item2,</span><br><span class="line">                        QStringList() &lt;&lt; &quot;刚被猪&quot; &lt;&lt; &quot;前排坦克， 能在吸收伤害的同时造成可观的范围输出&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>tableWidget</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//    TableWidget</span><br><span class="line">//    set column count</span><br><span class="line">    ui-&gt;tableWidget-&gt;setColumnCount(3);</span><br><span class="line">//    set horizontal header</span><br><span class="line">    ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList() &lt;&lt; &quot;姓名&quot; &lt;&lt; &quot;性别&quot; &lt;&lt; &quot;年龄&quot;);</span><br><span class="line">//    set row number</span><br><span class="line">    ui-&gt;tableWidget-&gt;setRowCount(5);</span><br><span class="line">//    set content</span><br><span class="line">    QStringList names, sex_list;</span><br><span class="line">    names &lt;&lt; &quot;张三&quot; &lt;&lt; &quot;赵云&quot; &lt;&lt; &quot;张飞&quot; &lt;&lt; &quot;关羽&quot; &lt;&lt; &quot;花木兰&quot;;</span><br><span class="line">    sex_list &lt;&lt; &quot;男&quot; &lt;&lt; &quot;男&quot; &lt;&lt; &quot;男&quot; &lt;&lt; &quot;男&quot; &lt;&lt; &quot;女&quot;;</span><br><span class="line">    for (int i = 0; i &lt; 5; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        int col = 0;</span><br><span class="line">        ui-&gt;tableWidget-&gt;setItem(i, col++, new QTableWidgetItem(names[i]));</span><br><span class="line">        ui-&gt;tableWidget-&gt;setItem(i, col++, new QTableWidgetItem(sex_list[i]));</span><br><span class="line">        ui-&gt;tableWidget-&gt;setItem(i, col++, new QTableWidgetItem(QString::number(18+i)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>其他控件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    stackWidget</span><br><span class="line">//    set default pos</span><br><span class="line">    ui-&gt;stackedWidget-&gt;setCurrentIndex(1);</span><br><span class="line"></span><br><span class="line">    connect(ui-&gt;pushButtonStack_1, &amp;QPushButton::clicked, [=]() &#123;</span><br><span class="line">        ui-&gt;stackedWidget-&gt;setCurrentIndex(0);</span><br><span class="line">    &#125;);</span><br><span class="line">    connect(ui-&gt;pushButtonStack_2, &amp;QPushButton::clicked, [=]() &#123;</span><br><span class="line">        ui-&gt;stackedWidget-&gt;setCurrentIndex(1);</span><br><span class="line">    &#125;);</span><br><span class="line">    connect(ui-&gt;pushButtonStack_3, &amp;QPushButton::clicked, [=]() &#123;</span><br><span class="line">        ui-&gt;stackedWidget-&gt;setCurrentIndex(2);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//    下拉框</span><br><span class="line">    ui-&gt;comboBox-&gt;addItems(QStringList() &lt;&lt; &quot;问界M7&quot; &lt;&lt; &quot;U8&quot; &lt;&lt; &quot;比亚迪&quot;);</span><br><span class="line">    connect(ui-&gt;pushButtonComboBox, &amp;QPushButton::clicked, [=]() &#123;</span><br><span class="line">        ui-&gt;comboBox-&gt;setCurrentIndex(1);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">//    QLabel</span><br><span class="line">    ui-&gt;labelPicture-&gt;setPixmap(QPixmap(&quot;../images/panda.jpg&quot;));</span><br><span class="line">//    show .gif</span><br><span class="line">    auto movie = new QMovie(&quot;../images/dog.gif&quot;);</span><br><span class="line">    ui-&gt;labelGif-&gt;setMovie(movie);</span><br><span class="line">    movie-&gt;start();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>自定义控件
<ol>
<li>创建自己UI控件类</li>
<li>在主UI中使用Widget 提升为自己的类</li>
<li>在创建的类中使用信号槽函数实现相关的功能</li>
<li>可以在自己实现的类中定义接口</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">small_widget::small_widget(QWidget *parent) :</span><br><span class="line">        QWidget(parent), ui(new Ui::small_widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line">//    spinbox 移动</span><br><span class="line"></span><br><span class="line">    void (QSpinBox:: *spin_signal)(int) = &amp;QSpinBox::valueChanged;</span><br><span class="line">    connect(ui-&gt;spinBox, spin_signal, ui-&gt;horizontalScrollBar, &amp;QScrollBar::setValue);</span><br><span class="line">//    horizontal scroll bar</span><br><span class="line">    connect(ui-&gt;horizontalScrollBar, &amp;QScrollBar::valueChanged, ui-&gt;spinBox, &amp;QSpinBox::setValue);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int small_widget::get_value() const</span><br><span class="line">&#123;</span><br><span class="line">    return ui-&gt;spinBox-&gt;value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void small_widget::set_value(int num)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;spinBox-&gt;setValue(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="qt中的事件"><a class="markdownIt-Anchor" href="#qt中的事件"></a> QT中的事件</h3>
<ul>
<li>鼠标事件
<ol>
<li>鼠标进入： enterEvent</li>
<li>鼠标离开：leaveEvent</li>
<li>按下：mousePressedEvent</li>
<li>释放：mouseReleaseEvent</li>
<li>移动：mouseMoveEvent</li>
<li>ev-&gt;button() 可以判断按键,Qt::LeftButton</li>
<li>ev-&gt;buttons() 判断组合键 在move 时使用</li>
</ol>
</li>
<li>定时器（timerEvent）<br />
1.事件 timerEvent(QTimerEvent *ev);<br />
2. 启动定时器 startTimer(1000)<br />
3. timerId() 定时器唯一标识<br />
4. QTimer 类的使用，推荐方式  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">main_widget::main_widget(QWidget *parent) :</span><br><span class="line">        QWidget(parent), ui(new Ui::main_widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//    get</span><br><span class="line">    connect(ui-&gt;pushButtonGetValue, &amp;QPushButton::clicked, [=]() &#123;</span><br><span class="line">        std::cout &lt;&lt; ui-&gt;widget-&gt;get_value() &lt;&lt; std::endl;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">//    set</span><br><span class="line">    connect(ui-&gt;pushButtonHalfValue, &amp;QPushButton::clicked, [=]() &#123;</span><br><span class="line">        ui-&gt;widget-&gt;set_value(50);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">//    启动定时器 单位：毫秒ms</span><br><span class="line">    timer_id1 = startTimer(1000);</span><br><span class="line">    timer_id2 = startTimer(2000);</span><br><span class="line">    //    定时器第二种使用方式 推荐的方式</span><br><span class="line">    QTimer *timer = new QTimer(this);</span><br><span class="line">    timer-&gt;start(500);</span><br><span class="line"></span><br><span class="line">    connect(timer, &amp;QTimer::timeout, [=]() &#123;</span><br><span class="line">        static int i = 0;</span><br><span class="line">        ui-&gt;labelTimer3-&gt;setText(QString::number(i++));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main_widget::~main_widget()</span><br><span class="line">&#123;</span><br><span class="line">    delete ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main_widget::timerEvent(QTimerEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    if (timer_id1 == event-&gt;timerId())</span><br><span class="line">    &#123;</span><br><span class="line">        static int i = 0;</span><br><span class="line">        ui-&gt;labelTimer1-&gt;setText(QString::number(i++));</span><br><span class="line">    &#125;</span><br><span class="line">    if (timer_id2 == event-&gt;timerId())</span><br><span class="line">    &#123;</span><br><span class="line">        static int j = 0;</span><br><span class="line">        ui-&gt;labelTimer2-&gt;setText(QString::number(j++));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>QEvent
<ol>
<li>用于事件的分发</li>
<li>可以做事件的拦截不建议</li>
<li>bool event(Qevent *e) 返回值true 代表不向下分发</li>
<li>e.type() == QEvent::MouseButtonPressed 用于事件判断</li>
</ol>
</li>
<li>eventFilter
<ol>
<li>给控件安装事件过滤器</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    //    1.安装事件过滤器</span><br><span class="line">    ui-&gt;label-&gt;installEventFilter(this);</span><br><span class="line">//    2. 重写eventFilter</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>重写eventFilter</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    bool main_widget::eventFilter(QObject *watched, QEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">    if (watched == ui-&gt;label)</span><br><span class="line">    &#123;</span><br><span class="line">        if (event-&gt;type() == QEvent::MouseButtonPress)</span><br><span class="line">        &#123;</span><br><span class="line">            if (auto ev = dynamic_cast&lt;QMouseEvent*&gt;(event))</span><br><span class="line">            &#123;</span><br><span class="line">                print_helper(&quot;EventFilter: &quot;, ev);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//    其他默认处理</span><br><span class="line">    return QObject::eventFilter(watched, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>QPaint 绘图事件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void paint_widget::paintEvent(QPaintEvent *event)</span><br><span class="line">&#123;</span><br><span class="line">//    实例化画家对象 this 指定绘图设备</span><br><span class="line">    QPainter painter(this);</span><br><span class="line"></span><br><span class="line">//    设置画笔</span><br><span class="line">    QPen pen(QColor(255, 0, 0));</span><br><span class="line">//    设置画笔的宽度</span><br><span class="line">    pen.setWidth(3);</span><br><span class="line">//    设置画笔风格</span><br><span class="line">    pen.setStyle(Qt::DotLine);</span><br><span class="line">    painter.setPen(pen);</span><br><span class="line"></span><br><span class="line">//    设置画刷</span><br><span class="line">    QBrush brush(Qt::cyan);</span><br><span class="line">//    设置画刷的风格</span><br><span class="line">    brush.setStyle(Qt::Dense3Pattern);</span><br><span class="line">//    让画家使用画刷</span><br><span class="line">    painter.setBrush(brush);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//    line</span><br><span class="line">    painter.drawLine(0, 0, 500, 500);</span><br><span class="line">//    circle</span><br><span class="line">    painter.drawEllipse(QPoint&#123;200, 200&#125;, 100, 100);</span><br><span class="line">//    矩形</span><br><span class="line">    painter.drawRect(100, 100, 200, 200);</span><br><span class="line">//    矩形文字</span><br><span class="line">    painter.drawText(QRect&#123;10, 400, 200, 50&#125;, &quot;好好学习天天向上&quot;);</span><br><span class="line"></span><br><span class="line">    QWidget::paintEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>QPinter 高级设置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> //    高级设置</span><br><span class="line">//    抗锯齿的设置</span><br><span class="line">    painter.setRenderHint(QPainter::Antialiasing);</span><br><span class="line"> //    对画家进行移动</span><br><span class="line">    painter.translate(100, 0);</span><br><span class="line">//    保持画家状态</span><br><span class="line">    painter.save();</span><br><span class="line">    painter.drawRect(500, 50, 100, 100);</span><br><span class="line">//    还原画家的状态</span><br><span class="line">    painter.restore();</span><br><span class="line"></span><br><span class="line">    painter.drawRect(600, 50, 100, 100);</span><br><span class="line">    painter.drawPixmap(800, 800, QPixmap(&quot;../images/panda.jpg&quot;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//    移动举行</span><br><span class="line">    painter.drawRect(pos_x, 0, 100, 100);</span><br><span class="line">//    如果超出屏幕从 0 开始重新绘制</span><br><span class="line">    if (pos_x &gt; this-&gt;width())</span><br><span class="line">        pos_x = -100;</span><br><span class="line">    QWidget::paintEvent(event);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">paint_widget::paint_widget(QWidget *parent) :</span><br><span class="line">        QWidget(parent), ui(new Ui::paint_widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line"></span><br><span class="line">    connect(ui-&gt;pushButton, &amp;QPushButton::clicked, [=]() &#123;</span><br><span class="line">        pos_x += 20;</span><br><span class="line">        update();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>QPainterDevice<br />
<strong>分类：QPixmap QImage QBitmap(黑白) QPicture QWidget</strong></li>
</ul>
<ol>
<li>QPixmap 对不同的平台做了显示优化</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    Pixmap 绘图设备,专门为平台做了显示优化</span><br><span class="line">    QPixmap pix(300, 300);</span><br><span class="line">//    填充颜色</span><br><span class="line">    pix.fill(Qt::white);</span><br><span class="line">//    声明画家</span><br><span class="line">    QPainter painter(&amp;pix);</span><br><span class="line">    painter.setPen(QPen(Qt::green));</span><br><span class="line">    painter.drawEllipse(QPoint&#123;150, 150&#125;, 150, 150);</span><br><span class="line"></span><br><span class="line">//    保存</span><br><span class="line">    pix.save(&quot;../images/circle.png&quot;);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>QImage 可以对像素进行修改</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    QImage 绘图设备,可以对像素进行访问</span><br><span class="line">    QImage img(600, 400, QImage::Format_RGB32);</span><br><span class="line">    img.fill(Qt::white);</span><br><span class="line"></span><br><span class="line">    QPainter painter_img(&amp;img);</span><br><span class="line">    QPen pen_img(Qt::red);</span><br><span class="line">    pen_img.setWidth(3);</span><br><span class="line">    painter_img.setPen(pen_img);</span><br><span class="line">    painter_img.drawEllipse(QPoint&#123;300, 200&#125;, 300, 200);</span><br><span class="line"></span><br><span class="line">    img.save(&quot;../images/eclipse.png&quot;);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>QPicture 记录和重现绘图指令</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//    QPicture 绘图设备，可以记录和重现绘图指令</span><br><span class="line">    QPicture pic;</span><br><span class="line">    QPainter painter_pic;</span><br><span class="line">//    开始绘图</span><br><span class="line">    painter_pic.begin(&amp;pic);</span><br><span class="line">    painter_pic.setPen(QPen(Qt::blue));</span><br><span class="line">    painter_pic.drawEllipse(QPoint&#123;300, 300&#125;, 150, 150);</span><br><span class="line">//    结束绘图</span><br><span class="line">    painter_pic.end();</span><br><span class="line">    pic.save(&quot;../images/pic.data&quot;);</span><br><span class="line"></span><br><span class="line">    //    QPicture 重现绘图指令</span><br><span class="line">    QPicture pic;</span><br><span class="line">    pic.load(&quot;../images/pic.data&quot;);</span><br><span class="line">    painter.drawPicture(300, 300, pic);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="qfile-对文件进行读写"><a class="markdownIt-Anchor" href="#qfile-对文件进行读写"></a> QFile 对文件进行读写</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QString path = QFileDialog::getOpenFileName(this, &quot;打开文件&quot;, &quot;../&quot;);</span><br><span class="line">//        将路径放入lineEdit中</span><br><span class="line">        ui-&gt;lineEdit-&gt;setText(path);</span><br><span class="line">//        将内容读取到textEdit中</span><br><span class="line">//        QFile 默认格式UTF-8 编码类 QTextCodec</span><br><span class="line">        QFile file(path);</span><br><span class="line">//        设置打开方式</span><br><span class="line">        file.open(QIODevice::ReadOnly);</span><br><span class="line">        auto arr = file.readAll();</span><br><span class="line">//        将数据读取到文本框中</span><br><span class="line">        ui-&gt;textEdit-&gt;setText(arr);</span><br><span class="line">        file.close();</span><br><span class="line"></span><br><span class="line">        file.open(QIODevice::Append);</span><br><span class="line">        file.write(&quot;/**这是一个注释*/&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="qfileinfo-文件信息"><a class="markdownIt-Anchor" href="#qfileinfo-文件信息"></a> QFileInfo 文件信息</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//        文件信息类：QFileInfo</span><br><span class="line">        QFileInfo info(path);</span><br><span class="line">        fmt::print(&quot;大小：&#123;&#125;\n文件名：&#123;&#125;\n文件路径：&#123;&#125;\n后缀名：&#123;&#125;\n&quot;,</span><br><span class="line">                   info.size(), info.fileName().toStdString(),</span><br><span class="line">                   info.filePath().toStdString(), info.suffix().toStdString());</span><br><span class="line">        fmt::print(&quot;创建时间：&#123;&#125;\n最后修改时间：&#123;&#125;\n拥有者: &#123;&#125;\n&quot;,</span><br><span class="line">                   info.birthTime().toString(&quot;yyyy-MM-dd hh:mm:ss&quot;).toStdString(),</span><br><span class="line">                   info.lastModified().toString(&quot;yyyy-MM-dd hh:mm:ss&quot;).toStdString(),</span><br><span class="line">                   info.owner().toStdString());</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
        <tag>计算机图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 教程</title>
    <url>/2025/03/02/vim/</url>
    <content><![CDATA[<h2 id="什么是vim"><a class="markdownIt-Anchor" href="#什么是vim"></a> 什么是Vim</h2>
<ul>
<li>Vim是最流行的文本编辑软件之一，有&quot;编辑器之神&quot;的美誉</li>
<li>社区活跃，插件丰富，生态优秀</li>
<li>许多IDE都支持Vim模式：VSCode、JetBrains系列</li>
</ul>
<span id="more"></span>
<h2 id="vim-在编程中的小tips"><a class="markdownIt-Anchor" href="#vim-在编程中的小tips"></a> vim 在编程中的小Tips</h2>
<ol>
<li>光标在函数上时，gd 跳转到函数定义或声明；gd— go to definition</li>
<li>gt —在标签中向后跳转; gT — 在标签中向前跳转；gi—快速跳转到上次编辑的位置进入插入模式；</li>
<li>ctrl + o 依次返回光标的位置；</li>
<li>ctrl + i：跳回下一个位置;</li>
<li>在终端中输入命令 如 git clone xxxxxxxxxxxxxxxxxxxxxxxxxx或时其他复杂命令很长的修改该过程如下：ctrl+a 移动行首；<br />
ctrl+e 移动行尾；ctrl+f 往后移动；ctrl+b 往前移动；</li>
</ol>
<h2 id="normal模式基本移动"><a class="markdownIt-Anchor" href="#normal模式基本移动"></a> Normal模式：基本移动</h2>
<ul>
<li>hjkl：上下左右</li>
<li>gg：跳到第一行(类似Home键) G：跳到最后一行（类似End键）</li>
<li>&lt;Ctrl-u&gt;/&lt;Ctrl-b&gt;：往上翻半页/一页(类似PageUp键) &lt;Ctrl-d&gt;/&lt;Ctrl-f&gt;：往下翻半页/一页（类似PageDown键）</li>
<li>{Lineno}gg：跳到第lineno 行</li>
<li>zz/zt/zb：光标行设置为屏幕居中/屏幕第一行/屏幕最后一行</li>
<li>L — 移动屏幕尾；H—移动屏幕首；M—移动到屏幕中；</li>
</ul>
<h2 id="进入insert模式"><a class="markdownIt-Anchor" href="#进入insert模式"></a> 进入Insert模式</h2>
<p>Normal模式下通过特定命令进入Insert模式</p>
<ul>
<li>i：代表&quot;insert&quot;，当前光标之前开始输入</li>
<li>a：代表&quot;append&quot;，当前光标之后开始输入</li>
<li>o: 下方插入新的一行，然后开始输入</li>
<li>s：删除当前光标的字符，然后开始输入</li>
<li>r: 替换模式，ra — 将当前字符替换为a</li>
<li>R: 替换模式，替换行，输入内容会覆盖当前内容；</li>
<li>I：在本行的开头开始输入</li>
<li>A：在本行的末尾开始输入</li>
<li>O：上方插入新的一行，然后开始输入</li>
<li>S：删除当前行，然后开始输入<br />
Tips：大写字母和小写字母的操作存在关联，可以一起记忆</li>
</ul>
<h2 id="进入command模式"><a class="markdownIt-Anchor" href="#进入command模式"></a> 进入Command模式</h2>
<p>Normal模式下输入：进入Command模式</p>
<ul>
<li>w：保存当前文件:q：退出</li>
<li>q！：放弃当前更改，然后退出:wq：保存当前更改，然后退出</li>
<li>h{command}：显示关于命令的帮助</li>
<li>&lt;Esc&gt;回到Normal模式</li>
</ul>
<h2 id="进入visual模式"><a class="markdownIt-Anchor" href="#进入visual模式"></a> 进入Visual模式</h2>
<ul>
<li>Normal模式下按v进入可视模式</li>
<li>进入可视模式后可以用Normal模式下的移动命令选择文本</li>
<li>可视模式下×/y：剪切/复制；</li>
<li>回到Normal模式下p：粘贴</li>
<li>Normal模式下按V进入行可视模式，一次选中一整行，在需要选中多行时很方便</li>
<li>&lt;Esc&gt;回到Normal模式</li>
</ul>
<h2 id="vim移动与编辑"><a class="markdownIt-Anchor" href="#vim移动与编辑"></a> Vim：移动与编辑</h2>
<h3 id="基于单词的移动"><a class="markdownIt-Anchor" href="#基于单词的移动"></a> 基于单词的移动</h3>
<p>简单的hjkl显然无法满足我们的需要</p>
<ul>
<li>w：代表&quot;word&quot;，跳转到下一处单词的开头</li>
<li>b：代表&quot;back&quot;，跳转到上一处单词的开头</li>
<li>e：代表&quot;end&quot;，跳转到下一处单词的结尾</li>
<li>ge：e的反向版本，跳转到上一处单词的结尾<br />
wbe大写版本WBE对应的单词是连续的非空字符</li>
</ul>
<h3 id="基于搜索的移动行内搜索"><a class="markdownIt-Anchor" href="#基于搜索的移动行内搜索"></a> 基于搜索的移动行内搜索</h3>
<ul>
<li>f{char}/t{char}：跳转到本行下一个char字符出现处/出现前</li>
<li>；/，：快速向后/向前重复ft查找</li>
<li>F{char}/T{char}：往前搜索而非往后文件中搜索：</li>
<li>/{pattern}：跳转到本文件中下一个pattern出现的地方</li>
<li>？{pattern}：跳转到本文件中上一个pattern出现的地方</li>
<li>pattern可以是正则表达式</li>
<li>*：等价于/{pattern}，pattern是当前光标下的单词</li>
<li>nN：快速重复／查找</li>
</ul>
<h3 id="基于标记的移动"><a class="markdownIt-Anchor" href="#基于标记的移动"></a> 基于标记的移动</h3>
<ul>
<li>m{mark}：把当前位置标记为mark</li>
<li>`{mark}：跳转到名为mark的标记位置<br />
mark是a-z的字符<br />
常用场景：当需要临时离开当前光标处，做一些事情后再快速地回来<br />
我比较习惯用的标记是mm<br />
内置标记：</li>
<li>``：上次跳转前的位置</li>
<li>`.: 上次修改的位置</li>
<li>`^：上次插入的位置</li>
</ul>
<h3 id="其它实用的跳转"><a class="markdownIt-Anchor" href="#其它实用的跳转"></a> 其它实用的跳转</h3>
<ul>
<li>^／$：跳转到本行的开始/结尾</li>
<li>%：跳到匹配的配对符（括号等）处</li>
</ul>
<h3 id="快速编辑"><a class="markdownIt-Anchor" href="#快速编辑"></a> 快速编辑</h3>
<p><img src="/images/vim-Action.png" alt="Vim-Action" /></p>
<h3 id="重复操作命令"><a class="markdownIt-Anchor" href="#重复操作命令"></a> 重复操作：.命令</h3>
<ul>
<li>.：重复上一次修改</li>
<li>u：撤销上一次修改</li>
<li>&lt;Ctrl-r&gt;：重做上一次修改<br />
. 命令非常适合用于需要多次重复某一个修改动作的场景省去了重复输入命令，大大提高效率</li>
</ul>
<h3 id="批量操作数字动作"><a class="markdownIt-Anchor" href="#批量操作数字动作"></a> 批量操作：数字+动作</h3>
<p>{count}{action}：重复count次action<br />
动作动作可以是移动动作或是编辑动作</p>
<ul>
<li>4j：向下移动4行</li>
<li>3dw：删除3个单词</li>
<li>2yy：复制2行</li>
<li>4p：粘贴4次</li>
</ul>
<p>数字+动作，是一种重要的批量操作方式，命令直观，语义明确</p>
<ul>
<li>．命令可以直观地看到每一次的变化，在合适的时候停止</li>
<li>数字+动作则需要预先知道动作的次数</li>
</ul>
<h3 id="文本对象操作"><a class="markdownIt-Anchor" href="#文本对象操作"></a> 文本对象操作</h3>
<p>textobjects：语义化的文本片段<br />
格式：i/a+对象常见的对象：</p>
<ul>
<li>w／w，s，p，t，b,（， <code>[</code>, <code>&#123;</code>：单词/联单词、句子、段落、标签、()、[]、{}；<br />
*（／），［/」，{／}，&lt;／&gt;，‘／“：配对符定义的对象<br />
i代表&quot;inner”，内部；<br />
a代表&quot;a&quot;，额外包括周围的空格或配对符</li>
</ul>
<h3 id="文本对象操作例子"><a class="markdownIt-Anchor" href="#文本对象操作例子"></a> 文本对象操作：例子</h3>
<p>文本对象提供了为文本赋予了结构化的含义，允许我们以一个语义对象作为操作单元<br />
<strong>[count]{operator}{textobjects}</strong></p>
<ul>
<li>diw：删除一个单词</li>
<li>ci<code>(</code>：修改小括号内部</li>
<li>yi<code>&#123;</code>：复制大括号内部</li>
</ul>
<p>通过组合operator与textobjects，可以对不同的语义对象实施不同的操作，不仅十分灵活，而且语义明确，容易记忆<br />
配合：命令或【count】可以简单地完成多次对特定语义对象的操作</p>
<h3 id="textobjectsvsmotion"><a class="markdownIt-Anchor" href="#textobjectsvsmotion"></a> textobjectsVSmotion</h3>
<p>{operator}{motion}与{operator}{textobjects} 解耦了操作与操作的对象，大大提升了操作效率</p>
<ul>
<li>motion是能够移动光标的命令，可以独立使用（如wbe）</li>
<li>文本对象只能跟在operator后面，不能独立使用（如iw）</li>
<li>motion通过光标的移动确定operator的作用范围，范围更加灵活但不够明确</li>
<li>textobjects则是显式地指定操作的对象，范围明确</li>
</ul>
<h3 id="操作符与命令补充"><a class="markdownIt-Anchor" href="#操作符与命令补充"></a> 操作符与命令补充</h3>
<ul>
<li>gu/gU/g~：操作符，转小写/转大写/翻转大小写 例如：guiw, gUiw, 符合{Operator}{textobjects} 或者 {operator}{motion}</li>
<li>J：join，连接两行</li>
<li>&lt;Ctrl-a&gt;/&lt;Ctrl-x&gt;：增加数字/减少数字</li>
<li>g&lt;Ctrl-A&gt;：创建递增序列</li>
<li>&lt;/&gt;：左/右缩进</li>
</ul>
<p><strong>建议：让你的命令更模块化<br />
尽量使你的命令更模块化，具有清晰的含义与作用范围，以便于与·等命令协同例如：daw比dw具有更清晰的语义，也更模块化</strong></p>
<h3 id="寄存器"><a class="markdownIt-Anchor" href="#寄存器"></a> 寄存器</h3>
<p>Vim提供了许多寄存器用于存放内容，可以理解为剪贴板<br />
一个字符对应一个寄存器（如a-z，0-9）特别的寄存器：</p>
<ul>
<li>&quot;：默认寄存器，平时复制、删除的内容都放在里面</li>
<li>%：当前文件名</li>
<li>.：上一次插入的内容</li>
<li>:：上一次执行的命令</li>
</ul>
<p>通过：reg{register}查看对应寄存器中的内容</p>
<h3 id="指定寄存器"><a class="markdownIt-Anchor" href="#指定寄存器"></a> 指定寄存器</h3>
<p>在复制/删除/粘贴等操作前加上&quot;{register}就可以指定本次操作所用的寄存器<br />
只要涉及寄存器操作的都可以这样指定</p>
<ul>
<li>&quot;ayy：将这一行复制到a寄存器中</li>
<li>&quot;bdiw：将单词删除，保存到b寄存器中</li>
<li>&quot;cp：将c寄存器中的内容粘贴出来</li>
</ul>
<p>常见用途：将想要持久保存的文本放到特定寄存器里，随时进行粘贴，避免被覆盖<br />
<strong>寄存器字符大写：添加（append）而非覆盖</strong></p>
<p><strong>宏</strong><br />
宏（Macro）：录制一系列键盘操作，并允许我们重放这些操作操作序列存储在指定的寄存器中</p>
<ul>
<li>q{register}：开始录制宏，存在寄存器register 中</li>
<li>录制过程中按q退出录制</li>
<li>@{register}：重放寄存器register中的操作</li>
<li>@@：重放上一次宏操作</li>
</ul>
<p><strong>常见用法：q{register}录制一段操作，@{register}重放，然后一直@@重放注意：：命令对宏不生效，．命令只记录上一次修改，而宏可能包含多次修改</strong><br />
命令：.,$ normal @a</p>
<p><em>建议：让你的宏对连续重放友好</em></p>
<ol>
<li>让你的光标移动更加general</li>
<li>假设你要在多个特定的位置进行特定的操作，一个好的习惯是在宏录制的最后，跳转到下一个需要编辑的位置<br />
即，宏包括【编辑动作】+【跳转到下一个需要编辑的位置】<br />
这样一来，连续重放就可以实现对所有需要编辑的位置进行编辑操作通过大写的寄存器，在宏的后面添加命令<br />
如果宏是重放友好的，允许我们使用[count]@{register}直接重放count次</li>
</ol>
<h2 id="vim-命令模式"><a class="markdownIt-Anchor" href="#vim-命令模式"></a> vim 命令模式</h2>
<ol>
<li>前面的教程大多集中在Normal模式</li>
<li>命令模式提供了除了Normal模式的编辑方式</li>
<li>命令模式的操作对象以“行”为基本单位</li>
<li>normal和global命令提供强大的批量行操作</li>
</ol>
<h3 id="ex命令格式"><a class="markdownIt-Anchor" href="#ex命令格式"></a> Ex命令格式</h3>
<p>：[range] {excommand} [args]</p>
<ul>
<li>range：作用的范围，不给的话默认是本行</li>
<li>excommand：特殊的命令，适用于Command模式</li>
<li>args：后续的参数，视命令而定</li>
</ul>
<p>一些ExCommand（[x]为寄存器，是可选项）：</p>
<ul>
<li>：[range] delete[x]：删除range中的行（到寄存器x），delete可简写为 d</li>
<li>：[range] yank[x]：复制range中的行（到寄存器x），yank可简写为y</li>
<li>：[range] print：将range 中行打印出来，print 可简写为p</li>
</ul>
<h3 id="range与address指定范围"><a class="markdownIt-Anchor" href="#range与address指定范围"></a> range与address：指定范围</h3>
<p>range由一个或两个address构成，即{address}或{address}，{address} address可以是：</p>
<ul>
<li>{lineno}：行号，如3代表第三行（o代表第一行上面的虚拟行）</li>
<li>$：最后一行</li>
<li>.：光标所在行</li>
<li>/{pattern}/：下一个pattern所在的行<br />
address可以做加减法，.+3代表光标往下第三行，$-3代表倒数第4行</li>
</ul>
<h3 id="address组合成range"><a class="markdownIt-Anchor" href="#address组合成range"></a> address组合成range</h3>
<p>address组合出range（可以混用）：</p>
<ul>
<li>1，3：文件的1-3行</li>
<li>.，·+4：当前-当前往下4行 (共5 行)</li>
<li>$-3，$：文件的最后4行</li>
<li>%：特殊的range，代表当前文件的所有行</li>
<li>&lt;／'&gt;：可视模式中选中范围的开头和结尾（可视模式下直接按：可以直接设置）<br />
例子：</li>
<li>:1，3 delete：删除1~3行</li>
<li>:.，.+4 yank：复制当前-当前往下4 行</li>
<li>:$-3，$ print: 打印文件的最后4行</li>
</ul>
<p>行的复制、移动、粘贴</p>
<ul>
<li>：[range]copy{address}：把range中的行复制到address后面</li>
<li>：[range]move{address}：把range中的行移动到address后面</li>
<li>：[address]put[x]：把寄存器×的内容粘贴到address后面</li>
</ul>
<p>0作为虚拟行的address，可以用来将内容插入第一行</p>
<h3 id="批量操作normal命令"><a class="markdownIt-Anchor" href="#批量操作normal命令"></a> 批量操作：normal命令</h3>
<p>格式：：[range]normal{commands}<br />
含义：对range中的所有行执行Normal模式下的命令commands</p>
<ul>
<li>将range设置为%，可以对整个文件的所有行执行</li>
<li>：[range] normal. ：配合，命令，效果拔群<br />
常用做法：先做一次修改操作，再用normal命令在指定的行上完成操作</li>
<li>.命令只能记录一次修改，用宏可以实现记录多个操作:[range] noraml @{register}<br />
常用做法：先把想要的操作录制成宏，再用normal命令在指定的行上重放宏</li>
</ul>
<h2 id="批量操作global命令"><a class="markdownIt-Anchor" href="#批量操作global命令"></a> 批量操作：global命令</h2>
<ul>
<li>格式：：[range]global/{pattern}/[cmd]</li>
<li>含义：对range中包含pattern的所有行执行Command模式下的Ex命令</li>
<li>[cmd]：Ex命令，不给的话默认是打印（print）注意，normal命令也是Ex命令！</li>
<li>：[range]global/{pattern}/normal{commands}：对range中所有带pattern的<br />
行，执行Normal模式下的命令commands</li>
</ul>
<p>例子：</p>
<ul>
<li>·：%global/TODo/delete：删除所有带TODO的行</li>
</ul>
<h2 id="替换命令"><a class="markdownIt-Anchor" href="#替换命令"></a> 替换命令</h2>
<p><strong>：[range]s/{pattern}/{string}/[flags]</strong><br />
将pattern替换为string<br />
flags:</p>
<ul>
<li>g：替换每一行的所有匹配</li>
<li>i：忽视大小写</li>
<li>c：替换前进行确认</li>
<li>n：计数而不是替换</li>
</ul>
<dl>
<dt>：%s/Vim//gn：统计文件中所有Vim出现的次数（此时替换为什么无所谓，加了n就不会执行替换操作）</dt>
<dd>%s /\&lt;vim\&gt;/str/g；精确匹配vim这个单词比如 abc_vim是无法匹配的。</dd>
</dl>
]]></content>
      <tags>
        <tag>工具命令</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Python核心教程</title>
    <url>/2025/04/15/python%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>前言：  什么是<code>Python</code>？ 优缺点？<code>Python</code>是一个叫龟叔的荷兰老头写的（89年）擅长： 1.爬虫 2.自动化 3.科学计算 4.人工智能;<br />
deepseek给出的简介如下：</p>
<span id="more"></span>
<p>Python是一种简洁易读的高级编程语言，以动态类型和解释执行为特点，凭借丰富的标准库和第三方生态（如Django、NumPy、TensorFlow等），广泛应用于Web开发、数据分析、人工智能及自动化领域。其&quot;用缩进定义代码块&quot;的设计哲学降低了学习门槛，同时支持面向对象、函数式编程范式，被誉为平衡开发效率与工程化的&quot;胶水语言&quot;，适用于快速原型开发和企业级项目构建。</p>
<h2 id="重要的话"><a class="markdownIt-Anchor" href="#重要的话"></a> 重要的话</h2>
<ul>
<li><code>Make English as your working language.</code> （让英语成为你的工作语言）</li>
<li><code>Practice makes perfect.</code> （熟能生巧）</li>
<li><code>All experience comes from the mistakes you've made.</code> （所有的经验都源于你犯过的错误）</li>
<li><code>Don't be a freeloader.</code> （不要当伸手党）</li>
<li><code>Either outstanding or out.</code> （要么出众，要么出局）</li>
</ul>
<h2 id="语法基础"><a class="markdownIt-Anchor" href="#语法基础"></a> 语法基础</h2>
<ol start="0">
<li>注释：<code>#</code>→ 单行注释；<code>&quot;&quot;&quot;</code>→ 多行注释</li>
<li>变量：可以发生改变的一个量，变量是用来区分不同数据的，可以指向一个内存空间，帮我们存储一些数据</li>
</ol>
<ul>
<li>变量的命名规范：<br />
①必须是数字或字母或下换线组成，<br />
②不能是数字开头，更不能是纯数字<br />
③不能用python的关键字<br />
④不要用中文<br />
⑤不要太长<br />
⑥要有意义<br />
⑦推荐使用下换线命名或者驼峰命名</li>
</ul>
<ol start="2">
<li>常量：</li>
</ol>
<ul>
<li>字面量：“abc” , 123 ,True ,False ,None</li>
<li><code> MAX_COUNTS = 5000</code> <code>PI = 3.1415926</code></li>
</ul>
<ol start="3">
<li>数据类型：区分不同的数据，不同的数据类型应该有不同的操作</li>
</ol>
<ul>
<li>数字：<code>+-*/</code></li>
<li>布尔：条件判断 <code>True</code> <code>False</code></li>
<li>字符串：<code>&quot;abc&quot; , 'abc'</code><br />
操作：<br />
<code>+</code> 左右两端必须是字符串，表示字符串连接操作<br />
<code>*</code> 表示字符串重复操作，一个字符串只能乘以一个数字，表示字符串重复的次数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">looks = <span class="string">&quot;好帅!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name + looks)</span><br><span class="line"><span class="built_in">print</span>(name * <span class="number">3</span>)</span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># 张三好帅!</span></span><br><span class="line"><span class="comment"># 张三张三张三</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>语句</li>
</ol>
<ul>
<li>if</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. if语句</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is positive&quot;</span>)</span><br><span class="line"><span class="comment"># 2. if-else语句</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is positive&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is non-positive&quot;</span>)</span><br><span class="line"><span class="comment"># 3. if-elif-else语句</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x &gt; 10&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> x &gt; <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;7 &lt; x &lt;= 10&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x &lt; 7&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>match-case</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># http_response_code()</span></span><br><span class="line"><span class="comment"># 我们要将响应状态码401、403和404归入一个分支，400和405归入到一个分支，其他保持不变，代码还可以这么写</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">http_response_code_v0</span>():</span><br><span class="line">    status_code = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;模拟http的响应码：&quot;</span>))</span><br><span class="line">    <span class="keyword">match</span> status_code:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span> | <span class="number">405</span>: description = <span class="string">&#x27;invalid request&#x27;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span> | <span class="number">403</span> | <span class="number">404</span>: description = <span class="string">&#x27;not allowed&#x27;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">418</span>: description = <span class="string">&#x27;I am a teapot&#x27;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">429</span>: description = <span class="string">&#x27;too many requests&#x27;</span></span><br><span class="line">        <span class="keyword">case</span> _: description = <span class="string">&#x27;unknown status code&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;状态码描述：&#x27;</span>, description)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>while</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>for</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> name:</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(j)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>pass<br />
pass 是一个特殊的占位符关键字，用于表示“什么都不做”。它的主要作用是满足语法要求，避免代码块为空时引发语法错误。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x &gt; 3&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>字符串</li>
</ol>
<ul>
<li>格式化字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的名字:&quot;</span>)</span><br><span class="line">address = <span class="built_in">input</span>(<span class="string">&quot;请输入你的住址:&quot;</span>)</span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的年龄:&quot;</span>))</span><br><span class="line">hobby = <span class="built_in">input</span>(<span class="string">&quot;请输入你的爱好:&quot;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;我叫%s, 我住在%s, 我今年%d岁, 我喜欢做%s&quot;</span> % (name, address, age, hobby)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">s1 = <span class="string">&quot;我叫&#123;&#125;, 我住在&#123;&#125;, 我今年&#123;&#125;岁, 我喜欢做&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, address, age, hobby)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># f-string</span></span><br><span class="line">s2 = <span class="string">f&quot;我叫<span class="subst">&#123;name&#125;</span>, 我住在<span class="subst">&#123;address&#125;</span>, 我今年<span class="subst">&#123;age&#125;</span>岁, 我喜欢做<span class="subst">&#123;hobby&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s2)</span><br></pre></td></tr></table></figure>
<ul>
<li>索引和切片</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 索引和切片</span></span><br><span class="line">s = <span class="string">&quot;我叫周杰伦&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">5</span>])</span><br><span class="line"><span class="comment"># print(s[-6]) IndexError:</span></span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line"><span class="comment"># 语法：s[start：end]从start到end进行切片。但是取不到end[start，end)</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>:<span class="number">5</span>])           <span class="comment"># [2, 5)</span></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="number">5</span>])            <span class="comment"># [0, 5)如果start是从开头进行切片，可以省略</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>:])            <span class="comment"># [3, end) 从start开始一直截取到未尾</span></span><br><span class="line"><span class="built_in">print</span>(s[:])             <span class="comment"># 如果左右两端有空白，表示开头或者结尾</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">5</span>:-<span class="number">1</span>])         <span class="comment"># [-5, -1)</span></span><br><span class="line"><span class="comment"># print(s[-1:-5]) # []</span></span><br><span class="line">s = <span class="string">&quot;我爱你&quot;</span></span><br><span class="line"><span class="comment"># 语法：s[start:end:step]从start切到end, 每step个元素出来一个元素</span></span><br><span class="line"><span class="comment"># 可以给切片添加步长来控制切片的方向</span></span><br><span class="line"><span class="comment"># -表示从右往左</span></span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])</span><br><span class="line">s = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">15</span>:<span class="number">2</span>])            <span class="comment"># 1, 3, 5, 7, 9, 11, 13</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>:-<span class="number">10</span>:-<span class="number">2</span>])         <span class="comment"># -1, -3, -5, -7, -9</span></span><br></pre></td></tr></table></figure>
<ul>
<li>大小写转换</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="comment"># 首字母大写</span></span><br><span class="line">s1 = s.capitalize()</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s = <span class="string">&quot;I have a dream!&quot;</span></span><br><span class="line"><span class="comment"># 字符串中每个单词首字母大写</span></span><br><span class="line">s1 = s.title()</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s = <span class="string">&quot;I HAVE A DREAM!&quot;</span></span><br><span class="line"><span class="comment"># 所有字符小写</span></span><br><span class="line">s1 = s.lower()</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s = <span class="string">&quot;i have a dream&quot;</span></span><br><span class="line"><span class="comment"># 所有字符大写</span></span><br><span class="line">s1 = s.upper()</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># 忽略大小写进行判断</span></span><br><span class="line">varify_code = <span class="string">&quot;xAd1&quot;</span></span><br><span class="line">user_input = <span class="built_in">input</span>(<span class="string">f&quot;请输入验证码<span class="subst">&#123;varify_code&#125;</span>:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> user_input.upper() == varify_code.upper():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;验证码正确&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;验证码错误&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>替换和切割</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;    我是周润发      &quot;</span></span><br><span class="line"><span class="comment"># 去除字符串首尾的空白字符(空格 制表符 换行符)</span></span><br><span class="line">s = s.strip()</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名:&quot;</span>)</span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;请输入密码:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> username.strip() == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> password.strip() == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登陆失败&quot;</span>)</span><br><span class="line">s = <span class="string">&quot;i am a good man&quot;</span></span><br><span class="line">s = s.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串切割,用什么切，就会损失掉谁</span></span><br><span class="line">s = <span class="string">&quot;c++_c_java_c#_javascript_python&quot;</span></span><br><span class="line">slist = s.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(slist)    <span class="comment"># [&#x27;c++&#x27;, &#x27;c&#x27;, &#x27;java&#x27;, &#x27;c#&#x27;, &#x27;javascript&#x27;, &#x27;python&#x27;]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>查找和替换</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串查找</span></span><br><span class="line">s = <span class="string">&quot;我是周润发，你是刘德华&quot;</span></span><br><span class="line"><span class="comment"># 查找成功返回所在的索引位置，否则返回-1</span></span><br><span class="line">ret = s.find(<span class="string">&quot;刘德华123&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"><span class="comment"># ret = s.index(&quot;刘德华123&quot;)  # Exception: ValueError</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;周润发&quot;</span> <span class="keyword">in</span> s)       <span class="comment"># in可以做条件上的判断</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;周润发134&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> s)    <span class="comment"># not in判断是否不存在</span></span><br><span class="line"><span class="comment"># 判断字符串是否以xxxxx开头，endswith（）</span></span><br><span class="line"><span class="comment"># s.startswith endswith</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">s = <span class="string">&quot;1234e&quot;</span></span><br><span class="line"><span class="keyword">if</span> s.isdigit():</span><br><span class="line">    s = <span class="built_in">int</span>(s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;可以花钱了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不可以花钱&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># len() type() input()内置函数</span></span><br><span class="line"><span class="comment"># len() 字符个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&quot;我叫周润发&quot;</span>))</span><br><span class="line"><span class="comment"># join()</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;刘德华&quot;</span>, <span class="string">&quot;周润发&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>]</span><br><span class="line">s = <span class="string">&quot;_&quot;</span>.join(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(s)        <span class="comment"># 刘德华_周润发_张三_李四</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>列表<br />
在python中用门来表示一个列表，列表中的元素通过，隔开</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表索引和切片：用法和字符串一样</span></span><br><span class="line"><span class="comment"># 列表的增删改查（*）</span></span><br><span class="line">lst = []</span><br><span class="line">lst.append(<span class="string">&quot;刘德华&quot;</span>)</span><br><span class="line">lst.append(<span class="string">&quot;周润发&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line">lst.insert(<span class="number">0</span>, <span class="string">&quot;赵本山&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="comment"># 可以合并两个列表</span></span><br><span class="line">lst.extend([<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="comment"># 弹出最后一个元素</span></span><br><span class="line">ret = lst.pop()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove</span></span><br><span class="line">lst.remove(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line"><span class="comment"># 直接用索引就可以进行修改操作</span></span><br><span class="line">lst[<span class="number">0</span>] = <span class="string">&quot;赵敏&quot;</span></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="comment"># 直接用索引进行查询操作</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 小练习：</span></span><br><span class="line"><span class="comment"># 把所有的姓张的人修改成姓王</span></span><br><span class="line">lst = [<span class="string">&quot;赵敏&quot;</span>, <span class="string">&quot;张绍刚&quot;</span>, <span class="string">&quot;赵本山&quot;</span>, <span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;武则天&quot;</span>, <span class="string">&quot;赢政&quot;</span>, <span class="string">&quot;马超&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(lst)):</span><br><span class="line">    item = lst[i]</span><br><span class="line">    <span class="keyword">if</span> item.startswith(<span class="string">&quot;张&quot;</span>):</span><br><span class="line">        lst[i] = <span class="string">&quot;王&quot;</span> + item[<span class="number">1</span>:]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">22</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">54</span>, <span class="number">100</span>, <span class="number">99</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">lst.sort()</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line">lst.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的嵌套</span></span><br><span class="line">lst = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, [<span class="string">&quot;呵呵哒&quot;</span>, <span class="string">&quot;妈妈呀&quot;</span>, <span class="string">&quot;苦苦脊瓦&quot;</span>, [<span class="string">&quot;可乐&quot;</span>, <span class="string">&quot;scrapy&quot;</span>, <span class="number">123</span>]], <span class="string">&quot;aed&quot;</span>, <span class="string">&quot;qpr&quot;</span>]</span><br><span class="line">lst[<span class="number">2</span>][<span class="number">3</span>][<span class="number">1</span>] = lst[<span class="number">2</span>][<span class="number">3</span>][<span class="number">1</span>].upper()</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的循环删除(*)</span></span><br><span class="line">lst = [<span class="string">&quot;赵敏&quot;</span>, <span class="string">&quot;张绍刚&quot;</span>, <span class="string">&quot;赵本山&quot;</span>, <span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;武则天&quot;</span>, <span class="string">&quot;赢政&quot;</span>, <span class="string">&quot;马超&quot;</span>]</span><br><span class="line">tmplst = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="keyword">if</span> item.startswith(<span class="string">&quot;张&quot;</span>):</span><br><span class="line">        tmplst.append(item)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tmplst:</span><br><span class="line">    lst.remove(item)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>元组<br />
tuple元组，特点：不可变的列表</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tuple元组，特点：不可变的列表</span></span><br><span class="line">t = (<span class="string">&quot;周芷若&quot;</span>, <span class="string">&quot;张三丰&quot;</span>, <span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;赵敏&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t))</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># t[0] = &quot;樵夫&quot; # TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你固定了某些数据。不允许外界修改</span></span><br><span class="line"><span class="comment"># 元组如果只有1个元素（*），需要在元素的末尾添加一个逗号</span></span><br><span class="line">t = (<span class="string">&quot;哈哈哈哈&quot;</span>,)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># 关于元组的不可变（坑），内存地址不能变</span></span><br><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&quot;zhang&quot;</span>, <span class="string">&quot;wang&quot;</span>, <span class="string">&quot;zhao&quot;</span>, <span class="string">&quot;li&quot;</span>])</span><br><span class="line">t[<span class="number">4</span>].append(<span class="string">&quot;tang&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>set集合</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;zhan&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s = &#123;1, 2, 3, &quot;zhan&quot;, [&quot;zhao&quot;]&#125; # TypeError:unhashable type &#x27;list&#x27;</span></span><br><span class="line"><span class="comment"># 不可哈希：python中的set集合进行数据存储的时候，需要对数据进行哈希计算，根据计算出来的哈希值进行存储数据</span></span><br><span class="line"><span class="comment"># set集合要求存储的数据必须是可以进行哈希计算的.</span></span><br><span class="line"><span class="comment"># 可变的数据类型，list，dict，set</span></span><br><span class="line"><span class="comment"># 可哈希：不可变的数据类型，int，str，tuple，bool.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建空数据</span></span><br><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line">lst = <span class="built_in">list</span>()</span><br><span class="line">t = <span class="built_in">tuple</span>()</span><br><span class="line">ss = <span class="built_in">str</span>()</span><br><span class="line">s.add(<span class="string">&quot;zhan&quot;</span>)</span><br><span class="line">s.add(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">s.add(<span class="string">&quot;wang&quot;</span>)</span><br><span class="line">s.add(<span class="string">&quot;tang&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 经过多次测试，验证弹出的是集合中的第一个元素，但是第一个元素也是不确定的，即每次打出来的第一个元素可能都不一样</span></span><br><span class="line"><span class="comment"># print(s.pop())</span></span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line">s.remove(<span class="string">&quot;tang&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 想要修改，先删除，再新增</span></span><br><span class="line">s.remove(<span class="string">&quot;zhan&quot;</span>)</span><br><span class="line">s.add(<span class="string">&quot;zhan-san&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集，并集，差集</span></span><br><span class="line">s1 = &#123;<span class="string">&#x27;刘能&#x27;</span>, <span class="string">&#x27;赵四&#x27;</span>, <span class="string">&#x27;皮常山&#x27;</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">&#x27;皮常山&#x27;</span>, <span class="string">&#x27;冯乡长&#x27;</span>, <span class="string">&#x27;刘科长&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1 &amp; s2)</span><br><span class="line"><span class="built_in">print</span>(s1.intersection(s2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1 | s2)</span><br><span class="line"><span class="built_in">print</span>(s1.union(s2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1 - s2)</span><br><span class="line"><span class="built_in">print</span>(s1.difference(s2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重要的作用：可以去除重复</span></span><br><span class="line">lst = [<span class="string">&quot;zhan&quot;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;wang&quot;</span>, <span class="string">&quot;zhao&quot;</span>, <span class="string">&quot;zhan&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(lst))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(lst)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="9">
<li>字典<br />
首先，字典是以键值对的形式进行存储数据的<br />
字典的表示方式：{key:value，key2:value，key3:value}</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dict</span></span><br><span class="line">dic = &#123;<span class="string">&#x27;zhan&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;zhao&#x27;</span>: <span class="string">&#x27;赵四&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dic))</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line">val = dic[<span class="string">&#x27;zhan&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典的key必须是可哈希的数据类型</span></span><br><span class="line"><span class="comment"># 字典的value可以是任何数据类型</span></span><br><span class="line">dic = &#123;<span class="string">&#x27;wang&#x27;</span>: [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典的增删改查</span></span><br><span class="line">dic = <span class="built_in">dict</span>()</span><br><span class="line">dic[<span class="string">&#x27;zhan&#x27;</span>] = <span class="string">&#x27;周杰伦&#x27;</span></span><br><span class="line">dic[<span class="number">1</span>] = <span class="number">13</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line">dic[<span class="string">&#x27;zhan&#x27;</span>] = <span class="string">&#x27;刘德华&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line">dic.setdefault(<span class="string">&#x27;zhao&#x27;</span>, <span class="string">&#x27;赵华&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"><span class="comment"># 设置默认值，如果以前已经有了tom了，setdefault就不起作用了</span></span><br><span class="line">dic.setdefault(<span class="string">&#x27;zhan&#x27;</span>, <span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">dic.pop(<span class="string">&#x27;zhan&#x27;</span>)</span><br><span class="line">dic.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="built_in">print</span>(dic[<span class="string">&#x27;zhao&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(dic.get(<span class="string">&#x27;zhao&#x27;</span>))</span><br><span class="line"><span class="comment"># 如果key不存在，程序会报错</span></span><br><span class="line"><span class="comment"># print(dic[&#x27;zhao123&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(dic.get(<span class="string">&#x27;zhao10010&#x27;</span>))     <span class="comment"># if key is not exist, the result is &#x27;None&#x27;</span></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line">a = <span class="literal">None</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))      <span class="comment"># &lt;class &#x27;NoneType&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(a)            <span class="comment"># None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># simple example:</span></span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;赵四&#x27;</span>: <span class="string">&#x27;特别能歪嘴&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;刘能&#x27;</span>: <span class="string">&#x27;老，老四啊。。。&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;大脚&#x27;</span>: <span class="string">&#x27;跟这个跟哪个搞对象&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;大脑袋&#x27;</span>: <span class="string">&#x27;瞎折腾.....&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># name = input(&#x27;请输入我们村的人:&#x27;)</span></span><br><span class="line">name = <span class="string">&#x27;hh&#x27;</span></span><br><span class="line">val = dic.get(name)</span><br><span class="line"><span class="keyword">if</span> val <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我们村没有这个人！&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典进阶操作</span></span><br><span class="line"><span class="comment"># 循环和嵌套</span></span><br><span class="line"><span class="comment"># 可以用for循环，直接拿到key</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(key, dic[key])</span><br><span class="line"><span class="comment"># 希望把所有的key全都保存在一个列表中</span></span><br><span class="line"><span class="comment"># dict_keys([&#x27;赵四&#x27;, &#x27;刘能&#x27;, &#x27;大脚&#x27;, &#x27;大脑袋&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(dic.keys())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dic.keys()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dic.keys()))</span><br><span class="line"><span class="comment"># 希望吧所有的value都放在一个列表中</span></span><br><span class="line"><span class="built_in">print</span>(dic.values())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dic.values()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dic.values()))</span><br><span class="line"><span class="comment"># 直接拿到字典中的key和value</span></span><br><span class="line"><span class="comment"># ict_items([(&#x27;赵四&#x27;, &#x27;特别能歪嘴&#x27;), (&#x27;刘能&#x27;, &#x27;老，老四啊。。。&#x27;), (&#x27;大脚&#x27;, &#x27;跟这个跟哪个搞对象&#x27;), (&#x27;大脑袋&#x27;, &#x27;瞎折腾.....&#x27;)])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dic.items()))</span><br><span class="line"><span class="comment"># &lt;class &#x27;dict_items&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(dic.items())</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dic.items():</span><br><span class="line">    <span class="comment"># key = item[0]</span></span><br><span class="line">    <span class="comment"># val = item[1]</span></span><br><span class="line">    key, val = item</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#x27;</span> + <span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;val&#125;</span>&quot;</span> + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组或者列表都可以执行该操作，该操作被称为解构（解包）</span></span><br><span class="line">a, b = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> dic.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典的嵌套</span></span><br><span class="line"><span class="comment"># 类似json字符串</span></span><br><span class="line">wangfeng = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;汪峰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;wife&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;章子怡&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;hobby&#x27;</span>: <span class="string">&#x27;演戏&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;assistant&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;樵夫&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>,</span><br><span class="line">            <span class="string">&#x27;hobby&#x27;</span>: <span class="string">&#x27;打游戏&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;children&#x27;</span>: [</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;孩子1&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;孩子2&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;孩子3&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">11</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 汪峰子的助手的名字</span></span><br><span class="line">name = wangfeng[<span class="string">&#x27;wife&#x27;</span>][<span class="string">&#x27;assistant&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="comment"># 给汪峰的第二个孩子加1岁</span></span><br><span class="line">wangfeng[<span class="string">&#x27;children&#x27;</span>][<span class="number">1</span>][<span class="string">&#x27;age&#x27;</span>] += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(wangfeng)</span><br><span class="line"><span class="comment"># 补充。关于字典的循环删除</span></span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;赵四&#x27;</span>: <span class="string">&#x27;特别能歪嘴&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;刘能&#x27;</span>: <span class="string">&#x27;老，老四啊。。。&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;大脚&#x27;</span>: <span class="string">&#x27;跟这个跟哪个搞对象&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;大脑袋&#x27;</span>: <span class="string">&#x27;瞎折腾.....&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">tmp = []</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic.keys():</span><br><span class="line">    <span class="keyword">if</span> key.startswith(<span class="string">&#x27;大&#x27;</span>):</span><br><span class="line">        tmp.append(key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> tmp:</span><br><span class="line">    dic.pop(k)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="10">
<li>bytes</li>
</ol>
<ul>
<li>字符集和编码<br />
①<code>ascii</code>: 8bit, 1byte<br />
②<code>gbk</code>: 16bit，2byte windows默认<br />
③<code>unicode</code>：32bit，4byte（没法用，只是一个标准）<br />
④<code>utf-8</code>: mac默认<br />
英文：8bit，1byte<br />
欧洲：16bit，2byte<br />
中文：24bit，3byte</li>
<li>示例</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bytes</span></span><br><span class="line">s = <span class="string">&#x27;周杰伦&#x27;</span></span><br><span class="line">s1 = s.encode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="comment"># &lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s1))</span><br><span class="line"><span class="comment"># b&#x27;\xd6\xdc\xbd\xdc\xc2\xd7&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s2 = s.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 怎么把一个gbk的字节转化成utf-8的字节</span></span><br><span class="line">b1 = <span class="string">b&#x27;\xd6\xdc\xbd\xdc\xc2\xd7&#x27;</span></span><br><span class="line">s = b1.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">b2 = s.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b2)</span><br><span class="line">s = <span class="string">&quot;你好abc呵呵哒&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="built_in">print</span>(s[i])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="11">
<li>运算符<br />
①算数运算<br />
<code>+ - * / % //(地板除)</code><br />
②比较运算<br />
<code>&gt; &lt; &gt;= &lt;= == !=</code><br />
③赋值运算<br />
<code>= += -= *= /= %= //=</code><br />
④逻辑运算<br />
<code>and or not</code><br />
记住运算顺序：先算括号&gt;算not&gt;and&gt;or<br />
⑤成员运算<br />
<code>in</code>： 判断xxx是否在xxxx中出现了<br />
<code>not in</code>：判断xxx是否环在xxxx中出现了</li>
</ol>
<h2 id="文件操作"><a class="markdownIt-Anchor" href="#文件操作"></a> 文件操作</h2>
<ol>
<li>api</li>
</ol>
<ul>
<li><code>open</code>(文件路径，mode=“”，encoding=“”)<br />
文件路径：<br />
①绝对路径 d:/test/xxxx.txt<br />
②相对路径 相对于当前你的程序所在的文件夹<br />
<code>mode</code>:<br />
①r：只读(read)<br />
②w：写(write)<br />
③a：追加(append)<br />
④b:读写的是非文本文件，此时encoding无需写</li>
</ul>
<ol start="2">
<li><code>with</code>：上下文，不需要手动去关闭一个文件</li>
<li>示例</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 文件操作</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;./file.py&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment"># content = f.read().strip()          # 全部读完</span></span><br><span class="line"><span class="comment"># print(content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读完一行</span></span><br><span class="line"><span class="comment"># line = f.readline()</span></span><br><span class="line"><span class="comment"># print(line)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最重要的一种文本读取方式（必须掌握</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(line.strip())</span><br><span class="line"></span><br><span class="line"><span class="comment">#     写入文件</span></span><br><span class="line"><span class="comment"># w模式下，如果文件不存在，自动的创建一个文件</span></span><br><span class="line"><span class="comment"># w模式下，每一次open都会清空掉文件中的内容</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;嫩模.md&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;胡辣汤&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备一个列表·要求把列表中的每一项内容。写入到文件中</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;嫩模.md&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">lst = [<span class="string">&quot;汪峰&quot;</span>, <span class="string">&quot;汪峰&quot;</span>, <span class="string">&quot;汪峰&quot;</span>, <span class="string">&quot;汪峰&quot;</span>, <span class="string">&quot;汪峰&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">    f.write(item)</span><br><span class="line">    f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;嫩模.md&quot;</span>, mode=<span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;这是一个追加的内容&quot;</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># with (用的比较多）</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;嫩模.md&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line.strip())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件的复制：</span></span><br><span class="line"><span class="comment"># 从源文件中读取内容。写入到新路径去</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;beauty.jpg&quot;</span>, mode=<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f1,\</span><br><span class="line">     <span class="built_in">open</span>(<span class="string">&quot;beauty_bak.jpg&quot;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f1:</span><br><span class="line">        f2.write(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件修改</span></span><br><span class="line"><span class="comment"># 把文件中的周一&gt;张</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;username.txt&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f1, \</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">&quot;username_bak.txt&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f1:</span><br><span class="line">        line = line.strip()</span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">&quot;周&quot;</span>):</span><br><span class="line">            line = line.replace(<span class="string">&quot;周&quot;</span>, <span class="string">&quot;张&quot;</span>)</span><br><span class="line">            f2.write(line)</span><br><span class="line">            f2.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment"># 删除源文件</span></span><br><span class="line">os.remove(<span class="string">&quot;username.txt&quot;</span>)</span><br><span class="line"><span class="comment"># 把副本文件重命名成源文件</span></span><br><span class="line">os.renames(<span class="string">&quot;username_bak.txt&quot;</span>, <span class="string">&quot;username.txt&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2>
<h3 id="基础部分"><a class="markdownIt-Anchor" href="#基础部分"></a> 基础部分</h3>
<ol>
<li>函数：对某一个特定的功能或者代码块进行封装，在需要使用该功能的时候直接调用即可</li>
<li>定义：<br />
def 函数的名字（）：<br />
被封装的功能或者代码块-&gt;函数体</li>
<li>调用：<br />
函数的名字（）</li>
<li>参数：可以在函数调用的时候，给函数传递一些信息分类：</li>
</ol>
<ul>
<li>形参，在函数定义的时候，需要准备一些变量来接收信息<br />
①位置参数，按照位置一个一个的去声明变量<br />
②默认值参数，在函数声明的时候给变量一个默认值，如果实参不传递信息。此时默认值生效，否则就不生效<br />
③动态传参<br />
a：*args，表示接收所有的位置参数的动态传参<br />
b：**kwargs，表示接收所有的关键字的动态传参<br />
顺序：位置&gt;*args&gt;默认值&gt;**kwargs</li>
<li>实参，实际在调用的时候传递的信息<br />
①位置参数：按照位置进行传递参数<br />
②关键字参数：按照参数的名字进行传递参数<br />
③混合参数<br />
顺序：位置参数放前面，关键字参数放后面一&gt;否则报错！官方不让这么干<br />
实参在执行的时候，必须要保障形参有数据</li>
</ul>
<ol start="5">
<li>返回值：函数执行之后，会给调用方一个结果，这个结果就是返回值<br />
关于<code>return</code>：<br />
函数只要执行到了<code>return</code>，函数就会立即停止并返回内容，函数内的return的后续的代码不会执行<br />
①如果函数内没有<code>return</code>，此时外界收到的是<code>None</code><br />
②如果写了<code>return</code>：<br />
a.只写了<code>return</code>，后面不跟数据，此时接收到的依然是<code>None</code><br />
b.<code>return</code>值，此时表示函数有一个返回值，外界能够收到一个数据<br />
c.<code>return</code>值1，值2，值3…  此时函数有多个返回值，外界收到的是元组，并且该元组内存放所有的返回值</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="comment"># #请用函数编写一个计算器，能计算+－*／四则运算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_calc</span>(<span class="params">a, b, opt</span>):</span><br><span class="line">    <span class="keyword">if</span> opt == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a + b)</span><br><span class="line">    <span class="keyword">elif</span> opt == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a - b)</span><br><span class="line">    <span class="keyword">elif</span> opt == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a * b)</span><br><span class="line">    <span class="keyword">elif</span> opt == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a / b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OpError: opt is not a valid op.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">simple_calc(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;+&quot;</span>)</span><br><span class="line">simple_calc(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;abc&quot;</span>)</span><br><span class="line">simple_calc(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">*food</span>):</span><br><span class="line">    <span class="built_in">print</span>(food)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># *表示位置参数的动态传参,*接收到的值会被统一放在一个元组里面</span></span><br><span class="line">eat(<span class="string">&quot;主食&quot;</span>, <span class="string">&quot;西红柿&quot;</span>, <span class="string">&quot;水果&quot;</span>, <span class="string">&quot;甜品&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hobby</span>(<span class="params">**hobbies</span>):</span><br><span class="line">    <span class="built_in">print</span>(hobbies)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># **表示接收关键字的动态传参，接收到的所有参数都会被处理成字典</span></span><br><span class="line">hobby(animal=<span class="string">&quot;cat&quot;</span>, sport=<span class="string">&quot;basketball&quot;</span>)</span><br><span class="line"></span><br><span class="line">stu_lst = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;刘七&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># *在实参位置，是把列表打散成位置参数进行传递</span></span><br><span class="line"><span class="comment"># **在实参位置，可以把字典自动转化成关银字参数进行传递</span></span><br><span class="line">func(*stu_lst)</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>内置函数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="comment"># #请用函数编写一个计算器，能计算+－*／四则运算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_calc</span>(<span class="params">a, b, opt</span>):</span><br><span class="line">    <span class="keyword">if</span> opt == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a + b)</span><br><span class="line">    <span class="keyword">elif</span> opt == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a - b)</span><br><span class="line">    <span class="keyword">elif</span> opt == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a * b)</span><br><span class="line">    <span class="keyword">elif</span> opt == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a / b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OpError: opt is not a valid op.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">simple_calc(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;+&quot;</span>)</span><br><span class="line">simple_calc(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;abc&quot;</span>)</span><br><span class="line">simple_calc(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">*food</span>):</span><br><span class="line">    <span class="built_in">print</span>(food)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># *表示位置参数的动态传参,*接收到的值会被统一放在一个元组里面</span></span><br><span class="line">eat(<span class="string">&quot;主食&quot;</span>, <span class="string">&quot;西红柿&quot;</span>, <span class="string">&quot;水果&quot;</span>, <span class="string">&quot;甜品&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hobby</span>(<span class="params">**hobbies</span>):</span><br><span class="line">    <span class="built_in">print</span>(hobbies)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># **表示接收关键字的动态传参，接收到的所有参数都会被处理成字典</span></span><br><span class="line">hobby(animal=<span class="string">&quot;cat&quot;</span>, sport=<span class="string">&quot;basketball&quot;</span>)</span><br><span class="line"></span><br><span class="line">stu_lst = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;刘七&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># *在实参位置，是把列表打散成位置参数进行传递</span></span><br><span class="line"><span class="comment"># **在实参位置，可以把字典自动转化成关银字参数进行传递</span></span><br><span class="line">func(*stu_lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置函数</span></span><br><span class="line"><span class="comment"># 类型转换</span></span><br><span class="line">i = <span class="number">3</span></span><br><span class="line">is_true = <span class="built_in">bool</span>(i)</span><br><span class="line">f = <span class="built_in">float</span>(i)</span><br><span class="line">s = <span class="built_in">str</span>(i)</span><br><span class="line">comp = <span class="built_in">complex</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(comp))</span><br><span class="line"><span class="built_in">print</span>(comp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进制转换 bin oct hex</span></span><br><span class="line">a = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">0b00100010001</span>))</span><br><span class="line"><span class="comment"># sum, min, max, pow</span></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(b ** a)</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">99</span>, <span class="number">23</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(lst))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(lst))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(lst))</span><br><span class="line"></span><br><span class="line">sl = <span class="built_in">slice</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>)      <span class="comment"># [1:5:2]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哈哈哈哈哈哈哈哈哈哈哈哈&quot;</span>[sl])</span><br><span class="line"></span><br><span class="line"><span class="comment"># format, ord, chr</span></span><br><span class="line"><span class="comment"># b：二进制，o：八进制，x：十六进制</span></span><br><span class="line">a = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">format</span>(a, <span class="string">&quot;08b&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">format</span>(a, <span class="string">&quot;o&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">format</span>(a, <span class="string">&quot;x&quot;</span>))</span><br><span class="line"><span class="comment"># python的内存中使用的是unicode</span></span><br><span class="line">a = <span class="string">&quot;中&quot;</span></span><br><span class="line"><span class="comment"># 中国的中字在unicode中码位是20013</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(a))</span><br><span class="line"><span class="comment"># 给出编码位置，展示出文字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">20013</span>))</span><br><span class="line"><span class="comment"># for i in range(65536):</span></span><br><span class="line"><span class="comment">#     print(chr(i) + &quot; &quot;, end=&quot;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enumerate all any</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>([<span class="string">&quot;1&quot;</span>, <span class="number">0</span>, <span class="string">&quot;豆沙包&quot;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>([<span class="number">0</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;呵呵哒&quot;</span>]))</span><br><span class="line">lst = [<span class="string">&quot;张翠山&quot;</span>, <span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;张三丰&quot;</span>, <span class="string">&quot;张大大&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">enumerate</span>(lst):</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(lst):</span><br><span class="line">    <span class="built_in">print</span>(index, item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定是一个数字一&gt;想办法转化成内存地址，然后进行数据的存储-&gt;哈希表</span></span><br><span class="line">s = <span class="string">&quot;呵呵哒&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hash</span>(s))</span><br><span class="line"><span class="comment"># 当前这个数据能执行哪些操作</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s))</span><br></pre></td></tr></table></figure>
<h3 id="函数的嵌套"><a class="markdownIt-Anchor" href="#函数的嵌套"></a> 函数的嵌套</h3>
<ul>
<li><code>gobal</code>：在局部，引入全局变量</li>
<li><code>nonlocal</code>：在局部，引入外层的局部变量，向外找一层，看看有没有该变量，如果有就引入，如果没有，继续向外一层，直到全局（不包括）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是一个内部函数的打印&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(inner)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">caller = outer()</span><br><span class="line"><span class="built_in">print</span>(caller)</span><br><span class="line">caller()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理模式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myexec</span>(<span class="params">call</span>):</span><br><span class="line">    call()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">target_fun</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;target is running...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实参可以是函数</span></span><br><span class="line">myexec(target_fun)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="闭包"><a class="markdownIt-Anchor" href="#闭包"></a> 闭包</h3>
<ol>
<li>闭包：本质，内层函数对外层函数的局部变量的使用，此时内层函数被称为闭包函数</li>
</ol>
<ul>
<li>可以让一个变量常驻与内存</li>
<li>可以避免全局变量被修改</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> a</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call = outer()</span><br><span class="line">ret = call()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line">ret = call()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure>
<h3 id="装饰器"><a class="markdownIt-Anchor" href="#装饰器"></a> 装饰器</h3>
<ol>
<li>回顾相关认识</li>
</ol>
<ul>
<li>函数可以做为参数进行传递</li>
<li>函数可以作为返回值进行返回</li>
<li>函数名称可以当成变量一样进行赋值操作</li>
</ul>
<ol start="2">
<li>装饰器：</li>
</ol>
<ul>
<li>装饰器本质上是一个闭包</li>
<li>作用：<br />
在不改变原有函数调用的情况下，给函数增加新的功能<br />
直白：可以在函数前后添加新功能，但是不改原来的代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 装饰器(decorator)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_dnf</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我正在玩dnf这款游戏...&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_lol</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我正在玩lol这款游戏...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;方式1：没法玩外挂&quot;</span>)</span><br><span class="line">play_dnf()</span><br><span class="line">play_lol()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">game_decorator</span>(<span class="params">play_game</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开启外挂&quot;</span>)</span><br><span class="line">        play_game()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;关闭外挂&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;新模式开启==============&quot;</span>)</span><br><span class="line">play_lol = game_decorator(play_lol)</span><br><span class="line">play_lol()</span><br><span class="line">play_dnf = game_decorator(play_dnf)</span><br><span class="line">play_dnf()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启新游戏</span></span><br><span class="line"><span class="meta">@game_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_wukong</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我正在玩黑猴，黑风山杀的正起....&quot;</span>)</span><br><span class="line"></span><br><span class="line">play_wukong()</span><br><span class="line"><span class="comment"># 关于参数问题和返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">game_wrapper</span>(<span class="params">game</span>):</span><br><span class="line">    <span class="comment"># *，**表示接收所有参数，打包成元组和字典</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开启游戏外挂...&quot;</span>)</span><br><span class="line">        <span class="comment"># *, **表示把args元组和kwargs字典打散成位置参数以及关键字参数传递进去</span></span><br><span class="line">        ret = game(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;关闭游戏外挂...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@game_wrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_dnf</span>(<span class="params">username, password</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;用户名：<span class="subst">&#123;username&#125;</span>,密码：<span class="subst">&#123;password&#125;</span>，登录中...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我要开始玩dnf....&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;一把绝世好剑&quot;</span></span><br><span class="line"><span class="meta">@game_wrapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_lol</span>(<span class="params">username, password, role</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;用户名:<span class="subst">&#123;username&#125;</span>, 密码:<span class="subst">&#123;password&#125;</span>, 英雄角色:<span class="subst">&#123;role&#125;</span>, 登录中...&quot;</span>)</span><br><span class="line">play_lol(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;1234&quot;</span>, <span class="string">&quot;daju&quot;</span>)</span><br><span class="line">ret = play_dnf(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;1234&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># wrapper应用的小例子</span></span><br><span class="line">login_flag = <span class="literal">False</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">global</span> login_flag</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请你先登录&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        username = <span class="built_in">input</span>(<span class="string">&quot;用户名&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">        password = <span class="built_in">input</span>(<span class="string">&quot;密㊙码&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> password == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">            login_flag = <span class="literal">True</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录成功！&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录失败！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_verify</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> login_flag:</span><br><span class="line">            login()</span><br><span class="line">        ret = fn(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;添加信息&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;更新信息&quot;</span>)</span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;删除信息&quot;</span>)</span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查询信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">update()</span><br><span class="line">delete()</span><br><span class="line">search()</span><br></pre></td></tr></table></figure>
<h3 id="迭代器"><a class="markdownIt-Anchor" href="#迭代器"></a> 迭代器</h3>
<ol>
<li>可送代的数据类型都会提供一个叫送代器的东西，这个送代器可以帮我们把数据类型中的所有数据逐一的拿到
<ul>
<li>只能向前不能反复</li>
<li>特别节省内存</li>
<li>惰性机制</li>
</ul>
</li>
<li>获取送代器的两种方案：
<ul>
<li><code>iter</code>（）内置函数可以直接拿到选代器</li>
<li><code>__iter__</code>() 特殊方法</li>
</ul>
</li>
<li>从送代器中拿到数据：
<ul>
<li><code>next</code>（）内置函数</li>
<li><code>__next__</code>（）特殊方法</li>
</ul>
</li>
<li><code>for</code>里面一定是要拿送代器的，所以所有不可迭代的东西不能用<code>for</code>循环</li>
</ol>
<p><strong>总结：送代器统一了不同数据类型的遍历工作</strong></p>
<h3 id="生成器"><a class="markdownIt-Anchor" href="#生成器"></a> 生成器</h3>
<ol>
<li>生成器的本质就是迭代器</li>
<li>创建生成器的两种方案：</li>
</ol>
<ul>
<li>生成器函数</li>
<li>生成器表达式</li>
<li>推导式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表推导式：[数据for循环if判断】</span></span><br><span class="line">lst = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="comment"># 请创建一个列表[1，3，5，7，9]</span></span><br><span class="line">lst = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="comment"># 2.生成50件衣服</span></span><br><span class="line">lst = [<span class="string">f&quot;cloth<span class="subst">&#123;i&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="comment"># 将如下列表中所有的英文字母修改成大写</span></span><br><span class="line">lst1 = [<span class="string">&#x27;allen&#x27;</span>, <span class="string">&#x27;joy&#x27;</span>, <span class="string">&#x27;marin&#x27;</span>, <span class="string">&#x27;joe&#x27;</span>, <span class="string">&#x27;kevin&#x27;</span>]</span><br><span class="line">lst2 = [item.upper() <span class="keyword">for</span> item <span class="keyword">in</span> lst1]</span><br><span class="line"><span class="built_in">print</span>(lst2)</span><br><span class="line"><span class="comment"># 集合推导式：【数据for循环if判断&#125;</span></span><br><span class="line">st = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(st)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典推导式：&#123;k:v for循环 if判断&#125;</span></span><br><span class="line"><span class="comment"># 请将下列的列表修改成字典，要求索引做为key，数据作为value</span></span><br><span class="line">lst = [<span class="string">&#x27;赵本山&#x27;</span>,<span class="string">&#x27;潘长江&#x27;</span>,<span class="string">&#x27;高达&#x27;</span>,<span class="string">&#x27;赵敏&#x27;</span>]</span><br><span class="line">dic = &#123;i:lst[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst))&#125;</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器表达式</span></span><br><span class="line"><span class="comment"># 语法：（数据for循环if）</span></span><br><span class="line">gen = (i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">lst = <span class="built_in">list</span>(gen)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="comment"># generator has used,so it is empty.</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> gen:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>yield</code>：<br />
只要函数中出现了<code>yield</code>,它就是一个生成器函数<br />
作用：<br />
①可以返回数据<br />
②可以分段的执行函数中的内容，通过<code>__next__</code>（）可以执行到下一个<code>yield</code>位置</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 去工厂定制10000件衣服</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order</span>():</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;衣服<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        lst.append(<span class="string">f&quot;衣服<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(lst) == <span class="number">50</span>):</span><br><span class="line">            <span class="keyword">yield</span> lst</span><br><span class="line">            lst = []</span><br><span class="line"></span><br><span class="line">gen = order()</span><br><span class="line"><span class="built_in">print</span>(gen.__next__())</span><br><span class="line"><span class="built_in">print</span>(gen.__next__())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="lambda匿名函数"><a class="markdownIt-Anchor" href="#lambda匿名函数"></a> <code>lambda</code>匿名函数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lambda</span></span><br><span class="line">fn = <span class="keyword">lambda</span> a, b: a + b</span><br><span class="line">ret = fn(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="python内置函数_下"><a class="markdownIt-Anchor" href="#python内置函数_下"></a> <code>python</code>内置函数_下</h3>
<ul>
<li>sorted: 排序</li>
<li>filter: 过滤</li>
<li>map: 映射</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># built-in functions</span></span><br><span class="line"><span class="comment"># zip</span></span><br><span class="line">lst1 = [<span class="string">&#x27;赵本山&#x27;</span>, <span class="string">&#x27;范伟&#x27;</span>, <span class="string">&#x27;苏有朋&#x27;</span>]</span><br><span class="line">lst2 = [<span class="number">30</span>, <span class="number">23</span>, <span class="number">18</span>]</span><br><span class="line">lst3 = [<span class="string">&#x27;卖拐&#x27;</span>, <span class="string">&#x27;耳朵大有福&#x27;</span>, <span class="string">&#x27;情深深雨蒙蒙&#x27;</span>]</span><br><span class="line">result = <span class="built_in">zip</span>(lst1, lst2, lst3)</span><br><span class="line">lst = <span class="built_in">list</span>(result)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># locals</span></span><br><span class="line">a = <span class="number">388</span></span><br><span class="line"><span class="comment"># 此时locals被写在了全局作用域范围内，此时看到的就是全局作用域中的内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">locals</span>())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_local</span>():</span><br><span class="line">    b = <span class="number">53</span></span><br><span class="line">    <span class="comment"># 此时locals放在局部作用域范内</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line">fun_local()</span><br><span class="line"><span class="comment"># globals无论写在哪看到的是全局作用域中的内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">globals</span>())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_global</span>():</span><br><span class="line">    c = <span class="number">15</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">globals</span>())</span><br><span class="line">fun_global()</span><br><span class="line"></span><br><span class="line"><span class="comment"># sorted</span></span><br><span class="line">lst = [<span class="number">16</span>, <span class="number">22</span>, <span class="number">68</span>, <span class="number">1</span>, <span class="number">147</span>, <span class="number">256</span>, <span class="number">49</span>]</span><br><span class="line">s = <span class="built_in">sorted</span>(lst, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">lst = [<span class="string">&#x27;春&#x27;</span>, <span class="string">&#x27;秋&#x27;</span>, <span class="string">&#x27;张二嘎&#x27;</span>, <span class="string">&#x27;比克&#x27;</span>, <span class="string">&#x27;卡卡洛特&#x27;</span>, <span class="string">&#x27;超级宇宙无敌大帅B&#x27;</span>]</span><br><span class="line">s = <span class="built_in">sorted</span>(lst, key=<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">lst = [</span><br><span class="line">    &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周润发&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;salary&#x27;</span>: <span class="number">5200</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周星驰&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">28</span>, <span class="string">&#x27;salary&#x27;</span>: <span class="number">511100</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周海媚&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">48</span>, <span class="string">&#x27;salary&#x27;</span>: <span class="number">451230</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周伯通&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;salary&#x27;</span>: <span class="number">54311</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周大兴&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">58</span>, <span class="string">&#x27;salary&#x27;</span>: <span class="number">54211</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周有辣&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">35</span>, <span class="string">&#x27;salary&#x27;</span>: <span class="number">53210</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;id&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;周扒皮&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">47</span>, <span class="string">&#x27;salary&#x27;</span>: <span class="number">520</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 1. 根据每个人的年龄排序</span></span><br><span class="line">s = <span class="built_in">sorted</span>(lst, key=<span class="keyword">lambda</span> dic: dic[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 2. 根据工资进行排序：从大到小</span></span><br><span class="line">s = <span class="built_in">sorted</span>(lst, key=<span class="keyword">lambda</span> dic: dic[<span class="string">&#x27;salary&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter</span></span><br><span class="line">lst = [<span class="string">&#x27;小狐仙&#x27;</span>, <span class="string">&#x27;灭绝小师太&#x27;</span>, <span class="string">&#x27;张翠山&#x27;</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="string">&#x27;张三丰&#x27;</span>]</span><br><span class="line">f = <span class="built_in">filter</span>(<span class="keyword">lambda</span> item: item.startswith(<span class="string">&#x27;张&#x27;</span>), lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>( f ))</span><br><span class="line"></span><br><span class="line"><span class="comment"># map</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">m = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x, lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>( m ))</span><br></pre></td></tr></table></figure>
<h2 id="面向对象编程"><a class="markdownIt-Anchor" href="#面向对象编程"></a> <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-20/18.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8.md">面向对象编程</a></h2>
<h2 id="python-进阶"><a class="markdownIt-Anchor" href="#python-进阶"></a> <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day31-35/31.Python%E8%AF%AD%E8%A8%80%E8%BF%9B%E9%98%B6.md">Python 进阶</a></h2>
<h2 id="python中的并发编程"><a class="markdownIt-Anchor" href="#python中的并发编程"></a> <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day61-65/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-1.md">Python中的并发编程</a></h2>
<p>引入：现如今，我们使用的计算机早已是多 CPU 或多核的计算机，而我们使用的操作系统基本都支持“多任务”，这使得我们可以同时运行多个程序，也可以将一个程序分解为若干个相对独立的子任务，让多个子任务“并行”或“并发”的执行，从而缩短程序的执行时间，同时也让用户获得更好的体验。因此当下，不管用什么编程语言进行开发，实现“并行”或“并发”编程已经成为了程序员的标配技能。为了讲述如何在 Python 程序中实现“并行”或“并发”，我们需要先了解两个重要的概念：进程和线程。</p>
<h3 id="进程和线程"><a class="markdownIt-Anchor" href="#进程和线程"></a> 进程和线程</h3>
<ol>
<li>进程<br />
简单的说，进程是操作系统分配存储空间的基本单位，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据；操作系统管理所有进程的执行，为它们合理的分配资源。一个进程可以通过 fork 或 spawn 的方式创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此两个进程如果要共享数据，必须通过进程间通信机制来实现，具体的方式包括管道、信号、套接字等。</li>
<li>线程<br />
一个进程还可以拥有多个执行线索，简单的说就是拥有多个可以获得 CPU 调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核 CPU 系统中，多个线程不可能同时执行，因为在某个时刻只有一个线程能够获得 CPU，多个线程通过共享 CPU 执行时间的方式来达到并发的效果。</li>
<li>两个核心概念</li>
</ol>
<ul>
<li><strong>并发</strong><br />
并发通常是指同一时刻只能有一条指令执行，但是多个线程对应的指令被快速轮换地执行。比如一个处理器，它先执行线程 A 的指令一段时间，再执行线程 B 的指令一段时间，再切回到线程 A 执行一段时间。由于处理器执行指令的速度和切换的速度极快，人们完全感知不到计算机在这个过程中有多个线程切换上下文执行的操作，这就使得宏观上看起来多个线程在同时运行，但微观上其实只有一个线程在执行。</li>
<li><strong>并行</strong><br />
并行是指同一时刻，有多条指令在多个处理器上同时执行，并行必须要依赖于多个处理器，不论是从宏观上还是微观上，多个线程可以在同一时刻一起执行的。很多时候，我们并不用严格区分并发和并行两个词，所以我们有时候也把 Python 中的多线程、多进程以及异步 I/O 都视为实现并发编程的手段，但实际上前面两者也可以实现并行编程，当然这里还有一个全局解释器锁（GIL）的问题，我们稍后讨论。</li>
</ul>
<h3 id="多线程编程"><a class="markdownIt-Anchor" href="#多线程编程"></a> 多线程编程</h3>
<p>Python 标准库中threading模块的Thread类可以帮助我们非常轻松的实现多线程编程。我们用一个联网下载文件的例子来对比使用多线程和不使用多线程到底有什么区别，代码如下所示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">*, filename</span>):</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;开始下载 <span class="subst">&#123;filename&#125;</span>....&#x27;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;filename&#125;</span> 下载完成.&#x27;</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;下载耗时：<span class="subst">&#123;end - start:<span class="number">.3</span>f&#125;</span> 秒.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_download_using_single_thread</span>():</span><br><span class="line">    start = time.time()</span><br><span class="line">    download(filename=<span class="string">&#x27;Python从入门到住院.pdf&#x27;</span>)</span><br><span class="line">    download(filename=<span class="string">&#x27;MySQL从删库到跑路.avi&#x27;</span>)</span><br><span class="line">    download(filename=<span class="string">&#x27;Linux从精通到放弃.mp4&#x27;</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;总耗时：<span class="subst">&#123;end - start:<span class="number">.3</span>f&#125;</span> 秒.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_download_using_multi_threads</span>():</span><br><span class="line">    threads = [</span><br><span class="line">        threading.Thread(target=download, kwargs=&#123;<span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;Python从入门到住院.pdf&#x27;</span>&#125;),</span><br><span class="line">        threading.Thread(target=download, kwargs=&#123;<span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;MySQL从删库到跑路.avi&#x27;</span>&#125;),</span><br><span class="line">        threading.Thread(target=download, kwargs=&#123;<span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;Linux从精通到放弃.mp4&#x27;</span>&#125;)</span><br><span class="line">    ]</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="comment"># 启动三个线程</span></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待线程结束</span></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;总耗时：<span class="subst">&#123;end - start:<span class="number">.3</span>f&#125;</span> 秒.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    calc_download_using_single_thread()</span><br><span class="line">    calc_download_using_multi_threads()</span><br></pre></td></tr></table></figure>
<h3 id="使用-thread-类创建线程对象"><a class="markdownIt-Anchor" href="#使用-thread-类创建线程对象"></a> 使用 Thread 类创建线程对象</h3>
<ol>
<li>相关参数的使用<br />
线程启动后会执行target参数指定的函数，当然前提是获得 CPU 的调度；如果target指定的线程要执行的目标函数有参数，需要通过args参数为其进行指定，对于关键字参数，可以通过kwargs参数进行传入。Thread类的构造器还有很多其他的参数，我们遇到的时候再为大家进行讲解，目前需要大家掌握的，就是target、args和kwargs。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_task</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是一个简单的线程任务&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程对象，只指定target</span></span><br><span class="line">thread = threading.Thread(target=simple_task)</span><br><span class="line">thread.start()</span><br><span class="line">thread.join()  <span class="comment"># 等待线程结束</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_with_args</span>(<span class="params">name, age</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;线程收到参数: 姓名=<span class="subst">&#123;name&#125;</span>, 年龄=<span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程对象，使用args传递位置参数</span></span><br><span class="line">thread = threading.Thread(</span><br><span class="line">    target=task_with_args,</span><br><span class="line">    args=(<span class="string">&quot;张三&quot;</span>, <span class="number">25</span>)  <span class="comment"># 注意这是一个元组，单个参数后面要加逗号</span></span><br><span class="line">)</span><br><span class="line">thread.start()</span><br><span class="line">thread.join()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_with_kwargs</span>(<span class="params">name, age, city</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;线程收到参数: 姓名=<span class="subst">&#123;name&#125;</span>, 年龄=<span class="subst">&#123;age&#125;</span>, 城市=<span class="subst">&#123;city&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程对象，使用kwargs传递关键字参数</span></span><br><span class="line">thread = threading.Thread(</span><br><span class="line">    target=task_with_kwargs,</span><br><span class="line">    kwargs=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>&#125;</span><br><span class="line">)</span><br><span class="line">thread.start()</span><br><span class="line">thread.join()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mixed_args_task</span>(<span class="params">name, age, city, country</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;线程收到参数: 姓名=<span class="subst">&#123;name&#125;</span>, 年龄=<span class="subst">&#123;age&#125;</span>, 城市=<span class="subst">&#123;city&#125;</span>, 国家=<span class="subst">&#123;country&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程对象，同时使用args和kwargs</span></span><br><span class="line">thread = threading.Thread(</span><br><span class="line">    target=mixed_args_task,</span><br><span class="line">    args=(<span class="string">&#x27;王五&#x27;</span>, <span class="number">40</span>),  <span class="comment"># 位置参数</span></span><br><span class="line">    kwargs=&#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;country&#x27;</span>: <span class="string">&#x27;中国&#x27;</span>&#125;  <span class="comment"># 关键字参数</span></span><br><span class="line">)</span><br><span class="line">thread.start()</span><br><span class="line">thread.join()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_with_return</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于线程函数不能直接返回值，我们可以通过可变对象来获取结果</span></span><br><span class="line">result_container = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper_func</span>(<span class="params">a, b, container</span>):</span><br><span class="line">    container.append(a + b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程</span></span><br><span class="line">thread = threading.Thread(</span><br><span class="line">    target=wrapper_func,</span><br><span class="line">    args=(<span class="number">10</span>, <span class="number">20</span>, result_container)</span><br><span class="line">)</span><br><span class="line">thread.start()</span><br><span class="line">thread.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;线程计算结果: <span class="subst">&#123;result_container[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_with_return</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于线程函数不能直接返回值，我们可以通过可变对象来获取结果</span></span><br><span class="line">result_container = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper_func</span>(<span class="params">a, b, container</span>):</span><br><span class="line">    container.append(a + b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程</span></span><br><span class="line">thread = threading.Thread(</span><br><span class="line">    target=wrapper_func,</span><br><span class="line">    args=(<span class="number">10</span>, <span class="number">20</span>, result_container)</span><br><span class="line">)</span><br><span class="line">thread.start()</span><br><span class="line">thread.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;线程计算结果: <span class="subst">&#123;result_container[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">named_task</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;线程 &#x27;<span class="subst">&#123;threading.current_thread().name&#125;</span>&#x27; 正在运行&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程并指定名称</span></span><br><span class="line">thread = threading.Thread(</span><br><span class="line">    target=named_task,</span><br><span class="line">    name=<span class="string">&quot;我的自定义线程&quot;</span></span><br><span class="line">)</span><br><span class="line">thread.start()</span><br><span class="line">thread.join()</span><br></pre></td></tr></table></figure>
<h3 id="继承-thread-类自定义线程"><a class="markdownIt-Anchor" href="#继承-thread-类自定义线程"></a> 继承 Thread 类自定义线程</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">继承 Thread 类自定义线程</span></span><br><span class="line"><span class="string">除了上面的代码展示的创建线程的方式外，还可以通过继承Thread类并重写run()方法的方式来自定义线程，具体的代码如下所示。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DownloadThread</span>(threading.Thread):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;下载类线程&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename</span>):</span><br><span class="line">        <span class="variable language_">self</span>.filename = filename</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        start = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;开始下载 <span class="subst">&#123;self.filename&#125;</span>....&#x27;</span>)</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.filename&#125;</span> 下载完成.&#x27;</span>)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;下载耗时：<span class="subst">&#123;end - start:<span class="number">.3</span>f&#125;</span> 秒.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_download_thread</span>():</span><br><span class="line">    threads = [</span><br><span class="line">        DownloadThread(<span class="string">&#x27;Python从入门到住院.pdf&#x27;</span>),</span><br><span class="line">        DownloadThread(<span class="string">&#x27;MySQL从删库到跑路.avi&#x27;</span>),</span><br><span class="line">        DownloadThread(<span class="string">&#x27;Linux从精通到放弃.mp4&#x27;</span>),</span><br><span class="line">    ]</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="comment"># 启动三个线程</span></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line">    <span class="comment"># 等待线程结束</span></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;总耗时: <span class="subst">&#123;end - start:<span class="number">.3</span>f&#125;</span>秒.&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="使用线程池"><a class="markdownIt-Anchor" href="#使用线程池"></a> 使用线程池</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_thread_pool</span>():</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">8</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        filenames = [</span><br><span class="line">            <span class="string">&#x27;Python从入门到住院.pdf&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;MySQL从删库到跑路.avi&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Linux从精通到放弃.mp4&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">        start = time.time()</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            pool.submit(download, filename=filename)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;总耗时: <span class="subst">&#123;end - start:<span class="number">.3</span>f&#125;</span>秒.&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="守护线程"><a class="markdownIt-Anchor" href="#守护线程"></a> 守护线程</h3>
<p>所谓“守护线程”就是在主线程结束的时候，不值得再保留的执行线程。这里的不值得保留指的是守护线程会在其他非守护线程全部运行结束之后被销毁，它守护的是当前进程内所有的非守护线程。简单的说，守护线程会跟随主线程一起挂掉，而主线程的生命周期就是一个进程的生命周期。如果不理解，我们可以看一段简单的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">daemon_display</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(content, end=<span class="string">&#x27;\n&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_daemon_thread</span>():</span><br><span class="line">    threading.Thread(target=daemon_display, args=(<span class="string">&#x27;Ping&#x27;</span>, ), daemon=<span class="literal">True</span>).start()</span><br><span class="line">    threading.Thread(target=daemon_display, args=(<span class="string">&#x27;Pong&#x27;</span>, ), daemon=<span class="literal">True</span>).start()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="资源竞争"><a class="markdownIt-Anchor" href="#资源竞争"></a> 资源竞争</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;银行账户&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.balance = <span class="number">0.0</span></span><br><span class="line">        <span class="variable language_">self</span>.lock = threading.RLock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, money</span>):</span><br><span class="line">        <span class="comment"># 通过上下文语法获得锁和释放锁</span></span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>.lock:</span><br><span class="line">            new_balance = <span class="variable language_">self</span>.balance + money</span><br><span class="line">            time.sleep(<span class="number">0.01</span>)</span><br><span class="line">            <span class="variable language_">self</span>.balance = new_balance</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_multithreads_account</span>():</span><br><span class="line">    account = Account()</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">8</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            pool.submit(account.deposit, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(account.balance)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="gil问题"><a class="markdownIt-Anchor" href="#gil问题"></a> GIL问题</h3>
<p>如果使用官方的 Python 解释器（通常称之为 CPython）运行 Python 程序，我们并不能通过使用多线程的方式将 CPU 的利用率提升到逼近400%（对于4核 CPU）或逼近800%（对于8核 CPU）这样的水平，因为 CPython 在执行代码时，会受到 GIL（全局解释器锁）的限制。具体的说，CPython 在执行任何代码时，都需要对应的线程先获得 GIL，然后每执行100条（字节码）指令，CPython 就会让获得 GIL 的线程主动释放 GIL，这样别的线程才有机会执行。因为 GIL 的存在，无论你的 CPU 有多少个核，我们编写的 Python 代码也没有机会真正并行的执行。</p>
<p>GIL 是官方 Python 解释器在设计上的历史遗留问题，要解决这个问题，让多线程能够发挥 CPU 的多核优势，需要重新实现一个不带 GIL 的 Python 解释器。这个问题按照官方的说法，在 Python 发布4.0版本时会得到解决，就让我们拭目以待吧。当下，对于 CPython 而言，如果希望充分发挥 CPU 的多核优势，可以考虑使用多进程，因为每个进程都对应一个 Python 解释器，因此每个进程都有自己独立的 GIL，这样就可以突破 GIL 的限制。在下一个章节中，我们会为大家介绍关于多进程的相关知识，并对多线程和多进程的代码及其执行效果进行比较。</p>
<h3 id="创建进程"><a class="markdownIt-Anchor" href="#创建进程"></a> 创建进程</h3>
<p>由于 GIL 的存在，CPython 中的多线程并不能发挥 CPU 的多核优势，如果希望突破 GIL 的限制，可以考虑使用多进程。对于多进程的程序，每个进程都有一个属于自己的 GIL，所以多进程不会受到 GIL 的影响。那么，我们应该如何在 Python 程序中创建和使用多进程呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, current_process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_task</span>(<span class="params">content, nums</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;PID: <span class="subst">&#123;current_process().pid&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Name: <span class="subst">&#123;current_process().name&#125;</span>&#x27;</span>)</span><br><span class="line">    counter, total = <span class="number">0</span>, nums.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Loop count: <span class="subst">&#123;total&#125;</span>&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">while</span> counter &lt; total:</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;counter&#125;</span>: <span class="subst">&#123;content&#125;</span>&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_sub_task</span>():</span><br><span class="line">    nums = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">    <span class="comment"># 创建并启动进程来执行指定的函数</span></span><br><span class="line">    Process(target=sub_task, args=(<span class="string">&#x27;Ping&#x27;</span>, nums)).start()</span><br><span class="line">    Process(target=sub_task, args=(<span class="string">&#x27;Pong&#x27;</span>, nums)).start()</span><br><span class="line">    <span class="comment"># 在主进程中执行sub_task函数</span></span><br><span class="line">    sub_task(<span class="string">&#x27;Good&#x27;</span>, nums)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="多进程和多线程的比较"><a class="markdownIt-Anchor" href="#多进程和多线程的比较"></a> 多进程和多线程的比较</h3>
<p>对于爬虫这类 I/O 密集型任务来说，使用多进程并没有什么优势；但是对于计算密集型任务来说，多进程相比多线程，在效率上会有显著的提升，我们可以通过下面的代码来加以证明。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line">PRIMES = [</span><br><span class="line">    <span class="number">1116281</span>,</span><br><span class="line">    <span class="number">1297337</span>,</span><br><span class="line">    <span class="number">104395303</span>,</span><br><span class="line">    <span class="number">472882027</span>,</span><br><span class="line">    <span class="number">533000389</span>,</span><br><span class="line">    <span class="number">817504243</span>,</span><br><span class="line">    <span class="number">982451653</span>,</span><br><span class="line">    <span class="number">112272535095293</span>,</span><br><span class="line">    <span class="number">112582705942171</span>,</span><br><span class="line">    <span class="number">112272535095293</span>,</span><br><span class="line">    <span class="number">115280095190773</span>,</span><br><span class="line">    <span class="number">115797848077099</span>,</span><br><span class="line">    <span class="number">1099726899285419</span></span><br><span class="line">] * <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_times</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\033[31m<span class="subst">&#123;func.__name__&#125;</span>: <span class="subst">&#123;end - start:<span class="number">.3</span>f&#125;</span> seconds\033[0m&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判断素数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(n ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> n != <span class="number">1</span></span><br><span class="line"><span class="meta">@calc_times</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_multi_threads</span>():</span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">16</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="keyword">for</span> number, prime <span class="keyword">in</span> <span class="built_in">zip</span>(PRIMES, executor.<span class="built_in">map</span>(is_prime, PRIMES)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;number&#125;</span> is prime: <span class="subst">&#123;prime&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="meta">@calc_times</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_multi_process</span>():</span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor(max_workers=<span class="number">16</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="keyword">for</span> number, prime <span class="keyword">in</span> <span class="built_in">zip</span>(PRIMES, executor.<span class="built_in">map</span>(is_prime, PRIMES)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;number&#125;</span> is prime: <span class="subst">&#123;prime&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># test_sub_task()</span></span><br><span class="line">    test_multi_threads()</span><br><span class="line">    test_multi_process()</span><br><span class="line"></span><br><span class="line"><span class="comment"># test_multi_threads: 39.310 seconds</span></span><br><span class="line"><span class="comment"># test_multi_process: 24.378 seconds</span></span><br></pre></td></tr></table></figure>
<h3 id="进程间通信"><a class="markdownIt-Anchor" href="#进程间通信"></a> 进程间通信</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_task</span>(<span class="params">content: <span class="built_in">str</span>, queue: Queue</span>):</span><br><span class="line">    counter = queue.get()</span><br><span class="line">    <span class="keyword">while</span> counter &lt; <span class="number">50</span>:</span><br><span class="line">        <span class="built_in">print</span>(content, end=<span class="string">&#x27;\n&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        queue.put(counter)</span><br><span class="line">        time.sleep(<span class="number">0.01</span>)</span><br><span class="line">        counter = queue.get()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_sub_task_count50times</span>():</span><br><span class="line">    queue = Queue()</span><br><span class="line">    queue.put(<span class="number">0</span>)</span><br><span class="line">    p1 = Process(target=sub_task, args=(<span class="string">&#x27;Ping&#x27;</span>, queue))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2 = Process(target=sub_task, args=(<span class="string">&#x27;Pong&#x27;</span>, queue))</span><br><span class="line">    p2.start()</span><br><span class="line">    <span class="keyword">while</span> p1.is_alive() <span class="keyword">and</span> p2.is_alive():</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    queue.put(<span class="number">50</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="并发中四个重要概念"><a class="markdownIt-Anchor" href="#并发中四个重要概念"></a> 并发中四个重要概念</h3>
<p>同步与异步的关注点是<strong>消息通信机制</strong>，最终表现出来的是“有序”和“无序”的区别；阻塞和非阻塞的关注点是<strong>程序在等待消息时状态</strong>，最终表现出来的是程序在等待时能不能做点别的。</p>
<ul>
<li><strong>阻塞</strong><br />
阻塞状态指程序未得到所需计算资源时被挂起的状态。程序在等待某个操作完成期间，自身无法继续处理其他的事情，则称该程序在该操作上是阻塞的。阻塞随时都可能发生，最典型的就是 I/O 中断（包括网络 I/O 、磁盘 I/O 、用户输入等）、休眠操作、等待某个线程执行结束，甚至包括在 CPU 切换上下文时，程序都无法真正的执行，这就是所谓的阻塞。</li>
<li><strong>非阻塞</strong><br />
程序在等待某操作过程中，自身不被阻塞，可以继续处理其他的事情，则称该程序在该操作上是非阻塞的。非阻塞并不是在任何程序级别、任何情况下都可以存在的。仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。显然，某个操作的阻塞可能会导程序耗时以及效率低下，所以我们会希望把它变成非阻塞的。</li>
<li><strong>同步</strong><br />
不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，我们称这些程序单元是同步执行的。例如前面讲过的给银行账户存钱的操作，我们在代码中使用了“锁”作为通信信号，让多个存钱操作强制排队顺序执行，这就是所谓的同步。</li>
<li><strong>异步</strong><br />
不同程序单元在执行过程中无需通信协调，也能够完成一个任务，这种方式我们就称之为异步。例如，使用爬虫下载页面时，调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是不相关的，也无需相互通知协调。很显然，异步操作的完成时刻和先后顺序并不能确定。</li>
</ul>
<h3 id="生成器和协程"><a class="markdownIt-Anchor" href="#生成器和协程"></a> 生成器和协程</h3>
<p>前面我们说过，异步编程是一种“协作式并发”，即通过多个子程序相互协作的方式提升 CPU 的利用率，从而减少程序在阻塞和等待中浪费的时间，最终达到并发的效果。我们可以将多个相互协作的子程序称为“协程”，它是实现异步编程的关键。在介绍协程之前，我们先通过下面的代码，看看什么是生成器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">max_count</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_count):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_fib</span>():</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> fib(<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(val, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;生成器经过预激活，就是一个协程，它可以跟其他子程序协作。&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_avg</span>():</span><br><span class="line">    total, counter = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    avg_value = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        curr_value = <span class="keyword">yield</span> avg_value</span><br><span class="line">        total += curr_value</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        avg_value = total / counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_calc_avg</span>():</span><br><span class="line">    obj = calc_avg()</span><br><span class="line">    <span class="comment"># 生成器预激活</span></span><br><span class="line">    obj.send(<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(obj.send(_))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="异步函数"><a class="markdownIt-Anchor" href="#异步函数"></a> 异步函数</h3>
<p>Python 3.5版本中，引入了两个非常有意思的元素，一个叫async，一个叫await，它们在Python 3.7版本中成为了正式的关键字。通过这两个关键字，可以简化协程代码的编写，可以用更为简单的方式让多个子程序很好的协作起来。我们通过一个例子来加以说明，请大家先看看下面的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">max_count</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_count):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_fib</span>():</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> fib(<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">print</span>(val, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;生成器经过预激活，就是一个协程，它可以跟其他子程序协作。&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_avg</span>():</span><br><span class="line">    total, counter = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    avg_value = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        curr_value = <span class="keyword">yield</span> avg_value</span><br><span class="line">        total += curr_value</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        avg_value = total / counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_calc_avg</span>():</span><br><span class="line">    obj = calc_avg()</span><br><span class="line">    <span class="comment"># 生成器预激活</span></span><br><span class="line">    obj.send(<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(obj.send(_))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sync_display</span>(<span class="params">num</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_sync_display</span>():</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        sync_display(i)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;end - start:<span class="number">.3</span>f&#125;</span>秒&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_display</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_async_display</span>():</span><br><span class="line">    start = time.time()</span><br><span class="line">    objs = [async_display(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(asyncio.wait(objs))</span><br><span class="line">    loop.close()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;end - start:<span class="number">.3</span>f&#125;</span>秒&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="aiohttp库"><a class="markdownIt-Anchor" href="#aiohttp库"></a> aiohttp库</h3>
<p>我们之前使用的requests三方库并不支持异步 I/O，如果希望使用异步 I/O 的方式来加速爬虫代码的执行，我们可以安装和使用名为aiohttp的三方库。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> ClientSession</span><br><span class="line"></span><br><span class="line">TITLE_PATTERN = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;title.*?&gt;(.*?)&lt;/title&gt;&#x27;</span>, re.DOTALL)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch_page_title</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(headers=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;) <span class="keyword">as</span> session:  <span class="comment"># type: ClientSession</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, ssl=<span class="literal">False</span>) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="keyword">if</span> resp.status == <span class="number">200</span>:</span><br><span class="line">                html_code = <span class="keyword">await</span> resp.text()</span><br><span class="line">                matcher = TITLE_PATTERN.search(html_code)</span><br><span class="line">                title = matcher.group(<span class="number">1</span>).strip()</span><br><span class="line">                <span class="built_in">print</span>(title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">&#x27;https://www.python.org/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.jd.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.baidu.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.taobao.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://git-scm.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.sohu.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://gitee.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.amazon.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.usa.gov/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.nasa.gov/&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    objs = [fetch_page_title(url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(asyncio.wait(objs))</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure>
<h2 id="numpy的应用"><a class="markdownIt-Anchor" href="#numpy的应用"></a> <code>NumPy</code>的应用</h2>
<p><code>Numpy</code> 是一个开源的 <code>Python</code> 科学计算库，用于快速处理任意维度的数组。<code>Numpy</code> 支持常见的数组和矩阵操作，对于同样的数值计算任务，使用 <code>NumPy</code> 不仅代码要简洁的多，而且 <code>NumPy</code> 在性能上也远远优于原生 <code>Python</code>，至少是一到两个数量级的差距，而且数据量越大，<code>NumPy</code> 的优势就越明显。</p>
<p><code>NumPy</code> 最为核心的数据类型是<code>ndarray</code>，使用<code>ndarray</code>可以处理一维、二维和多维数组，该对象相当于是一个快速而灵活的大数据容器。<code>NumPy</code> 底层代码使用 C 语言编写，解决了 <code>GIL</code> 的限制，<code>ndarray</code>在存取数据的时候，数据与数据的地址都是连续的，这确保了可以进行高效率的批量操作，性能上远远优于 <code>Python</code> 中的<code>list</code>；另一方面<code>ndarray</code>对象提供了更多的方法来处理数据，尤其获取数据统计特征的方法，这些方法也是 <code>Python</code> 原生的<code>list</code>没有的。</p>
<h3 id="创建数组对象"><a class="markdownIt-Anchor" href="#创建数组对象"></a> 创建数组对象</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;方法一：使用array函数，通过list创建数组对象&quot;&quot;&quot;</span></span><br><span class="line">array1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line"></span><br><span class="line">array2 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;方法二：使用arange函数，指定取值范围和跨度创建数组对象&quot;&quot;&quot;</span></span><br><span class="line">array3 = np.arange(<span class="number">0</span>, <span class="number">20</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array3)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;方法三：使用linspace函数，用指定范围和元素个数创建数组对象，生成等差数列&quot;&quot;&quot;</span></span><br><span class="line">array4 = np.linspace(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(array4)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">方法四：使用logspace函数，生成等比数列</span></span><br><span class="line"><span class="string">注意：等比数列的起始值是 2^1 ，等比数列的终止值是 2^10 ，num是元素的个数，base就是底数。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">array5 = np.logspace(<span class="number">1</span>, <span class="number">10</span>, num=<span class="number">10</span>, base=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array5)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;方法五：通过fromstring函数从字符串提取数据创建数组对象&quot;&quot;&quot;</span></span><br><span class="line">array6 = np.fromstring(<span class="string">&#x27;1, 2, 3, 4, 5&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, dtype=<span class="string">&#x27;i8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array6)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;方法六：通过fromiter函数从生成器（迭代器）中获取数据创建数组对象&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">num</span>):</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line">gen = fib(<span class="number">20</span>)</span><br><span class="line">array7 = np.fromiter(gen, dtype=<span class="string">&#x27;i8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array7)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">方法七：使用numpy.random模块的函数生成随机数创建数组对象</span></span><br><span class="line"><span class="string">产生 10 个 [ 0 , 1 ) 范围的随机小数，代码：</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">array8 = np.random.rand(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(array8)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">产生 10 个 [ 1 , 100 ) 范围的随机整数，代码：</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">array9 = np.random.randint(<span class="number">1</span>, <span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(array9)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">产生 20 个 μ = 50 ， σ = 10 的正态分布随机数，代码：</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">array10 = np.random.normal(<span class="number">50</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(array10)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">产生 [ 0 , 1 ) 范围的随机小数构成的 3 行 4 列的二维数组，代码：</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">array11 = np.random.rand(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(array11)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">产生 [ 1 , 100 ) 范围的随机整数构成的三维数组，代码：</span></span><br><span class="line"><span class="string">(3, 4, 5): 3block, 4row, 5col</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">array12 = np.random.randint(<span class="number">1</span>, <span class="number">100</span>, (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(array12)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">方法八：创建全0、全1或指定元素的数组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;使用zeros函数，代码：&quot;&quot;&quot;</span></span><br><span class="line">array13 = np.zeros((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(array13)</span><br><span class="line"><span class="string">&quot;&quot;&quot;使用ones函数，代码：&quot;&quot;&quot;</span></span><br><span class="line">array14 = np.ones((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(array14)</span><br><span class="line"><span class="string">&quot;&quot;&quot;使用full函数，代码：&quot;&quot;&quot;</span></span><br><span class="line">array15 = np.full((<span class="number">3</span>, <span class="number">4</span>), <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(array15)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">方法九：使用eye函数创建单位矩阵</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">array16 = np.eye(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(array16)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">方法十：读取图片获得对应的三维数组</span></span><br><span class="line"><span class="string">说明：上面的代码读取了当前路径下名为guido.jpg 的图片文件，</span></span><br><span class="line"><span class="string">计算机系统中的图片通常由若干行若干列的像素点构成，</span></span><br><span class="line"><span class="string">而每个像素点又是由红绿蓝三原色构成的，刚好可以用三维数组来表示。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">array17 = plt.imread(<span class="string">&#x27;guido.jpg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(array17)</span><br></pre></td></tr></table></figure>
<h3 id="数组对象的属性"><a class="markdownIt-Anchor" href="#数组对象的属性"></a> 数组对象的属性</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;size属性：获取数组元素个数。&quot;&quot;&quot;</span></span><br><span class="line">array16 = np.arange(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line">array18 = np.random.rand(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(array16.size)</span><br><span class="line"><span class="built_in">print</span>(array17.size)</span><br><span class="line"><span class="built_in">print</span>(array18.size)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;shape属性：获取数组的形状。&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(array16.shape)</span><br><span class="line"><span class="built_in">print</span>(array17.shape)</span><br><span class="line"><span class="built_in">print</span>(array18.shape)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;dtype属性：获取数组元素的数据类型。&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(array16.dtype)</span><br><span class="line"><span class="built_in">print</span>(array17.dtype)</span><br><span class="line"><span class="built_in">print</span>(array18.dtype)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;ndim属性：获取数组的维度。&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(array16.ndim)</span><br><span class="line"><span class="built_in">print</span>(array17.ndim)</span><br><span class="line"><span class="built_in">print</span>(array18.ndim)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;itemsize属性：获取数组单个元素占用内存空间的字节数。&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(array16.itemsize)</span><br><span class="line"><span class="built_in">print</span>(array17.itemsize)</span><br><span class="line"><span class="built_in">print</span>(array18.itemsize)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;nbytes属性：获取数组所有元素占用内存空间的字节数。&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(array16.nbytes)</span><br><span class="line"><span class="built_in">print</span>(array17.nbytes)</span><br><span class="line"><span class="built_in">print</span>(array18.nbytes)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="数组的索引运算"><a class="markdownIt-Anchor" href="#数组的索引运算"></a> 数组的索引运算</h3>
<p>和 Python 中的列表类似，NumPy 的ndarray对象可以进行索引和切片操作，通过索引可以获取或修改数组中的元素，通过切片操作可以取出数组的一部分，我们把切片操作也称为切片索引。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">普通索引</span></span><br><span class="line"><span class="string">类似于 Python 中list类型的索引运算。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">array19 = np.arange(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(array19[<span class="number">0</span>], array19[array19.size - <span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(array19[-array19.size], array19[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">array20 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"><span class="built_in">print</span>(array20[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(array20[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(array20[-<span class="number">1</span>][-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(array20[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(array20[<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">array20[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(array20)</span><br><span class="line">array20[<span class="number">1</span>] = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line"><span class="built_in">print</span>(array20)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="切片索引"><a class="markdownIt-Anchor" href="#切片索引"></a> 切片索引</h3>
<p>切片索引是形如[开始索引:结束索引:跨度]的语法，通过指定开始索引（默认值无穷小）、结束索引（默认值无穷大）和跨度（默认值1），从数组中取出指定部分的元素并构成新的数组。因为开始索引、结束索引和步长都有默认值，所以它们都可以省略，如果不指定步长，第二个冒号也可以省略。一维数组的切片运算跟 Python 中的list类型的切片非常类似，此处不再赘述，二维数组的切片可以参考下面的代码，相信非常容易理解。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;&quot;切片索引&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(array20[:<span class="number">2</span>, <span class="number">1</span>:])</span><br><span class="line"><span class="built_in">print</span>(array20[<span class="number">2</span>, :])</span><br><span class="line"><span class="built_in">print</span>(array20[<span class="number">2</span>:, :])</span><br><span class="line"><span class="built_in">print</span>(array20[:, :<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(array20[::<span class="number">2</span>, ::<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(array20[::-<span class="number">2</span>, ::-<span class="number">2</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="花式索引"><a class="markdownIt-Anchor" href="#花式索引"></a> 花式索引</h3>
<p>花式索引是用保存整数的数组充当一个数组的索引，这里所说的数组可以是 NumPy 的ndarray，也可以是 Python 中list、tuple等可迭代类型，可以使用正向或负向索引。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(array19[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">4</span>, -<span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(array20[[<span class="number">0</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="built_in">print</span>(array20[[<span class="number">0</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="built_in">print</span>(array20[[<span class="number">0</span>, <span class="number">2</span>], <span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="布尔索引"><a class="markdownIt-Anchor" href="#布尔索引"></a> 布尔索引</h3>
<p>布尔索引就是通过保存布尔值的数组充当一个数组的索引，布尔值为True的元素保留，布尔值为False的元素不会被选中。布尔值的数组可以手动构造，也可以通过关系运算来产生。<br />
关于索引运算需要说明的是，切片索引虽然创建了新的数组对象，但是新数组和原数组共享了数组中的数据，简单的说，无论你通过新数组对象或原数组对象修改数组中的数据，修改的其实是内存中的同一块数据。花式索引和布尔索引也会创建新的数组对象，而且新数组复制了原数组的元素，新数组和原数组并不是共享数据的关系，这一点可以查看数组对象的base属性，有兴趣的读者可以自行探索。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(array19[[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">True</span>]])</span><br><span class="line"><span class="built_in">print</span>(array19 &gt; <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(~(array19 &gt; <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(array19[array19 &gt; <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(array19 % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(array19[array19 % <span class="number">2</span> == <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>((array19 &gt; <span class="number">5</span>) &amp; (array19 % <span class="number">2</span> == <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(array19[(array19 &gt; <span class="number">5</span>) &amp; (array19 % <span class="number">2</span> == <span class="number">0</span>)])</span><br><span class="line"><span class="built_in">print</span>(array19[(array19 &gt; <span class="number">5</span>) | (array19 % <span class="number">2</span> == <span class="number">0</span>)])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="案例通过数组切片处理图像"><a class="markdownIt-Anchor" href="#案例通过数组切片处理图像"></a> 案例：通过数组切片处理图像</h3>
<p>学习基础知识总是比较枯燥且没有成就感的，所以我们还是来个案例为大家演示下上面学习的数组索引和切片操作到底有什么用。前面我们说到过，可以用三维数组来表示图像，那么通过图像对应的三维数组进行操作，就可以实现对图像的处理，如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.use(<span class="string">&#x27;TkAgg&#x27;</span>)</span><br><span class="line">guido_img = plt.imread(<span class="string">&#x27;guido.jpg&#x27;</span>)</span><br><span class="line"><span class="comment"># 正常载入图片</span></span><br><span class="line">plt.imshow(guido_img)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 垂直翻转</span></span><br><span class="line">plt.imshow(guido_img[::-<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 水平翻转</span></span><br><span class="line">plt.imshow(guido_img[:, ::-<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 通过切片操作实现抠图，将吉多大叔的头抠出来。</span></span><br><span class="line">plt.imshow(guido_img[<span class="number">30</span>:<span class="number">350</span>, <span class="number">90</span>:<span class="number">300</span>])</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 通过切片操作实现降采样。</span></span><br><span class="line">plt.imshow(guido_img[::<span class="number">10</span>, ::<span class="number">10</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="数组对象的方法"><a class="markdownIt-Anchor" href="#数组对象的方法"></a> 数组对象的方法</h3>
<ol>
<li>计算总和、均值和中位数。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(array1))</span><br><span class="line"><span class="built_in">print</span>(array1.<span class="built_in">sum</span>())</span><br><span class="line"><span class="built_in">print</span>(np.mean(array1))</span><br><span class="line"><span class="built_in">print</span>(array1.mean())</span><br><span class="line"><span class="built_in">print</span>(np.median(array1))</span><br><span class="line"><span class="built_in">print</span>(np.quantile(array1, <span class="number">0.5</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>极值、全距和四分位距离。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.<span class="built_in">max</span>(array1))</span><br><span class="line"><span class="built_in">print</span>(array1.<span class="built_in">max</span>())</span><br><span class="line"><span class="built_in">print</span>(array1.<span class="built_in">min</span>())</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">min</span>(array1))</span><br><span class="line"><span class="built_in">print</span>(np.ptp(array1))</span><br><span class="line">q1, q3 = np.quantile(array1, [<span class="number">0.25</span>, <span class="number">0.75</span>])</span><br><span class="line"><span class="built_in">print</span>(q3 - q1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>方差、标准差和变异系数。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(array1.var())</span><br><span class="line"><span class="built_in">print</span>(np.var(array1))</span><br><span class="line"><span class="built_in">print</span>(array1.std())</span><br><span class="line"><span class="built_in">print</span>(np.std(array1))</span><br><span class="line"><span class="built_in">print</span>(array1.std() / array1.mean())</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>绘制箱线图。<br />
箱线图又称为盒须图，是显示一组数据分散情况的统计图，因形状如箱子而得名。 它主要用于反映原始数据分布的特征，还可以进行多组数据分布特征的比较。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.boxplot(array1, showmeans=<span class="literal">True</span>)</span><br><span class="line">plt.ylim([-<span class="number">20</span>, <span class="number">120</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="数组的运算"><a class="markdownIt-Anchor" href="#数组的运算"></a> 数组的运算</h3>
<p>使用 NumPy 最为方便的是当需要对数组元素进行运算时，不用编写循环代码遍历每个元素，所有的运算都会自动的矢量化。简单的说就是，NumPy 中的数学运算和数学函数会自动作用于数组中的每个成员。</p>
<ol>
<li>数组跟标量的运算</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array1= np.arange(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(array1 + <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(array1 * <span class="number">10</span>)</span><br><span class="line"><span class="comment"># [11 12 13 14 15 16 17 18 19]</span></span><br><span class="line"><span class="comment"># [10 20 30 40 50 60 70 80 90]</span></span><br><span class="line"><span class="built_in">print</span>(array1 &gt; <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(array1 % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="comment"># [False False False False False  True  True  True  True]</span></span><br><span class="line"><span class="comment"># [False  True False  True False  True False  True False]</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>数组跟数组的运算<br />
NumPy 的数组跟数组也可以执行算术运算和关系运算，运算会作用于两个数组对应的元素上，这就要求两个数组的形状（shape属性）要相同，如下所示。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array2 = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(array1 + array2)</span><br><span class="line"><span class="built_in">print</span>(array1 * array2)</span><br><span class="line"><span class="built_in">print</span>(array1 ** array2)</span><br><span class="line"><span class="comment"># [ 2  3  4  6  7  8 10 11 12]</span></span><br><span class="line"><span class="comment"># [ 1  2  3  8 10 12 21 24 27]</span></span><br><span class="line"><span class="comment"># [  1   2   3  16  25  36 343 512 729]</span></span><br><span class="line"><span class="built_in">print</span>(array1 &gt; array2)</span><br><span class="line"><span class="built_in">print</span>(array1 % array2 == <span class="number">0</span>)</span><br><span class="line"><span class="comment"># [False  True  True  True  True  True  True  True  True]</span></span><br><span class="line"><span class="comment"># [ True  True  True  True False  True False False  True]</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>通用一元函数<br />
NumPy 中通用一元函数的参数是一个数组对象，函数会对数组进行元素级的处理，例如：sqrt函数会对数组中的每个元素计算平方根，而log2函数会对数组中的每个元素计算以2为底的对数，代码如下所示。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.sqrt(array1))</span><br><span class="line"><span class="built_in">print</span>(np.log2(array1))</span><br></pre></td></tr></table></figure>
<ul>
<li>表1：通用一元函数</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>abs</code> / <code>fabs</code></td>
<td>求绝对值的函数</td>
</tr>
<tr>
<td><code>sqrt</code></td>
<td>求平方根的函数，相当于<code>array ** 0.5 </code></td>
</tr>
<tr>
<td><code>square</code></td>
<td>求平方的函数，相当于<code>array ** 2</code></td>
</tr>
<tr>
<td><code>exp</code></td>
<td>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><msup><mi>e</mi><mi>x</mi></msup></mstyle></mrow><annotation encoding="application/x-tex">\small{e^x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.585036em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.65004em;"><span style="top:-2.963em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span> 的函数</td>
</tr>
<tr>
<td><code>log</code> / <code>log10</code> / <code>log2</code></td>
<td>对数函数（<code>e</code>为底 / <code>10</code>为底 / <code>2</code>为底）</td>
</tr>
<tr>
<td><code>sign</code></td>
<td>符号函数（<code>1</code> - 正数；<code>0</code> - 零；<code>-1</code> - 负数）</td>
</tr>
<tr>
<td><code>ceil</code> / <code>floor</code></td>
<td>上取整 /  下取整</td>
</tr>
<tr>
<td><code>isnan</code></td>
<td>返回布尔数组，NaN对应<code>True</code>，非NaN对应<code>False</code></td>
</tr>
<tr>
<td><code>isfinite</code> / <code>isinf</code></td>
<td>判断数值是否为无穷大的函数</td>
</tr>
<tr>
<td><code>cos</code> / <code>cosh</code> / <code>sin</code></td>
<td>三角函数</td>
</tr>
<tr>
<td><code>sinh</code> / <code>tan</code> / <code>tanh</code></td>
<td>三角函数</td>
</tr>
<tr>
<td><code>arccos</code> / <code>arccosh</code> / <code>arcsin</code></td>
<td>反三角函数</td>
</tr>
<tr>
<td><code>arcsinh</code> / <code>arctan</code> / <code>arctanh</code></td>
<td>反三角函数</td>
</tr>
<tr>
<td><code>rint</code> / <code>round</code></td>
<td>四舍五入函数</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>通用二元函数<br />
NumPy 中通用二元函数的参数是两个数组对象，函数会对两个数组中的对应元素进行运算，例如：maximum函数会对两个数组中对应的元素找最大值，而power函数会对两个数组中对应的元素进行求幂操作，代码如下所示。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array3 = np.array([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line">array4 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.maximum(array3, array4))</span><br><span class="line"><span class="built_in">print</span>(np.power(array3, array4))</span><br><span class="line"><span class="comment"># [[4 5 6]</span></span><br><span class="line"><span class="comment">#  [7 8 9]]</span></span><br><span class="line"><span class="comment"># [[  4  25 216]</span></span><br><span class="line"><span class="comment">#  [343  64   9]]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>表2：通用二元函数</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>add(x, y)</code> / <code>substract(x, y)</code></td>
<td>加法函数 / 减法函数</td>
</tr>
<tr>
<td><code>multiply(x, y)</code> / <code>divide(x, y)</code></td>
<td>乘法函数 / 除法函数</td>
</tr>
<tr>
<td><code>floor_divide(x, y)</code> / <code>mod(x, y)</code></td>
<td>整除函数 / 求模函数</td>
</tr>
<tr>
<td><code>allclose(x, y)</code></td>
<td>检查数组<code>x</code>和<code>y</code>元素是否几乎相等</td>
</tr>
<tr>
<td><code>power(x, y)</code></td>
<td>数组<code>x</code>的元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><msub><mi>x</mi><mi>i</mi></msub></mstyle></mrow><annotation encoding="application/x-tex">\small{x_{i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5225040000000001em;vertical-align:-0.135em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28967999999999994em;"><span style="top:-2.45em;margin-left:0em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 和数组<code>y</code>的元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><msub><mi>y</mi><mi>i</mi></msub></mstyle></mrow><annotation encoding="application/x-tex">\small{y_{i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5625em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28967999999999994em;"><span style="top:-2.45em;margin-left:-0.03588em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>，计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><msubsup><mi>x</mi><mi>i</mi><msub><mi>y</mi><mi>i</mi></msub></msubsup></mstyle></mrow><annotation encoding="application/x-tex">\small{x_{i}^{y_{i}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.920928em;vertical-align:-0.229392em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7683733333333332em;"><span style="top:-2.34512em;margin-left:0em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.0813333333333333em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:-0.03588em;margin-right:0.08333333333333334em;"><span class="pstrut" style="height:2.5496em;"></span><span class="sizing reset-size2 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.20479999999999998em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25488em;"><span></span></span></span></span></span></span></span></span></span></span></td>
</tr>
<tr>
<td><code>maximum(x, y)</code> / <code>fmax(x, y)</code></td>
<td>两两比较元素获取最大值 / 获取最大值（忽略NaN）</td>
</tr>
<tr>
<td><code>minimum(x, y)</code> / <code>fmin(x, y)</code></td>
<td>两两比较元素获取最小值 / 获取最小值（忽略NaN）</td>
</tr>
<tr>
<td><code>dot(x, y)</code></td>
<td>点积运算（数量积，通常记为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mo lspace="0em" rspace="0em">⋅</mo></mstyle></mrow><annotation encoding="application/x-tex">\small{\cdot}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.400005em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord">⋅</span></span></span></span></span> ，用于欧几里得空间（Euclidean space））</td>
</tr>
<tr>
<td><code>inner(x, y)</code></td>
<td>内积运算（内积的含义要高于点积，点积相当于是内积在欧几里得空间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup></mstyle></mrow><annotation encoding="application/x-tex">\small{\mathbb{R}^{n}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.620001em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.65004em;"><span style="top:-2.963em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></span> 的特例，而内积可以推广到赋范向量空间，只要它满足平行四边形法则即可）</td>
</tr>
<tr>
<td><code>cross(x, y) </code></td>
<td>叉积运算（向量积，通常记为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mo lspace="0em" rspace="0em">×</mo></mstyle></mrow><annotation encoding="application/x-tex">\small{\times}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.599994em;vertical-align:-0.07499700000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord">×</span></span></span></span></span> ，运算结果是一个向量）</td>
</tr>
<tr>
<td><code>outer(x, y)</code></td>
<td>外积运算（张量积，通常记为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mo lspace="0em" rspace="0em">⨂</mo></mstyle></mrow><annotation encoding="application/x-tex">\small{\bigotimes}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9000090000000001em;vertical-align:-0.22500900000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⨂</span></span></span></span></span> ，运算结果通常是一个矩阵）</td>
</tr>
<tr>
<td><code>intersect1d(x, y)</code></td>
<td>计算<code>x</code>和<code>y</code>的交集，返回这些元素构成的有序数组</td>
</tr>
<tr>
<td><code>union1d(x, y)</code></td>
<td>计算<code>x</code>和<code>y</code>的并集，返回这些元素构成的有序数组</td>
</tr>
<tr>
<td><code>in1d(x, y)</code></td>
<td>返回由判断<code>x</code> 的元素是否在<code>y</code>中得到的布尔值构成的数组</td>
</tr>
<tr>
<td><code>setdiff1d(x, y)</code></td>
<td>计算<code>x</code>和<code>y</code>的差集，返回这些元素构成的数组</td>
</tr>
<tr>
<td><code>setxor1d(x, y)</code></td>
<td>计算<code>x</code>和<code>y</code>的对称差，返回这些元素构成的数组</td>
</tr>
</tbody>
</table>
<h3 id="广播机制"><a class="markdownIt-Anchor" href="#广播机制"></a> 广播机制</h3>
<p>上面数组运算的例子中，两个数组的形状（<code>shape</code>属性）是完全相同的，我们再来研究一下，两个形状不同的数组是否可以直接做二元运算或使用通用二元函数进行运算，请看下面的例子。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array5 = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]])</span><br><span class="line">array6 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">array5 + array6</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array([[1, 2, 3],</span><br><span class="line">       [2, 3, 4],</span><br><span class="line">       [3, 4, 5],</span><br><span class="line">       [4, 5, 6]])</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array7 = np.array([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>]])</span><br><span class="line">array5 + array7</span><br></pre></td></tr></table></figure>
<p>通过上面的例子，我们发现形状不同的数组仍然有机会进行二元运算，但这不代表任意形状的数组都可以进行二元运算。简单的说，只有两个数组后缘维度相同或者后缘维度不同但其中一个数组后缘维度为1时，广播机制才会被触发。通过广播机制，NumPy 将两个原本形状不相同的数组变成形状相同，才能进行二元运算。所谓后缘维度，指的是数组形状（shape属性）从后往前看对应的部分，我们举例说明。</p>
<h3 id="其他常用函数"><a class="markdownIt-Anchor" href="#其他常用函数"></a> 其他常用函数</h3>
<p>除了上面讲到的函数外，NumPy 中还提供了很多用于处理数组的函数，<code>ndarray</code>对象的很多方法也可以通过调用函数来实现，下表给出了一些常用的函数。</p>
<ul>
<li>表3：NumPy其他常用函数</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>unique</code></td>
<td>去除数组重复元素，返回唯一元素构成的有序数组</td>
</tr>
<tr>
<td><code>copy</code></td>
<td>返回拷贝数组得到的数组</td>
</tr>
<tr>
<td><code>sort</code></td>
<td>返回数组元素排序后的拷贝</td>
</tr>
<tr>
<td><code>split</code> / <code>hsplit</code> / <code>vsplit</code></td>
<td>将数组拆成若干个子数组</td>
</tr>
<tr>
<td><code>stack</code> / <code>hstack</code> / <code>vstack</code></td>
<td>将多个数组堆叠成新数组</td>
</tr>
<tr>
<td><code>concatenate</code></td>
<td>沿着指定的轴连接多个数组构成新数组</td>
</tr>
<tr>
<td><code>append</code> / <code>insert</code></td>
<td>向数组末尾追加元素 / 在数组指定位置插入元素</td>
</tr>
<tr>
<td><code>argwhere</code></td>
<td>找出数组中非0元素的位置</td>
</tr>
<tr>
<td><code>extract</code> / <code>select</code> / <code>where</code></td>
<td>按照指定的条件从数组中抽取或处理数组元素</td>
</tr>
<tr>
<td><code>flip</code></td>
<td>沿指定的轴翻转数组中的元素</td>
</tr>
<tr>
<td><code>fromregex</code></td>
<td>通过读取文件和正则表达式解析获取数据创建数组对象</td>
</tr>
<tr>
<td><code>repeat</code> / <code>tile</code></td>
<td>通过对元素的重复来创建新数组</td>
</tr>
<tr>
<td><code>roll</code></td>
<td>沿指定轴对数组元素进行移位</td>
</tr>
<tr>
<td><code>resize</code></td>
<td>重新调整数组的大小</td>
</tr>
<tr>
<td><code>place</code> / <code>put</code></td>
<td>将数组中满足条件的元素/指定的元素替换为指定的值</td>
</tr>
<tr>
<td><code>partition</code></td>
<td>用选定的元素对数组进行一次划分并返回划分后的数组</td>
</tr>
</tbody>
</table>
<h3 id="向量"><a class="markdownIt-Anchor" href="#向量"></a> 向量</h3>
<p><strong>向量</strong>（<em>vector</em>）也叫<strong>矢量</strong>，是一个同时具有大小和方向，且满足平行四边形法则的几何对象。与向量相对的概念叫<strong>标量</strong>或<strong>数量</strong>，标量只有大小，绝大多数情况下没有方向。我们通常用带箭头的线段来表示向量，在平面直角坐标系中的向量如下图所示。需要注意的是，向量是表达大小和方向的量，并没有规定起点和终点，所以相同的向量可以画在任意位置，例如下图中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi mathvariant="bold-italic">w</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{\boldsymbol{w}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.399996em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.02778em;">w</span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi mathvariant="bold-italic">u</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{\boldsymbol{u}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.399996em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord"><span class="mord boldsymbol">u</span></span></span></span></span></span></span> 两个向量并没有什么区别。</p>
<img src="/images/vector_1.png" style="zoom:40%;">
<h3 id="矩阵对象"><a class="markdownIt-Anchor" href="#矩阵对象"></a> 矩阵对象</h3>
<p>NumPy 中提供了专门用于线性代数（<em>linear algebra</em>）的模块和表示矩阵的类型<code>matrix</code>，当然我们通过二维数组也可以表示一个矩阵，官方并不推荐使用<code>matrix</code>类而是建议使用二维数组，而且有可能在将来的版本中会移除<code>matrix</code>类。无论如何，利用这些已经封装好的类和函数，我们可以轻松愉快的实现很多对矩阵的操作。</p>
<p>我们可以通过下面的代码来创建矩阵（<code>matrix</code>）对象。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m1 = np.matrix(<span class="string">&#x27;1 2 3; 4 5 6&#x27;</span>)</span><br><span class="line">m1</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：<code>matrix</code>构造器可以传入类数组对象也可以传入字符串来构造矩阵对象。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">matrix([[1, 2, 3],</span><br><span class="line">        [4, 5, 6]])</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m2 = np.asmatrix(np.array([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>]]))</span><br><span class="line">m2</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：<code>asmatrix</code>函数也可以用<code>mat</code>函数代替，这两个函数其实是同一个函数。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">matrix([[1, 1],</span><br><span class="line">        [2, 2],</span><br><span class="line">        [3, 3]])</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m1 * m2</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">matrix([[14, 14],</span><br><span class="line">        [32, 32]])</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：注意<code>matrix</code>对象和<code>ndarray</code>对象乘法运算的差别，<code>matrix</code>对象的<code>*</code>运算是矩阵乘法运算。如果两个二维数组要做矩阵乘法运算，应该使用<code>@</code>运算符或<code>matmul</code>函数，而不是<code>*</code>运算符。</p>
</blockquote>
<p>矩阵对象的属性如下表所示。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>A</code></td>
<td>获取矩阵对象对应的<code>ndarray</code>对象</td>
</tr>
<tr>
<td><code>A1</code></td>
<td>获取矩阵对象对应的扁平化后的<code>ndarray</code>对象</td>
</tr>
<tr>
<td><code>I</code></td>
<td>可逆矩阵的逆矩阵</td>
</tr>
<tr>
<td><code>T</code></td>
<td>矩阵的转置</td>
</tr>
<tr>
<td><code>H</code></td>
<td>矩阵的共轭转置</td>
</tr>
<tr>
<td><code>shape</code></td>
<td>矩阵的形状</td>
</tr>
<tr>
<td><code>size</code></td>
<td>矩阵元素的个数</td>
</tr>
</tbody>
</table>
<p>矩阵对象的方法跟之前讲过的<code>ndarray</code>数组对象的方法基本差不多，此处不再进行赘述。</p>
<h3 id="线性代数模块"><a class="markdownIt-Anchor" href="#线性代数模块"></a> 线性代数模块</h3>
<p>NumPy 的<code>linalg</code>模块中有一组标准的矩阵分解运算以及诸如求逆和行列式之类的函数，它们跟 MATLAB 和 R 等语言所使用的是相同的行业标准线性代数库，下面的表格列出了<code>numpy</code>以及<code>linalg</code>模块中一些常用的线性代数相关函数。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>diag</code></td>
<td>以一维数组的形式返回方阵的对角线元素或将一维数组转换为方阵（非对角元素元素为0）</td>
</tr>
<tr>
<td><code>matmul</code></td>
<td>矩阵乘法运算</td>
</tr>
<tr>
<td><code>trace</code></td>
<td>计算对角线元素的和</td>
</tr>
<tr>
<td><code>norm</code></td>
<td>求矩阵或向量的范数</td>
</tr>
<tr>
<td><code>det</code></td>
<td>计算行列式的值</td>
</tr>
<tr>
<td><code>matrix_rank</code></td>
<td>计算矩阵的秩</td>
</tr>
<tr>
<td><code>eig</code></td>
<td>计算矩阵的特征值（<em>eigenvalue</em>）和特征向量（<em>eigenvector</em>）</td>
</tr>
<tr>
<td><code>inv</code></td>
<td>计算非奇异矩阵（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>n</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">n</span></span></span></span></span> 阶方阵）的逆矩阵</td>
</tr>
<tr>
<td><code>pinv</code></td>
<td>计算矩阵的摩尔-彭若斯（<em>Moore-Penrose</em>）广义逆</td>
</tr>
<tr>
<td><code>qr</code></td>
<td>QR分解（把矩阵分解成一个正交矩阵与一个上三角矩阵的积）</td>
</tr>
<tr>
<td><code>svd</code></td>
<td>计算奇异值分解（<em>singular value decomposition</em>）</td>
</tr>
<tr>
<td><code>solve</code></td>
<td>解线性方程组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi><mrow><mi mathvariant="bold-italic">A</mi><mi mathvariant="bold-italic">x</mi></mrow></mi><mo>=</mo><mi mathvariant="bold-italic">b</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{\boldsymbol{Ax}=\boldsymbol{b}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.624996em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord"><span class="mord boldsymbol">A</span><span class="mord boldsymbol">x</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">b</span></span></span></span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi mathvariant="bold-italic">A</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{\boldsymbol{A}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.617499em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord"><span class="mord boldsymbol">A</span></span></span></span></span></span></span> 是一个方阵</td>
</tr>
<tr>
<td><code>lstsq</code></td>
<td>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi><mrow><mi mathvariant="bold-italic">A</mi><mi mathvariant="bold-italic">x</mi></mrow></mi><mo>=</mo><mi mathvariant="bold-italic">b</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{\boldsymbol{Ax}=\boldsymbol{b}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.624996em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord"><span class="mord boldsymbol">A</span><span class="mord boldsymbol">x</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">b</span></span></span></span></span></span></span> 的最小二乘解</td>
</tr>
</tbody>
</table>
<p>下面我们简单尝试一下上面的函数，先试一试求逆矩阵。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m3 = np.array([[<span class="number">1.</span>, <span class="number">2.</span>], [<span class="number">3.</span>, <span class="number">4.</span>]])</span><br><span class="line">m4 = np.linalg.inv(m3)</span><br><span class="line">m4</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array([[-2. ,  1. ],</span><br><span class="line">       [ 1.5, -0.5]])</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.around(m3 @ m4)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：<code>around</code>函数对数组元素进行四舍五入操作，默认小数点后面的位数为0。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array([[1., 0.],</span><br><span class="line">       [0., 1.]])</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：矩阵和它的逆矩阵做矩阵乘法会得到单位矩阵。</p>
</blockquote>
<p>计算行列式的值。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m5 = np.array([[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>], [<span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>]])</span><br><span class="line">np.linalg.det(m5)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<p>计算矩阵的秩。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linalg.matrix_rank(m5)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<p>求解线性方程组。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><msub><mi>x</mi><mn>3</mn></msub><mo>=</mo><mn>8</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>7</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mn>2</mn><msub><mi>x</mi><mn>3</mn></msub><mo>=</mo><mn>23</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><msub><mi>x</mi><mn>3</mn></msub><mo>=</mo><mn>9</mn></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}
x_1 + 2x_2 + x_3 = 8 \\\\
3x_1 + 7x_2 + 2x_3 = 23 \\\\
2x_1 + 2x_2 + x_3 = 9
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.2000399999999996em;vertical-align:-3.3500199999999998em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85002em;"><span style="top:-0.6999900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-0.6949900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.9899900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.2849900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5799900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8749900000000006em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1699900000000008em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.475010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.770010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.80501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.10002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8500000000000005em;"><span style="top:-5.850000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">8</span></span></span><span style="top:-4.410000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-2.9700000000000006em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">7</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">3</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>对于上面的线性方程组，我们可以用矩阵的形式来表示它，如下所示。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="bold-italic">A</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo separator="true">,</mo><mspace width="1em"/><mi mathvariant="bold-italic">x</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>3</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo separator="true">,</mo><mspace width="1em"/><mi mathvariant="bold-italic">b</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>23</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\boldsymbol{A} = \begin{bmatrix}
1 &amp; 2 &amp; 1 \\\\
3 &amp; 7 &amp; 2 \\\\
2 &amp; 2 &amp; 1
\end{bmatrix}, \quad
\boldsymbol{x} = \begin{bmatrix}
x_1 \\\\
x_2 \\\\
x_3
\end{bmatrix}, \quad
\boldsymbol{b} = \begin{bmatrix}
8 \\\\
23 \\\\
9
\end{bmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">A</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.0100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span><span style="top:-0.6100000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-0.6100000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">x</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">b</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.00503em;vertical-align:-2.75004em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500000000000004em;"><span style="top:-5.410000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">3</span></span></span><span style="top:-1.8099999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.6099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2549900000000003em;"><span style="top:-1.0499800000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.1999800000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.79598em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.39198em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.9879800000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.0139700000000005em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.25499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75004em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi><mrow><mi mathvariant="bold-italic">A</mi><mi mathvariant="bold-italic">x</mi></mrow></mi><mo>=</mo><mi mathvariant="bold-italic">b</mi></mrow><annotation encoding="application/x-tex">\boldsymbol{Ax} = \boldsymbol{b}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">A</span><span class="mord boldsymbol">x</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">b</span></span></span></span></span></span></span></p>
<p>线性方程组有唯一解的条件：系数矩阵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi mathvariant="bold-italic">A</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{\boldsymbol{A}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.617499em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord"><span class="mord boldsymbol">A</span></span></span></span></span></span></span> 的秩等于增广矩阵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi><mrow><mi mathvariant="bold-italic">A</mi><mi mathvariant="bold-italic">b</mi></mrow></mi></mstyle></mrow><annotation encoding="application/x-tex">\small{\boldsymbol{Ab}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.624996em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord"><span class="mord boldsymbol">A</span><span class="mord boldsymbol">b</span></span></span></span></span></span></span> 的秩，而且跟未知数的个数相同。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line">b = np.array([<span class="number">8</span>, <span class="number">23</span>, <span class="number">9</span>]).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(np.linalg.matrix_rank(A))</span><br><span class="line"><span class="built_in">print</span>(np.linalg.matrix_rank(np.hstack((A, b))))</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：使用数组对象的<code>reshape</code>方法调形时，如果其中一个参数为-1，那么该维度有多少个元素是通过数组元素个数（<code>size</code>属性）和其他维度的元素个数自动计算出来的。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linalg.solve(A, b)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array([[1.],</span><br><span class="line">       [2.],</span><br><span class="line">       [3.]])</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：上面的结果表示，线性方程组的解为： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn><mo separator="true">,</mo><msub><mi>x</mi><mn>3</mn></msub><mo>=</mo><mn>3</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{x_1 = 1, x_2 = 2, x_3 = 3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7549920000000001em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2796266666666667em;"><span style="top:-2.45em;margin-left:0em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2796266666666667em;"><span style="top:-2.45em;margin-left:0em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2796266666666667em;"><span style="top:-2.45em;margin-left:0em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span></span></span></span></span> 。</p>
</blockquote>
<p>下面是另一种求解线性方程组的方法，大家可以停下来思考下为什么。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="bold-italic">x</mi><mo>=</mo><msup><mi mathvariant="bold-italic">A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>⋅</mo><mi mathvariant="bold-italic">b</mi></mrow><annotation encoding="application/x-tex">\boldsymbol{x} = \boldsymbol{A}^{-1} \cdot \boldsymbol{b}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">x</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.890118em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol">A</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.890118em;"><span style="top:-3.13901em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">b</span></span></span></span></span></span></span></p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linalg.inv(A) @ b</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array([[1.],</span><br><span class="line">       [2.],</span><br><span class="line">       [3.]])</span><br></pre></td></tr></table></figure>
<h3 id="多项式"><a class="markdownIt-Anchor" href="#多项式"></a> 多项式</h3>
<p>除了数组，NumPy 中还封装了用于<strong>多项式</strong>（<em>polynomial</em>）运算的数据类型。多项式是变量的整数次幂与系数的乘积之和，形如：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mi>x</mi><mi>n</mi></msup><mo>+</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><msup><mi>x</mi><mn>1</mn></msup><mo>+</mo><msub><mi>a</mi><mn>0</mn></msub><msup><mi>x</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">f(x)=a_nx^n + a_{n-1}x^{n-1} + \cdots + a_1x^{1} + a_0x^{0}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8643919999999999em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.072439em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0141079999999998em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0141079999999998em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>在 NumPy 1.4版本之前，我们可以用<code>poly1d</code>类型来表示多项式，目前它仍然可用，但是官方提供了新的模块<code>numpy.polynomial</code>，它除了支持基本的幂级数多项式外，还可以支持切比雪夫多项式、拉盖尔多项式等。</p>
<h4 id="创建多项式对象"><a class="markdownIt-Anchor" href="#创建多项式对象"></a> 创建多项式对象</h4>
<p>创建<code>poly1d</code>对象，例如： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>x</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{f(x)=3x^{2}+2x+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.938364em;vertical-align:-0.225em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7926266666666666em;"><span style="top:-2.963em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span></span> 。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1 = np.poly1d([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">p2 = np.poly1d([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(p1)</span><br><span class="line"><span class="built_in">print</span>(p2)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   2</span><br><span class="line">3 x + 2 x + 1</span><br><span class="line">   2</span><br><span class="line">1 x + 2 x + 3</span><br></pre></td></tr></table></figure>
<h4 id="多项式的操作"><a class="markdownIt-Anchor" href="#多项式的操作"></a> 多项式的操作</h4>
<p><strong>获取多项式的系数</strong></p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(p1.coefficients)</span><br><span class="line"><span class="built_in">print</span>(p2.coeffs)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[3 2 1]</span><br><span class="line">[1 2 3]</span><br></pre></td></tr></table></figure>
<p><strong>两个多项式的四则运算</strong></p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(p1 + p2)</span><br><span class="line"><span class="built_in">print</span>(p1 * p2)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   2</span><br><span class="line">4 x + 4 x + 4</span><br><span class="line">   4     3      2</span><br><span class="line">3 x + 8 x + 14 x + 8 x + 3</span><br></pre></td></tr></table></figure>
<p><strong>带入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>x</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">x</span></span></span></span></span> 求多项式的值</strong></p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(p1(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(p2(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">34</span><br><span class="line">18</span><br></pre></td></tr></table></figure>
<p><strong>多项式求导和不定积分</strong></p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(p1.deriv())</span><br><span class="line"><span class="built_in">print</span>(p1.integ())</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">6 x + 2</span><br><span class="line">   3     2</span><br><span class="line">1 x + 1 x + 1 x</span><br></pre></td></tr></table></figure>
<p><strong>求多项式的根</strong></p>
<p>例如有多项式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>2</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{f(x)=x^2+3x+2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.938364em;vertical-align:-0.225em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7926266666666666em;"><span style="top:-2.963em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span></span></span></span></span> ，多项式的根即一元二次方程 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>2</mn><mo>=</mo><mn>0</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{x^2+3x+2=0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.788361em;vertical-align:-0.07499700000000001em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7926266666666666em;"><span style="top:-2.963em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span></span> 的解。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p3 = np.poly1d([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(p3.roots)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[-2. -1.]</span><br></pre></td></tr></table></figure>
<p>如果使用<code>numpy.polynomial</code>模块的<code>Polynomial</code>类来表示多项式对象，那么对应的操作如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy.polynomial <span class="keyword">import</span> Polynomial</span><br><span class="line"></span><br><span class="line">p3 = Polynomial((<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(p3)           <span class="comment"># 输出多项式</span></span><br><span class="line"><span class="built_in">print</span>(p3(<span class="number">3</span>))        <span class="comment"># 令x=3，计算多项式的值</span></span><br><span class="line"><span class="built_in">print</span>(p3.roots())   <span class="comment"># 计算多项式的根</span></span><br><span class="line"><span class="built_in">print</span>(p3.degree())  <span class="comment"># 获得多项式的次数</span></span><br><span class="line"><span class="built_in">print</span>(p3.deriv())   <span class="comment"># 求导</span></span><br><span class="line"><span class="built_in">print</span>(p3.integ())   <span class="comment"># 求不定积分</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.0 + 3.0·x + 1.0·x²</span><br><span class="line">20.0</span><br><span class="line">[-2. -1.]</span><br><span class="line">2</span><br><span class="line">3.0 + 2.0·x</span><br><span class="line">0.0 + 2.0·x + 1.5·x² + 0.33333333·x³</span><br></pre></td></tr></table></figure>
<h3 id="最小二乘解"><a class="markdownIt-Anchor" href="#最小二乘解"></a> 最小二乘解</h3>
<p><code>Polynomial</code>类还有一个名为<code>fit</code>的类方法，它可以给多项式求最小二乘解。所谓最小二乘解（least-squares solution），是用最小二乘法通过最小化误差的平方和来寻找数据的最佳匹配函数的系数。假设多项式为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{f(x)=ax+b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9em;vertical-align:-0.225em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span></span></span></span></span> ，最小二乘解就是让下面的残差平方和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>R</mi><mi>S</mi><mi>S</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{RSS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.614997em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></span> 达到最小的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>a</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.387504em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">a</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mi>b</mi></mstyle></mrow><annotation encoding="application/x-tex">\small{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.624996em;vertical-align:0em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">b</span></span></span></span></span>。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mi>S</mi><mi>S</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>k</mi></munderover><mrow><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>−</mo><msub><mi>y</mi><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mrow><annotation encoding="application/x-tex">RSS = \sum_{i=0}^{k}{(f(x_i) - y_i)^{2}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>例如，我们想利用收集到的月收入和网购支出的历史数据来建立一个预测模型，以达到通过某人的月收入预测他网购支出金额的目标，下面是我们收集到的收入和网购支出的数据，保存在两个数组中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([</span><br><span class="line">    <span class="number">25000</span>, <span class="number">15850</span>, <span class="number">15500</span>, <span class="number">20500</span>, <span class="number">22000</span>, <span class="number">20010</span>, <span class="number">26050</span>, <span class="number">12500</span>, <span class="number">18500</span>, <span class="number">27300</span>,</span><br><span class="line">    <span class="number">15000</span>,  <span class="number">8300</span>, <span class="number">23320</span>,  <span class="number">5250</span>,  <span class="number">5800</span>,  <span class="number">9100</span>,  <span class="number">4800</span>, <span class="number">16000</span>, <span class="number">28500</span>, <span class="number">32000</span>,</span><br><span class="line">    <span class="number">31300</span>, <span class="number">10800</span>,  <span class="number">6750</span>,  <span class="number">6020</span>, <span class="number">13300</span>, <span class="number">30020</span>,  <span class="number">3200</span>, <span class="number">17300</span>,  <span class="number">8835</span>,  <span class="number">3500</span></span><br><span class="line">])</span><br><span class="line">y = np.array([</span><br><span class="line">    <span class="number">2599</span>, <span class="number">1400</span>, <span class="number">1120</span>, <span class="number">2560</span>, <span class="number">1900</span>, <span class="number">1200</span>, <span class="number">2320</span>,  <span class="number">800</span>, <span class="number">1650</span>, <span class="number">2200</span>,</span><br><span class="line">     <span class="number">980</span>,  <span class="number">580</span>, <span class="number">1885</span>,  <span class="number">600</span>,  <span class="number">400</span>,  <span class="number">800</span>,  <span class="number">420</span>, <span class="number">1380</span>, <span class="number">1980</span>, <span class="number">3999</span>,</span><br><span class="line">    <span class="number">3800</span>,  <span class="number">725</span>,  <span class="number">520</span>,  <span class="number">420</span>, <span class="number">1200</span>, <span class="number">4020</span>,  <span class="number">350</span>, <span class="number">1500</span>,  <span class="number">560</span>,  <span class="number">500</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>我们可以先绘制散点图来了解两组数据是否具有正相关或负相关关系。正相关意味着数组<code>x</code>中较大的值对应到数组<code>y</code>中也是较大的值，而负相关则意味着数组<code>x</code>中较大的值对应到数组<code>y</code>中较小的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.figure(dpi=<span class="number">120</span>)</span><br><span class="line">plt.scatter(x, y, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<img src="/images/in_out_scatter_plot.png" style="zoom:50%;">
<p>如果需要定量的研究两组数据的相关性，我们可以计算协方差或相关系数，对应的 NumPy 函数分别是<code>cov</code>和<code>corrcoef</code>。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.corrcoef(x, y)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array([[1.        , 0.92275889],</span><br><span class="line">       [0.92275889, 1.        ]])</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：相关系数是一个<code>-1</code>到<code>1</code>之间的值，越靠近<code>1</code> 说明正相关性越强，越靠近<code>-1</code>说明负相关性越强，靠近<code>0</code>则说明两组数据没有明显的相关性。上面月收入和网购支出之间的相关系数是<code>0.92275889</code>，说明二者是强正相关关系。</p>
</blockquote>
<p>通过上面的操作，我们确定了收入和网购支出之前存在强正相关关系，于是我们用这些数据来创建一个回归模型，找出一条能够很好的拟合这些数据点的直线。这里，我们就可以用到上面提到的<code>fit</code>方法，具体的代码如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy.polynomial <span class="keyword">import</span> Polynomial</span><br><span class="line"></span><br><span class="line">Polynomial.fit(x, y, deg=<span class="number">1</span>).convert().coef</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：<code>deg=1</code>说明回归模型最高次项就是1次项，回归模型形如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>y</mi><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{y=ax+b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.799992em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span></span></span></span></span> ；如果要生一个类似于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>y</mi><mo>=</mo><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{y=ax^2+bx+c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.88836em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7926266666666666em;"><span style="top:-2.963em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span></span></span></span></span> 的模型，就需要设置<code>deg=2</code>，以此类推。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array([-2.94883437e+02,  1.10333716e-01])</span><br></pre></td></tr></table></figure>
<p>根据上面输出的结果，我们的回归方程应该是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>y</mi><mo>=</mo><mn>0.110333716</mn><mi>x</mi><mo>−</mo><mn>294.883437</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{y=0.110333716x-294.883437}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7549920000000001em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">3</span><span class="mord">3</span><span class="mord">3</span><span class="mord">7</span><span class="mord">1</span><span class="mord">6</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord">9</span><span class="mord">4</span><span class="mord">.</span><span class="mord">8</span><span class="mord">8</span><span class="mord">3</span><span class="mord">4</span><span class="mord">3</span><span class="mord">7</span></span></span></span></span> 。我们将这个回归方程绘制到刚才的散点图上，红色的点是我们的预测值，蓝色的点是历史数据，也就是真实值。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.scatter(x, <span class="number">0.110333716</span> * x - <span class="number">294.883437</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.plot(x, <span class="number">0.110333716</span> * x - <span class="number">294.883437</span>, color=<span class="string">&#x27;darkcyan&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<img src="/images/in_out_regression_result.png" style="zoom:50%;">
<p>如果不使用<code>Polynomial</code>类型的<code>fit</code>方法，我们也可以通过 NumPy 提供的<code>polyfit</code>函数来完成同样的操作，有兴趣的读者可以自行研究。</p>
<blockquote>
<p><strong>说明</strong>：本章部分图片来自于维基百科。</p>
</blockquote>
<h2 id="pandas"><a class="markdownIt-Anchor" href="#pandas"></a> Pandas</h2>
<p>Pandas 是 Wes McKinney 在2008年开发的一个强大的<strong>分析结构化数据</strong>的工具集。Pandas 以 NumPy 为基础（实现数据存储和运算），提供了专门用于数据分析的类型、方法和函数，对数据分析和数据挖掘提供了很好的支持；同时 pandas 还可以跟数据可视化工具 matplotlib 很好的整合在一起，非常轻松愉快的实现数据可视化呈现。</p>
<p>Pandas 核心的数据类型是<code>Series</code>（数据系列）、<code>DataFrame</code>（数据窗/数据框），分别用于处理一维和二维的数据，除此之外，还有一个名为<code>Index</code>的类型及其子类型，它们为<code>Series</code>和<code>DataFrame</code>提供了索引功能。日常工作中<code>DataFrame</code>使用得最为广泛，因为二维的数据结构刚好可以对应有行有列的表格。<code>Series</code>和<code>DataFrame</code>都提供了大量的处理数据的方法，数据分析师以此为基础，可以实现对数据的筛选、合并、拼接、清洗、预处理、聚合、透视和可视化等各种操作。</p>
<h3 id="创建series对象"><a class="markdownIt-Anchor" href="#创建series对象"></a> 创建Series对象</h3>
<p>Pandas 库中的<code>Series</code>对象可以用来表示一维数据结构，但是多了索引和一些额外的功能。<code>Series</code>类型的内部结构包含了两个数组，其中一个用来保存数据，另一个用来保存数据的索引。我们可以通过列表或数组创建<code>Series</code>对象，代码如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser1 = pd.Series(data=[<span class="number">120</span>, <span class="number">380</span>, <span class="number">250</span>, <span class="number">360</span>], index=[<span class="string">&#x27;一季度&#x27;</span>, <span class="string">&#x27;二季度&#x27;</span>, <span class="string">&#x27;三季度&#x27;</span>, <span class="string">&#x27;四季度&#x27;</span>])</span><br><span class="line">ser1</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：<code>Series</code>构造器中的<code>data</code>参数表示数据，<code>index</code>参数表示数据的索引，相当于数据对应的标签。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一季度    120</span><br><span class="line">二季度    380</span><br><span class="line">三季度    250</span><br><span class="line">四季度    360</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<p>通过字典创建Series对象。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser2 = pd.Series(&#123;<span class="string">&#x27;一季度&#x27;</span>: <span class="number">320</span>, <span class="string">&#x27;二季度&#x27;</span>: <span class="number">180</span>, <span class="string">&#x27;三季度&#x27;</span>: <span class="number">300</span>, <span class="string">&#x27;四季度&#x27;</span>: <span class="number">405</span>&#125;)</span><br><span class="line">ser2</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：通过字典创建<code>Series</code>对象时，字典的键就是数据的标签（索引），键对应的值就是数据。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一季度    320</span><br><span class="line">二季度    180</span><br><span class="line">三季度    300</span><br><span class="line">四季度    405</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<h3 id="series对象的运算"><a class="markdownIt-Anchor" href="#series对象的运算"></a> Series对象的运算</h3>
<h4 id="标量运算"><a class="markdownIt-Anchor" href="#标量运算"></a> 标量运算</h4>
<p>我们尝试给刚才的<code>ser1</code>每个季度加上<code>10</code>，代码如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser1 += <span class="number">10</span></span><br><span class="line">ser1</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一季度    130</span><br><span class="line">二季度    390</span><br><span class="line">三季度    260</span><br><span class="line">四季度    370</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<h4 id="矢量运算"><a class="markdownIt-Anchor" href="#矢量运算"></a> 矢量运算</h4>
<p>我们尝试把<code>ser1</code>和<code>ser2</code>对应季度的数据加起来，代码如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser1 + ser2</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一季度    450</span><br><span class="line">二季度    570</span><br><span class="line">三季度    560</span><br><span class="line">四季度    775</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<h4 id="索引运算"><a class="markdownIt-Anchor" href="#索引运算"></a> 索引运算</h4>
<h5 id="普通索引"><a class="markdownIt-Anchor" href="#普通索引"></a> 普通索引</h5>
<p>跟数组一样，<code>Series</code>对象也可以进行索引和切片操作，不同的是<code>Series</code>对象因为内部维护了一个保存索引的数组，所以除了可以使用整数索引检索数据外，还可以通过自己设置的索引（标签）获取对应的数据。</p>
<p>使用整数索引。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ser1[2] deprecated</span></span><br><span class="line">ser1.iloc[<span class="number">2</span>] <span class="comment"># better</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">260</span><br></pre></td></tr></table></figure>
<p>使用自定义索引。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser1[<span class="string">&#x27;三季度&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">260</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser1[<span class="string">&#x27;一季度&#x27;</span>] = <span class="number">380</span></span><br><span class="line">ser1</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一季度    380</span><br><span class="line">二季度    390</span><br><span class="line">三季度    260</span><br><span class="line">四季度    370</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<h5 id="切片索引-2"><a class="markdownIt-Anchor" href="#切片索引-2"></a> 切片索引</h5>
<p><code>Series</code>对象的切片操作跟列表、数组类似，通过给出起始和结束索引，从原来的<code>Series</code>对象中取出或修改部分数据，这里也可以使用整数索引和自定义的索引，代码如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser2[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二季度    180</span><br><span class="line">三季度    300</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser2[<span class="string">&#x27;二季度&#x27;</span>:<span class="string">&#x27;四季度&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二季度    180</span><br><span class="line">三季度    300</span><br><span class="line">四季度    405</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>提示</strong>：在使用自定义索引进行切片时，结束索引对应的元素也是可以取到的。</p>
</blockquote>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser2[<span class="number">1</span>:<span class="number">3</span>] = <span class="number">400</span>, <span class="number">500</span></span><br><span class="line">ser2</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一季度    320</span><br><span class="line">二季度    400</span><br><span class="line">三季度    500</span><br><span class="line">四季度    405</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<h5 id="花式索引-2"><a class="markdownIt-Anchor" href="#花式索引-2"></a> 花式索引</h5>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser2[[<span class="string">&#x27;二季度&#x27;</span>, <span class="string">&#x27;四季度&#x27;</span>]]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二季度    400</span><br><span class="line">四季度    405</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser2[[<span class="string">&#x27;二季度&#x27;</span>, <span class="string">&#x27;四季度&#x27;</span>]] = <span class="number">600</span>, <span class="number">520</span></span><br><span class="line">ser2</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一季度    320</span><br><span class="line">二季度    600</span><br><span class="line">三季度    500</span><br><span class="line">四季度    520</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<h5 id="布尔索引-2"><a class="markdownIt-Anchor" href="#布尔索引-2"></a> 布尔索引</h5>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser2[ser2 &gt;= <span class="number">500</span>]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二季度    600</span><br><span class="line">三季度    500</span><br><span class="line">四季度    520</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<h3 id="series对象的属性和方法"><a class="markdownIt-Anchor" href="#series对象的属性和方法"></a> Series对象的属性和方法</h3>
<p><code>Series</code>对象的属性和方法非常多，我们就捡着重要的跟大家讲吧。先看看下面的表格，它展示了<code>Series</code>对象常用的属性。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dtype</code> / <code>dtypes</code></td>
<td>返回<code>Series</code>对象的数据类型</td>
</tr>
<tr>
<td><code>hasnans</code></td>
<td>判断<code>Series</code>对象中有没有空值</td>
</tr>
<tr>
<td><code>at</code> / <code>iat</code></td>
<td>通过索引访问<code>Series</code>对象中的单个值</td>
</tr>
<tr>
<td><code>loc</code> / <code>iloc</code></td>
<td>通过索引访问<code>Series</code>对象中的单个值或一组值</td>
</tr>
<tr>
<td><code>index</code></td>
<td>返回<code>Series</code>对象的索引（<code>Index</code>对象）</td>
</tr>
<tr>
<td><code>is_monotonic</code></td>
<td>判断<code>Series</code>对象中的数据是否单调</td>
</tr>
<tr>
<td><code>is_monotonic_increasing</code></td>
<td>判断<code>Series</code>对象中的数据是否单调递增</td>
</tr>
<tr>
<td><code>is_monotonic_decreasing</code></td>
<td>判断<code>Series</code>对象中的数据是否单调递减</td>
</tr>
<tr>
<td><code>is_unique</code></td>
<td>判断<code>Series</code>对象中的数据是否独一无二</td>
</tr>
<tr>
<td><code>size</code></td>
<td>返回<code>Series</code>对象中元素的个数</td>
</tr>
<tr>
<td><code>values</code></td>
<td>以<code>ndarray</code>的方式返回<code>Series</code>对象中的值（<code>ndarray</code>对象）</td>
</tr>
</tbody>
</table>
<p>我们可以通过下面的代码来了解<code>Series</code>对象的属性。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(ser2.dtype)                    <span class="comment"># 数据类型</span></span><br><span class="line"><span class="built_in">print</span>(ser2.hasnans)                  <span class="comment"># 有没有空值</span></span><br><span class="line"><span class="built_in">print</span>(ser2.index)                    <span class="comment"># 索引</span></span><br><span class="line"><span class="built_in">print</span>(ser2.values)                   <span class="comment"># 值</span></span><br><span class="line"><span class="built_in">print</span>(ser2.is_monotonic_increasing)  <span class="comment"># 是否单调递增</span></span><br><span class="line"><span class="built_in">print</span>(ser2.is_unique)                <span class="comment"># 是否每个值都独一无二</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int64</span><br><span class="line">False</span><br><span class="line">Index([&#x27;一季度&#x27;, &#x27;二季度&#x27;, &#x27;三季度&#x27;, &#x27;四季度&#x27;], dtype=&#x27;object&#x27;)</span><br><span class="line">[320 600 500 520]</span><br><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p><code>Series</code>对象的方法很多，下面我们通过一些代码片段为大家介绍常用的方法。</p>
<h4 id="统计相关"><a class="markdownIt-Anchor" href="#统计相关"></a> 统计相关</h4>
<p><code>Series</code>对象支持各种获取描述性统计信息的方法。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(ser2.count())   <span class="comment"># 计数</span></span><br><span class="line"><span class="built_in">print</span>(ser2.<span class="built_in">sum</span>())     <span class="comment"># 求和</span></span><br><span class="line"><span class="built_in">print</span>(ser2.mean())    <span class="comment"># 求平均</span></span><br><span class="line"><span class="built_in">print</span>(ser2.median())  <span class="comment"># 找中位数</span></span><br><span class="line"><span class="built_in">print</span>(ser2.<span class="built_in">max</span>())     <span class="comment"># 找最大</span></span><br><span class="line"><span class="built_in">print</span>(ser2.<span class="built_in">min</span>())     <span class="comment"># 找最小</span></span><br><span class="line"><span class="built_in">print</span>(ser2.std())     <span class="comment"># 求标准差</span></span><br><span class="line"><span class="built_in">print</span>(ser2.var())     <span class="comment"># 求方差</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1940</span><br><span class="line">485.0</span><br><span class="line">510.0</span><br><span class="line">600</span><br><span class="line">320</span><br><span class="line">118.18065267490557</span><br><span class="line">13966.666666666666</span><br></pre></td></tr></table></figure>
<p><code>Series</code>对象还有一个名为<code>describe()</code>的方法，可以获得上述所有的描述性统计信息，如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser2.describe()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count      4.000000</span><br><span class="line">mean     485.000000</span><br><span class="line">std      118.180653</span><br><span class="line">min      320.000000</span><br><span class="line">25%      455.000000</span><br><span class="line">50%      510.000000</span><br><span class="line">75%      540.000000</span><br><span class="line">max      600.000000</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>提示</strong>：因为<code>describe()</code>返回的也是一个<code>Series</code>对象，所以也可以用<code>ser2.describe()['mean']</code>来获取平均值，用<code>ser2.describe()[['max', 'min']]</code>来获取最大值和最小值。</p>
</blockquote>
<p>如果<code>Series</code>对象有重复的值，我们可以使用<code>unique()</code>方法获得由独一无二的值构成的数组；可以使用<code>nunique()</code>方法统计不重复值的数量；如果想要统计每个值重复的次数，可以使用<code>value_counts()</code>方法，这个方法会返回一个<code>Series</code>对象，它的索引就是原来的<code>Series</code>对象中的值，而每个值出现的次数就是返回的<code>Series</code>对象中的数据，在默认情况下会按照出现次数做降序排列，如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser3 = pd.Series(data=[<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pitaya&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pitaya&#x27;</span>, <span class="string">&#x27;durian&#x27;</span>])</span><br><span class="line">ser3.value_counts()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apple     3</span><br><span class="line">pitaya    2</span><br><span class="line">durian    1</span><br><span class="line">banana    1</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser3.nunique()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<p>对于<code>ser3</code>，我们还可以用<code>mode()</code>方法来找出数据的众数，由于众数可能不唯一，所以<code>mode()</code>方法的返回值仍然是一个<code>Series</code>对象。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser3.mode()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0    apple</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure>
<h4 id="处理数据"><a class="markdownIt-Anchor" href="#处理数据"></a> 处理数据</h4>
<p><code>Series</code>对象的<code>isna()</code>和<code>isnull()</code>方法可以用于空值的判断，<code>notna()</code>和<code>notnull()</code>方法可以用于非空值的判断，代码如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser4 = pd.Series(data=[<span class="number">10</span>, <span class="number">20</span>, np.nan, <span class="number">30</span>, np.nan])</span><br><span class="line">ser4.isna()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：<code>np.nan</code>是一个IEEE 754标准的浮点小数，专门用来表示“不是一个数”，在上面的代码中我们用它来代表空值；当然，也可以用 Python 中的<code>None</code>来表示空值，在 pandas 中<code>None</code>也会被处理为<code>np.nan</code>。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0    False</span><br><span class="line">1    False</span><br><span class="line">2     True</span><br><span class="line">3    False</span><br><span class="line">4     True</span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser4.notna()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0     True</span><br><span class="line">1     True</span><br><span class="line">2    False</span><br><span class="line">3     True</span><br><span class="line">4    False</span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure>
<p><code>Series</code>对象的<code>dropna()</code>和<code>fillna()</code>方法分别用来删除空值和填充空值，具体的用法如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser4.dropna()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0    10.0</span><br><span class="line">1    20.0</span><br><span class="line">3    30.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser4.fillna(value=<span class="number">40</span>)  <span class="comment"># 将空值填充为40</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0    10.0</span><br><span class="line">1    20.0</span><br><span class="line">2    40.0</span><br><span class="line">3    30.0</span><br><span class="line">4    40.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser4.fillna(method=<span class="string">&#x27;ffill&#x27;</span>)  <span class="comment"># 用空值前面的非空值填充</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0    10.0</span><br><span class="line">1    20.0</span><br><span class="line">2    20.0</span><br><span class="line">3    30.0</span><br><span class="line">4    30.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>
<p>需要提醒大家注意的是，<code>dropna()</code>和<code>fillna()</code>方法都有一个名为<code>inplace</code>的参数，它的默认值是<code>False</code>，表示删除空值或填充空值不会修改原来的<code>Series</code>对象，而是返回一个新的<code>Series</code>对象。如果将<code>inplace</code>参数的值修改为<code>True</code>，那么删除或填充空值会就地操作，直接修改原来的<code>Series</code>对象，此时方法的返回值是<code>None</code>。后面我们会接触到的很多方法，包括<code>DataFrame</code>对象的很多方法都会有这个参数，它们的意义跟这里是一样的。</p>
<p><code>Series</code>对象的<code>mask()</code>和<code>where()</code>方法可以将满足或不满足条件的值进行替换，如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser5 = pd.Series(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">ser5.where(ser5 &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0    NaN</span><br><span class="line">1    1.0</span><br><span class="line">2    2.0</span><br><span class="line">3    3.0</span><br><span class="line">4    4.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser5.where(ser5 &gt; <span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0    10</span><br><span class="line">1    10</span><br><span class="line">2     2</span><br><span class="line">3     3</span><br><span class="line">4     4</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser5.mask(ser5 &gt; <span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0     0</span><br><span class="line">1     1</span><br><span class="line">2    10</span><br><span class="line">3    10</span><br><span class="line">4    10</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<p><code>Series</code>对象的<code>duplicated()</code>方法可以帮助我们找出重复的数据，而<code>drop_duplicates()</code>方法可以帮我们删除重复数据。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser3.duplicated()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0    False</span><br><span class="line">1    False</span><br><span class="line">2     True</span><br><span class="line">3    False</span><br><span class="line">4     True</span><br><span class="line">5     True</span><br><span class="line">6    False</span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser3.drop_duplicates()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0     apple</span><br><span class="line">1    banana</span><br><span class="line">3    pitaya</span><br><span class="line">6    durian</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure>
<p><code>Series</code>对象的<code>apply()</code>和<code>map()</code>方法非常重要，它们可以通过字典或者指定的函数来处理数据，把数据映射或转换成我们想要的样子。这两个方法在数据准备阶段非常重要，我们先来试一试这个名为<code>map</code>的方法。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser6 = pd.Series([<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, np.nan, <span class="string">&#x27;rabbit&#x27;</span>])</span><br><span class="line">ser6</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0       cat</span><br><span class="line">1       dog</span><br><span class="line">2       NaN</span><br><span class="line">3    rabbit</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser6.<span class="built_in">map</span>(&#123;<span class="string">&#x27;cat&#x27;</span>: <span class="string">&#x27;kitten&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>: <span class="string">&#x27;puppy&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：通过字典给出的映射规则对数据进行处理。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0    kitten</span><br><span class="line">1     puppy</span><br><span class="line">2       NaN</span><br><span class="line">3       NaN</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser6.<span class="built_in">map</span>(<span class="string">&#x27;I am a &#123;&#125;&#x27;</span>.<span class="built_in">format</span>, na_action=<span class="string">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：将指定字符串的<code>format</code>方法作用到数据系列的数据上，忽略掉所有的空值。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0       I am a cat</span><br><span class="line">1       I am a dog</span><br><span class="line">2              NaN</span><br><span class="line">3    I am a rabbit</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure>
<p>我们创建一个新的<code>Series</code>对象，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser7 = pd.Series([<span class="number">20</span>, <span class="number">21</span>, <span class="number">12</span>],  index=[<span class="string">&#x27;London&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;Helsinki&#x27;</span>])</span><br><span class="line">ser7</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">London      20</span><br><span class="line">New York    21</span><br><span class="line">Helsinki    12</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser7.apply(np.square)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：将求平方的函数作用到数据系列的数据上，也可以将参数<code>np.square</code>替换为<code>lambda x: x ** 2</code>。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">London      400</span><br><span class="line">New York    441</span><br><span class="line">Helsinki    144</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser7.apply(<span class="keyword">lambda</span> x, value: x - value, args=(<span class="number">5</span>, ))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：上面<code>apply</code>方法中的<code>lambda</code>函数有两个参数，第一个参数是数据系列中的数据，而第二个参数需要我们传入，所以我们给<code>apply</code>方法增加了<code>args</code>参数，用于给<code>lambda</code>函数的第二个参数传值。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">London      15</span><br><span class="line">New York    16</span><br><span class="line">Helsinki     7</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<h4 id="取头部值和排序"><a class="markdownIt-Anchor" href="#取头部值和排序"></a> 取头部值和排序</h4>
<p><code>Series</code>对象的<code>sort_index()</code>和<code>sort_values()</code>方法可以用于对索引和数据的排序，排序方法有一个名为<code>ascending</code>的布尔类型参数，该参数用于控制排序的结果是升序还是降序；而名为<code>kind</code>的参数则用来控制排序使用的算法，默认使用了<code>quicksort</code>，也可以选择<code>mergesort</code>或<code>heapsort</code>；如果存在空值，那么可以用<code>na_position</code>参数空值放在最前还是最后，默认是<code>last</code>，代码如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser8 = pd.Series(</span><br><span class="line">    data=[<span class="number">35</span>, <span class="number">96</span>, <span class="number">12</span>, <span class="number">57</span>, <span class="number">25</span>, <span class="number">89</span>], </span><br><span class="line">    index=[<span class="string">&#x27;grape&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;pitaya&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;peach&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line">)</span><br><span class="line">ser8.sort_values()  <span class="comment"># 按值从小到大排序</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pitaya    12</span><br><span class="line">peach     25</span><br><span class="line">grape     35</span><br><span class="line">apple     57</span><br><span class="line">orange    89</span><br><span class="line">banana    96</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser8.sort_index(ascending=<span class="literal">False</span>)  <span class="comment"># 按索引从大到小排序</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pitaya    12</span><br><span class="line">peach     25</span><br><span class="line">orange    89</span><br><span class="line">grape     35</span><br><span class="line">banana    96</span><br><span class="line">apple     57</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<p>如果要从<code>Series</code>对象中找出元素中最大或最小的“Top-N”，我们不需要对所有的值进行排序的，可以使用<code>nlargest()</code>和<code>nsmallest()</code>方法来完成，如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser8.nlargest(<span class="number">3</span>)  <span class="comment"># 值最大的3个</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">banana    96</span><br><span class="line">orange    89</span><br><span class="line">apple     57</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser8.nsmallest(<span class="number">2</span>)  <span class="comment"># 值最小的2个</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pitaya    12</span><br><span class="line">peach     25</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>
<h4 id="绘制图表"><a class="markdownIt-Anchor" href="#绘制图表"></a> 绘制图表</h4>
<p><code>Series</code>对象有一个名为<code>plot</code>的方法可以用来生成图表，如果选择生成折线图、饼图、柱状图等，默认会使用<code>Series</code>对象的索引作为横坐标，使用<code>Series</code>对象的数据作为纵坐标。下面我们创建一个<code>Series</code>对象并基于它绘制柱状图，代码如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">ser9 = pd.Series(&#123;<span class="string">&#x27;Q1&#x27;</span>: <span class="number">400</span>, <span class="string">&#x27;Q2&#x27;</span>: <span class="number">520</span>, <span class="string">&#x27;Q3&#x27;</span>: <span class="number">180</span>, <span class="string">&#x27;Q4&#x27;</span>: <span class="number">380</span>&#125;)</span><br><span class="line"><span class="comment"># 通过plot方法的kind指定图表类型为柱状图</span></span><br><span class="line">ser9.plot(kind=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"><span class="comment"># 定制纵轴的取值范围</span></span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">600</span>)</span><br><span class="line"><span class="comment"># 定制横轴刻度（旋转到0度）</span></span><br><span class="line">plt.xticks(rotation=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 为柱子增加数据标签</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ser9.size):</span><br><span class="line">    plt.text(i, ser9[i] + <span class="number">5</span>, ser9[i], ha=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<img src="/images/ser_bar_graph.png" style="zoom:35%;">
<p>我们也可以将其绘制为饼图，代码如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># plot方法的kind参数指定了图表类型为饼图</span></span><br><span class="line"><span class="comment"># autopct会自动计算并显示百分比</span></span><br><span class="line"><span class="comment"># pctdistance用来控制百分比到圆心的距离</span></span><br><span class="line">ser9.plot(kind=<span class="string">&#x27;pie&#x27;</span>, autopct=<span class="string">&#x27;%.1f%%&#x27;</span>, pctdistance=<span class="number">0.65</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<img src="/images/ser_pie_graph.png" style="zoom:35%;">
<h3 id="创建dataframe对象"><a class="markdownIt-Anchor" href="#创建dataframe对象"></a> 创建DataFrame对象</h3>
<p>如果使用 pandas 做数据分析，那么<code>DataFrame</code>一定是被使用得最多的类型，它可以用来保存和处理异质的二维数据。这里所谓的“异质”是指<code>DataFrame</code>中每个列的数据类型不需要相同，这也是它区别于 NumPy 二维数组的地方。<code>DataFrame</code>提供了极为丰富的属性和方法，帮助我们实现对数据的重塑、清洗、预处理、透视、呈现等一系列操作。</p>
<h4 id="通过二维数组创建dataframe对象"><a class="markdownIt-Anchor" href="#通过二维数组创建dataframe对象"></a> 通过二维数组创建DataFrame对象</h4>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = np.random.randint(<span class="number">60</span>, <span class="number">101</span>, (<span class="number">5</span>, <span class="number">3</span>))</span><br><span class="line">courses = [<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]</span><br><span class="line">stu_ids = np.arange(<span class="number">1001</span>, <span class="number">1006</span>)</span><br><span class="line">df1 = pd.DataFrame(data=scores, columns=courses, index=stu_ids)</span><br><span class="line">df1</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        语文  数学  英语</span><br><span class="line">1001    69    80    79</span><br><span class="line">1002    71    60    100</span><br><span class="line">1003    94    81    93</span><br><span class="line">1004    88    88    67</span><br><span class="line">1005    82    66    60</span><br></pre></td></tr></table></figure>
<h4 id="通过字典创建dataframe对象"><a class="markdownIt-Anchor" href="#通过字典创建dataframe对象"></a> 通过字典创建DataFrame对象</h4>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = &#123;</span><br><span class="line">    <span class="string">&#x27;语文&#x27;</span>: [<span class="number">62</span>, <span class="number">72</span>, <span class="number">93</span>, <span class="number">88</span>, <span class="number">93</span>],</span><br><span class="line">    <span class="string">&#x27;数学&#x27;</span>: [<span class="number">95</span>, <span class="number">65</span>, <span class="number">86</span>, <span class="number">66</span>, <span class="number">87</span>],</span><br><span class="line">    <span class="string">&#x27;英语&#x27;</span>: [<span class="number">66</span>, <span class="number">75</span>, <span class="number">82</span>, <span class="number">69</span>, <span class="number">82</span>],</span><br><span class="line">&#125;</span><br><span class="line">stu_ids = np.arange(<span class="number">1001</span>, <span class="number">1006</span>)</span><br><span class="line">df2 = pd.DataFrame(data=scores, index=stu_ids)</span><br><span class="line">df2</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        语文  数学  英语</span><br><span class="line">1001    62    95    66</span><br><span class="line">1002    72    65    75</span><br><span class="line">1003    93    86    82</span><br><span class="line">1004    88    66    69</span><br><span class="line">1005    93    87    82</span><br></pre></td></tr></table></figure>
<h4 id="读取csv文件创建dataframe对象"><a class="markdownIt-Anchor" href="#读取csv文件创建dataframe对象"></a> 读取CSV文件创建DataFrame对象</h4>
<p>可以通过<code>pandas</code> 模块的<code>read_csv</code>函数来读取 CSV 文件，<code>read_csv</code>函数的参数非常多，下面介绍几个比较重要的参数。</p>
<ul>
<li><code>sep</code> / <code>delimiter</code>：分隔符，默认是<code>,</code>。</li>
<li><code>header</code>：表头（列索引）的位置，默认值是<code>infer</code>，用第一行的内容作为表头（列索引）。</li>
<li><code>index_col</code>：用作行索引（标签）的列。</li>
<li><code>usecols</code>：需要加载的列，可以使用序号或者列名。</li>
<li><code>true_values</code> / <code>false_values</code>：哪些值被视为布尔值<code>True</code> / <code>False</code>。</li>
<li><code>skiprows</code>：通过行号、索引或函数指定需要跳过的行。</li>
<li><code>skipfooter</code>：要跳过的末尾行数。</li>
<li><code>nrows</code>：需要读取的行数。</li>
<li><code>na_values</code>：哪些值被视为空值。</li>
<li><code>iterator</code>：设置为<code>True</code>，函数返回迭代器对象。</li>
<li><code>chunksize</code>：配合上面的参数，设置每次迭代获取的数据体量。</li>
</ul>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3 = pd.read_csv(<span class="string">&#x27;data/2018年北京积分落户数据.csv&#x27;</span>, index_col=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">df3</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>提示</strong>：上面代码中的CSV文件是用相对路径进行获取的，也就是说当前工作路径下有名为<code>data</code>的文件夹，而“2018年北京积分落户数据.csv”就在这个文件夹下。如果使用Windows系统，在写路径分隔符时也建议使用<code>/</code>而不是<code>\</code>，如果想使用<code>\</code>，建议在字符串前面添加一个<code>r</code>，使用原始字符串来避开转义字符，例如<code>r'c:\new\data\2018年北京积分落户数据.csv'</code>。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      name   birthday      company          score</span><br><span class="line">id                                             </span><br><span class="line">1     杨xx   1972-12       北京利德华福xxxx  122.59</span><br><span class="line">2     纪xx   1974-12       北京航天数据xxxx  121.25</span><br><span class="line">3     王x    1974-05       品牌联盟(北京)xx  118.96</span><br><span class="line">4     杨x    1975-07       中科专利商标xxxx  118.21</span><br><span class="line">5     张xx   1974-11       北京阿里巴巴xxxx  117.79</span><br><span class="line">...   ...      ...                  ...     ...</span><br><span class="line">6015  孙xx   1978-08       华为海洋网络xxxx   90.75</span><br><span class="line">6016  刘xx   1976-11       福斯（上海）xxxx   90.75</span><br><span class="line">6017  周x    1977-10       赢创德固赛xxxxxx   90.75</span><br><span class="line">6018  赵x    1979-07       澳科利耳医疗xxxx   90.75</span><br><span class="line">6019  贺x    1981-06       北京宝洁技术xxxx   90.75</span><br><span class="line"></span><br><span class="line">[6019 rows x 4 columns]</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>： 上面输出的内容隐去了姓名（name）和公司名称（company）字段中的部分信息。如果需要上面例子中的 CSV 文件，可以通过百度云盘获取，链接：<a href="https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g">https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g</a>，提取码：e7b4。</p>
</blockquote>
<h4 id="读取excel工作表创建dataframe对象"><a class="markdownIt-Anchor" href="#读取excel工作表创建dataframe对象"></a> 读取Excel工作表创建DataFrame对象</h4>
<p>可以通过<code>pandas</code> 模块的<code>read_excel</code>函数来读取 Excel 文件，该函数与上面的<code>read_csv</code>非常类似，多了一个<code>sheet_name</code>参数来指定数据表的名称，但是不同于 CSV 文件，没有<code>sep</code>或<code>delimiter</code>这样的参数。假设有名为“2022年股票数据.xlsx”的 Excel 文件，里面有用股票代码命名的五个表单，分别是阿里巴巴（BABA）、百度（BIDU）、京东（JD）、亚马逊（AMZN）、甲骨文（ORCL）这五个公司2022年的股票数据，如果想加载亚马逊的股票数据，代码如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df4 = pd.read_excel(<span class="string">&#x27;data/2022年股票数据.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;AMZN&#x27;</span>, index_col=<span class="string">&#x27;Date&#x27;</span>)</span><br><span class="line">df4</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：上面例子中的 CSV 文件可以通过百度云盘获取，链接：<a href="https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g">https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g</a>，提取码：e7b4。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">               Open     High       Low    Close    Volume</span><br><span class="line">Date                                                     </span><br><span class="line">2022-12-30   83.120   84.050   82.4700   84.000  62401194</span><br><span class="line">2022-12-29   82.870   84.550   82.5500   84.180  54995895</span><br><span class="line">2022-12-28   82.800   83.480   81.6900   81.820  58228575</span><br><span class="line">2022-12-27   84.970   85.350   83.0000   83.040  57284035</span><br><span class="line">2022-12-23   83.250   85.780   82.9344   85.250  57433655</span><br><span class="line">...             ...      ...       ...      ...       ...</span><br><span class="line">2022-01-07  163.839  165.243  162.0310  162.554  46605900</span><br><span class="line">2022-01-06  163.450  164.800  161.9370  163.254  51957780</span><br><span class="line">2022-01-05  166.883  167.126  164.3570  164.357  64302720</span><br><span class="line">2022-01-04  170.438  171.400  166.3490  167.522  70725160</span><br><span class="line">2022-01-03  167.550  170.704  166.1600  170.404  63869140</span><br><span class="line"></span><br><span class="line">[251 rows x 5 columns]</span><br></pre></td></tr></table></figure>
<h4 id="读取关系数据库二维表创建dataframe对象"><a class="markdownIt-Anchor" href="#读取关系数据库二维表创建dataframe对象"></a> 读取关系数据库二维表创建DataFrame对象</h4>
<p><code>pandas</code>模块的<code>read_sql</code>函数可以通过 SQL 语句从数据库中读取数据创建<code>DataFrame</code>对象，该函数的第二个参数代表了需要连接的数据库。对于 MySQL 数据库，我们可以通过<code>pymysql</code>或<code>mysqlclient</code>来创建数据库连接（需要提前安装好三方库），得到一个<code>Connection</code> 对象，而这个对象就是<code>read_sql</code>函数需要的第二个参数，代码如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个MySQL数据库的连接对象</span></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=<span class="string">&#x27;101.42.16.8&#x27;</span>, port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">&#x27;guest&#x27;</span>, password=<span class="string">&#x27;Guest.618&#x27;</span>,</span><br><span class="line">    database=<span class="string">&#x27;hrs&#x27;</span>, charset=<span class="string">&#x27;utf8mb4&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 通过SQL从数据库二维表读取数据创建DataFrame</span></span><br><span class="line">df5 = pd.read_sql(<span class="string">&#x27;select * from tb_emp&#x27;</span>, conn, index_col=<span class="string">&#x27;eno&#x27;</span>)</span><br><span class="line">df5</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>提示</strong>：执行上面的代码需要先安装<code>pymysql</code>库，如果尚未安装，可以先在单元格中先执行魔法指令<code>%pip install pymysql</code>，然后再运行上面的代码。上面的代码连接的是我部署在腾讯云上的 MySQL 数据库，公网 IP 地址：<code>101.42.16.8</code>，用户名：<code>guest</code>，密码：<code>Guest.618</code>，数据库：<code>hrs</code>，字符集：<code>utf8mb4</code>，大家可以使用这个数据库，但是不要进行恶意的访问。<code>hrs</code>数据库一共有三张表，分别是：<code>tb_dept</code>（部门表）、<code>tb_emp</code>（员工表）、<code>tb_emp2</code>（员工表2）。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       ename   job     mgr     sal    comm    dno</span><br><span class="line">eno                                        </span><br><span class="line">1359   胡一刀   销售员  3344.0  1800   200.0   30</span><br><span class="line">2056    乔峰   分析师   7800.0  5000  1500.0   20</span><br><span class="line">3088   李莫愁   设计师  2056.0  3500   800.0   20</span><br><span class="line">3211   张无忌   程序员  2056.0  3200     NaN   20</span><br><span class="line">3233   丘处机   程序员  2056.0  3400     NaN   20</span><br><span class="line">3244   欧阳锋   程序员  3088.0  3200     NaN   20</span><br><span class="line">3251   张翠山   程序员  2056.0  4000     NaN   20</span><br><span class="line">3344    黄蓉  销售主管  7800.0  3000   800.0   30</span><br><span class="line">3577    杨过    会计    5566.0  2200     NaN   10</span><br><span class="line">3588   朱九真    会计   5566.0  2500     NaN   10</span><br><span class="line">4466   苗人凤   销售员  3344.0  2500     NaN   30</span><br><span class="line">5234    郭靖    出纳    5566.0  2000     NaN   10</span><br><span class="line">5566   宋远桥   会计师  7800.0  4000  1000.0   10</span><br><span class="line">7800   张三丰    总裁     NaN   9000  1200.0   20</span><br></pre></td></tr></table></figure>
<p>执行上面的代码会出现一个警告，因为 pandas 库希望我们使用<code>SQLAlchemy</code>三方库接入数据库，具体内容是：“UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.”。如果不想看到这个警告，我们可以试一试下面的解决方案。</p>
<p>首先，安装三方库<code>SQLAlchemy</code>，在 Jupyter 中可以使用<code>%pip</code>魔法指令。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%pip install sqlalchemy</span><br></pre></td></tr></table></figure>
<p>通过<code>SQLAlchemy</code>的<code>create_engine</code>函数创建<code>Engine</code>对象作为<code>read_sql</code>函数的第二个参数，此时<code>read_sql</code>函数的第一个参数可以是 SQL 语句，也可以是二维表的表名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过指定的URL（统一资源定位符）访问数据库</span></span><br><span class="line">engine = create_engine(<span class="string">&#x27;mysql+pymysql://guest:Guest.618@101.42.16.8:3306/hrs&#x27;</span>)</span><br><span class="line"><span class="comment"># 直接通过表名加载整张表的数据</span></span><br><span class="line">df5 = pd.read_sql(<span class="string">&#x27;tb_emp&#x27;</span>, engine, index_col=<span class="string">&#x27;eno&#x27;</span>)</span><br><span class="line">df5</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：如果通过表名加载二维表数据，也可以将上面的函数换成<code>read_sql_table</code>。</p>
</blockquote>
<p>我们再来加载部门表的数据创建<code>DataFrame</code>对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df6 = pd.read_sql(<span class="string">&#x27;select dno, dname, dloc from tb_dept&#x27;</span>, engine, index_col=<span class="string">&#x27;dno&#x27;</span>)</span><br><span class="line">df6</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：如果通过 SQL 查询获取数据，也可以将上面的函数换成<code>read_sql_query</code>。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      dname   dloc</span><br><span class="line">dno           </span><br><span class="line">10    会计部   北京</span><br><span class="line">20    研发部   成都</span><br><span class="line">30    销售部   重庆</span><br><span class="line">40    运维部   深圳</span><br></pre></td></tr></table></figure>
<p>在完成数据加载后，如果希望释放数据库连接，可以使用下面的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">engine.connect().close()</span><br></pre></td></tr></table></figure>
<h4 id="基本属性和方法"><a class="markdownIt-Anchor" href="#基本属性和方法"></a> 基本属性和方法</h4>
<p>在开始讲解<code>DataFrame</code>的属性和方法前，我们先从之前提到的<code>hrs</code>数据库中读取三张表的数据，创建出三个<code>DataFrame</code>对象，完整的代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&#x27;mysql+pymysql://guest:Guest.618@101.42.16.8:3306/hrs&#x27;</span>)</span><br><span class="line">dept_df = pd.read_sql_table(<span class="string">&#x27;tb_dept&#x27;</span>, engine, index_col=<span class="string">&#x27;dno&#x27;</span>)</span><br><span class="line">emp_df = pd.read_sql_table(<span class="string">&#x27;tb_emp&#x27;</span>, engine, index_col=<span class="string">&#x27;eno&#x27;</span>)</span><br><span class="line">emp2_df = pd.read_sql_table(<span class="string">&#x27;tb_emp2&#x27;</span>, engine, index_col=<span class="string">&#x27;eno&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>得到的三个<code>DataFrame</code>对象如下所示。</p>
<p>部门表（<code>dept_df</code>），其中<code>dno</code>是部门的编号，<code>dname</code>和<code>dloc</code>分别是部门的名称和所在地。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    dname  dloc</span><br><span class="line">dno</span><br><span class="line">10  会计部  北京</span><br><span class="line">20  研发部  成都</span><br><span class="line">30  销售部  重庆</span><br><span class="line">40  运维部  深圳</span><br></pre></td></tr></table></figure>
<p>员工表（<code>emp_df</code>），其中<code>eno</code>是员工编号，<code>ename</code>、<code>job</code>、<code>mgr</code>、<code>sal</code>、<code>comm</code>和<code>dno</code>分别代表员工的姓名、职位、主管编号、月薪、补贴和部门编号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        ename    job        mgr      sal     comm    dno</span><br><span class="line">eno</span><br><span class="line">1359    胡一刀    销售员      3344.0    1800    200.0    30</span><br><span class="line">2056    乔峰      分析师      7800.0    5000    1500.0   20</span><br><span class="line">3088    李莫愁    设计师      2056.0    3500    800.0    20</span><br><span class="line">3211    张无忌     程序员     2056.0    3200    NaN     20</span><br><span class="line">3233    丘处机     程序员     2056.0    3400    NaN     20</span><br><span class="line">3244    欧阳锋     程序员     3088.0    3200    NaN     20</span><br><span class="line">3251    张翠山     程序员     2056.0    4000    NaN     20</span><br><span class="line">3344    黄蓉      销售主管    7800.0    3000    800.0   30</span><br><span class="line">3577    杨过      会计       5566.0    2200     NaN     10</span><br><span class="line">3588    朱九真     会计       5566.0    2500    NaN     10</span><br><span class="line">4466    苗人凤     销售员     3344.0    2500    NaN     30</span><br><span class="line">5234    郭靖       出纳      5566.0    2000    NaN      10</span><br><span class="line">5566    宋远桥     会计师     7800.0    4000    1000.0   10</span><br><span class="line">7800    张三丰     总裁       NaN      9000    1200.0    20</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：在数据库中<code>mgr</code>和<code>comm</code>两个列的数据类型是<code>int</code>，但是因为有缺失值（空值），读取到<code>DataFrame</code>之后，列的数据类型变成了<code>float</code>，因为我们通常会用<code>float</code>类型的<code>NaN</code>来表示空值。</p>
</blockquote>
<p>员工表（<code>emp2_df</code>），跟上面的员工表结构相同，但是保存了不同的员工数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       ename    job      mgr      sal    comm    dno</span><br><span class="line">eno                                      </span><br><span class="line">9500   张三丰   总裁      NaN      50000  8000    20</span><br><span class="line">9600   王大锤   程序员    9800.0   8000   600     20</span><br><span class="line">9700   张三丰   总裁      NaN      60000  6000    20</span><br><span class="line">9800   骆昊     架构师    7800.0   30000  5000    20</span><br><span class="line">9900   陈小刀   分析师    9800.0   10000  1200    20</span><br></pre></td></tr></table></figure>
<p><code>DataFrame</code>对象的属性如下表所示。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>at</code> / <code>iat</code></td>
<td>通过标签获取<code>DataFrame</code>中的单个值。</td>
</tr>
<tr>
<td><code>columns</code></td>
<td><code>DataFrame</code>对象列的索引</td>
</tr>
<tr>
<td><code>dtypes</code></td>
<td><code>DataFrame</code>对象每一列的数据类型</td>
</tr>
<tr>
<td><code>empty</code></td>
<td><code>DataFrame</code>对象是否为空</td>
</tr>
<tr>
<td><code>loc</code> / <code>iloc</code></td>
<td>通过标签获取<code>DataFrame</code>中的一组值。</td>
</tr>
<tr>
<td><code>ndim</code></td>
<td><code>DataFrame</code>对象的维度</td>
</tr>
<tr>
<td><code>shape</code></td>
<td><code>DataFrame</code>对象的形状（行数和列数）</td>
</tr>
<tr>
<td><code>size</code></td>
<td><code>DataFrame</code>对象中元素的个数</td>
</tr>
<tr>
<td><code>values</code></td>
<td><code>DataFrame</code>对象的数据对应的二维数组</td>
</tr>
</tbody>
</table>
<p>关于<code>DataFrame</code>的方法，首先需要了解的是<code>info()</code>方法，它可以帮助我们了解<code>DataFrame</code>的相关信息，如下所示。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.info()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">Int64Index: 14 entries, 1359 to 7800</span><br><span class="line">Data columns (total 6 columns):</span><br><span class="line"> #   Column  Non-Null Count  Dtype  </span><br><span class="line">---  ------  --------------  -----  </span><br><span class="line"> 0   ename   14 non-null     object </span><br><span class="line"> 1   job     14 non-null     object </span><br><span class="line"> 2   mgr     13 non-null     float64</span><br><span class="line"> 3   sal     14 non-null     int64  </span><br><span class="line"> 4   comm    6 non-null      float64</span><br><span class="line"> 5   dno     14 non-null     int64  </span><br><span class="line">dtypes: float64(2), int64(2), object(2)</span><br><span class="line">memory usage: 1.3+ KB</span><br></pre></td></tr></table></figure>
<p>如果需要查看<code>DataFrame</code>的头部或尾部的数据，可以使用<code>head()</code>或<code>tail()</code>方法，这两个方法的默认参数是<code>5</code>，表示获取<code>DataFrame</code>最前面5行或最后面5行的数据，如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.head()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        ename    job    mgr    sal    comm  dno</span><br><span class="line">eno</span><br><span class="line">1359    胡一刀   销售员   3344   1800   200   30</span><br><span class="line">2056    乔峰     分析师   7800   5000   1500  20</span><br><span class="line">3088    李莫愁    设计师   2056   3500  800   20</span><br><span class="line">3211    张无忌    程序员   2056   3200  NaN   20</span><br><span class="line">3233    丘处机    程序员   2056   3400  NaN   20</span><br></pre></td></tr></table></figure>
<h4 id="操作数据"><a class="markdownIt-Anchor" href="#操作数据"></a> 操作数据</h4>
<h5 id="索引和切片"><a class="markdownIt-Anchor" href="#索引和切片"></a> 索引和切片</h5>
<p>如果要获取<code>DataFrame</code>的某一列，例如取出上面<code>emp_df</code>的<code>ename</code>列，可以使用下面的两种方式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.ename</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df[<span class="string">&#x27;ename&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>执行上面的代码可以发现，我们获得的是一个<code>Series</code>对象。事实上，<code>DataFrame</code>对象就是将多个<code>Series</code>对象组合到一起的结果。</p>
<p>如果要获取<code>DataFrame</code>的某一行，可以使用整数索引或我们设置的索引，例如取出员工编号为<code>2056</code>的员工数据，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.iloc[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.loc[<span class="number">2056</span>]</span><br></pre></td></tr></table></figure>
<p>通过执行上面的代码我们发现，单独取<code>DataFrame</code> 的某一行或某一列得到的都是<code>Series</code>对象。我们当然也可以通过花式索引来获取多个行或多个列的数据，花式索引的结果仍然是一个<code>DataFrame</code>对象。</p>
<p>获取多个列：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df[[<span class="string">&#x27;ename&#x27;</span>, <span class="string">&#x27;job&#x27;</span>]]</span><br></pre></td></tr></table></figure>
<p>获取多个行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.loc[[<span class="number">2056</span>, <span class="number">7800</span>, <span class="number">3344</span>]]</span><br></pre></td></tr></table></figure>
<p>如果要获取或修改<code>DataFrame</code> 对象某个单元格的数据，需要同时指定行和列的索引，例如要获取员工编号为<code>2056</code>的员工的职位信息，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df[<span class="string">&#x27;job&#x27;</span>][<span class="number">2056</span>]</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.loc[<span class="number">2056</span>][<span class="string">&#x27;job&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.loc[<span class="number">2056</span>, <span class="string">&#x27;job&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>我们推荐大家使用第三种做法，因为它只做了一次索引运算。如果要将该员工的职位修改为“架构师”，可以使用下面的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.loc[<span class="number">2056</span>, <span class="string">&#x27;job&#x27;</span>] = <span class="string">&#x27;架构师&#x27;</span></span><br></pre></td></tr></table></figure>
<p>当然，我们也可以通过切片操作来获取多行多列，相信大家一定已经想到了这一点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.loc[<span class="number">2056</span>:<span class="number">3344</span>]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        ename    job        mgr      sal     comm    dno</span><br><span class="line">eno</span><br><span class="line">2056    乔峰      分析师     7800.0    5000    1500.0   20</span><br><span class="line">3088    李莫愁    设计师     2056.0    3500    800.0    20</span><br><span class="line">3211    张无忌    程序员     2056.0    3200    NaN      20</span><br><span class="line">3233    丘处机    程序员     2056.0    3400    NaN      20</span><br><span class="line">3244    欧阳锋    程序员     3088.0    3200    NaN      20</span><br><span class="line">3251    张翠山    程序员     2056.0    4000    NaN      20</span><br><span class="line">3344    黄蓉     销售主管    7800.0    3000    800.0    30</span><br></pre></td></tr></table></figure>
<h5 id="数据筛选"><a class="markdownIt-Anchor" href="#数据筛选"></a> 数据筛选</h5>
<p>上面我们提到了花式索引，相信大家已经联想到了布尔索引。跟<code>ndarray</code>和<code>Series</code>一样，我们可以通过布尔索引对<code>DataFrame</code>对象进行数据筛选，例如我们要从<code>emp_df</code>中筛选出月薪超过<code>3500</code>的员工，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df[emp_df.sal &gt; <span class="number">3500</span>]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        ename    job        mgr      sal     comm    dno</span><br><span class="line">eno</span><br><span class="line">2056    乔峰      分析师      7800.0   5000    1500.0    20</span><br><span class="line">3251    张翠山    程序员      2056.0    4000    NaN      20</span><br><span class="line">5566    宋远桥    会计师      7800.0    4000    1000.0   10</span><br><span class="line">7800    张三丰    总裁        NaN      9000    1200.0    20</span><br></pre></td></tr></table></figure>
<p>当然，我们也可以组合多个条件来进行数据筛选，例如从<code>emp_df</code>中筛选出月薪超过<code>3500</code>且部门编号为<code>20</code>的员工，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df[(emp_df.sal &gt; <span class="number">3500</span>) &amp; (emp_df.dno == <span class="number">20</span>)]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        ename    job        mgr      sal     comm    dno</span><br><span class="line">eno</span><br><span class="line">2056    乔峰      分析师      7800.0   5000   1500.0    20</span><br><span class="line">3251    张翠山     程序员     2056.0   4000    NaN       20</span><br><span class="line">7800    张三丰     总裁       NaN      9000   1200.0    20</span><br></pre></td></tr></table></figure>
<p>除了使用布尔索引，<code>DataFrame</code>对象的<code>query</code>方法也可以实现数据筛选，<code>query</code>方法的参数是一个字符串，它代表了筛选数据使用的表达式，而且更符合 Python 程序员的使用习惯。下面我们使用<code>query</code>方法将上面的效果重新实现一遍，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.query(<span class="string">&#x27;sal &gt; 3500 and dno == 20&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="数据重塑"><a class="markdownIt-Anchor" href="#数据重塑"></a> 数据重塑</h3>
<p>有的时候，我们做数据分析需要的原始数据可能并不是来自一个地方，就像上一章的例子中，我们从关系型数据库中读取了三张表，得到了三个<code>DataFrame</code>对象，但实际工作可能需要我们把他们的数据整合到一起。例如：<code>emp_df</code>和<code>emp2_df</code>其实都是员工的数据，而且数据结构完全一致，我们可以使用<code>pandas</code>提供的<code>concat</code>函数实现两个或多个<code>DataFrame</code>的数据拼接，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">all_emp_df = pd.concat([emp_df, emp2_df])</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        ename    job        mgr      sal     comm    dno</span><br><span class="line">eno</span><br><span class="line">1359    胡一刀    销售员	   3344.0	1800	200.0	30</span><br><span class="line">2056    乔峰	    分析师	    7800.0	 5000	 1500.0	 20</span><br><span class="line">3088    李莫愁	   设计师	   2056.0	3500	800.0	20</span><br><span class="line">3211    张无忌	   程序员	   2056.0	3200	NaN     20</span><br><span class="line">3233    丘处机	   程序员	   2056.0	3400	NaN	    20</span><br><span class="line">3244    欧阳锋	   程序员	   3088.0	3200	NaN     20</span><br><span class="line">3251    张翠山	   程序员	   2056.0	4000	NaN	    20</span><br><span class="line">3344    黄蓉	    销售主管   7800.0	3000	800.0	30</span><br><span class="line">3577    杨过	    会计	     5566.0	  2200	  NaN	  10</span><br><span class="line">3588    朱九真	   会计	    5566.0	 2500	 NaN	 10</span><br><span class="line">4466    苗人凤	   销售员	   3344.0	2500	NaN	    30</span><br><span class="line">5234    郭靖	    出纳	     5566.0	  2000	  NaN	  10</span><br><span class="line">5566    宋远桥	   会计师	   7800.0	4000	1000.0	10</span><br><span class="line">7800    张三丰	   总裁	    NaN      9000	 1200.0	 20</span><br><span class="line">9500	张三丰	   总裁	    NaN	     50000	 8000.0	 20</span><br><span class="line">9600	王大锤    程序员	   9800.0	8000	600.0	20</span><br><span class="line">9700	张三丰	   总裁	    NaN	     60000	 6000.0	 20</span><br><span class="line">9800	骆昊	    架构师	    7800.0	 30000	 5000.0	 20</span><br><span class="line">9900	陈小刀	   分析师	   9800.0	10000	1200.0	20</span><br></pre></td></tr></table></figure>
<p>上面的代码将两个代表员工数据的<code>DataFrame</code>拼接到了一起，接下来我们使用<code>merge</code>函数将员工表和部门表的数据合并到一张表中，代码如下所示。</p>
<p>先使用<code>reset_index</code>方法重新设置<code>all_emp_df</code>的索引，这样<code>eno</code> 不再是索引而是一个普通列，<code>reset_index</code>方法的<code>inplace</code>参数设置为<code>True</code>表示，重置索引的操作直接在<code>all_emp_df</code>上执行，而不是返回修改后的新对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">all_emp_df.reset_index(inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>通过<code>merge</code>函数合并数据，当然，也可以调用<code>DataFrame</code>对象的<code>merge</code>方法来达到同样的效果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(all_emp_df, dept_df, how=<span class="string">&#x27;inner&#x27;</span>, on=<span class="string">&#x27;dno&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    eno	    ename	job	     mgr	 sal	 comm	 dno	dname	 dloc</span><br><span class="line">0	1359	胡一刀	 销售员	3344.0	1800	200.0	30	   销售部	 重庆</span><br><span class="line">1	3344	黄蓉	  销售主管	7800.0	3000	800.0	30	   销售部	 重庆</span><br><span class="line">2	4466	苗人凤	 销售员	3344.0	2500	NaN	    30	   销售部	 重庆</span><br><span class="line">3	2056	乔峰	  分析师	 7800.0	 5000	 1500.0	 20	    研发部	  成都</span><br><span class="line">4	3088	李莫愁	 设计师	2056.0	3500	800.0	20	   研发部	 成都</span><br><span class="line">5	3211	张无忌  程序员	2056.0	3200	NaN	    20	   研发部	 成都</span><br><span class="line">6	3233	丘处机	 程序员	2056.0	3400	NaN	    20	   研发部	 成都</span><br><span class="line">7	3244	欧阳锋	 程序员	3088.0	3200	NaN	    20	   研发部	 成都</span><br><span class="line">8	3251	张翠山	 程序员	2056.0	4000	NaN	    20	   研发部	 成都</span><br><span class="line">9	7800	张三丰	 总裁	     NaN	 9000	 1200.0	 20	    研发部	  成都</span><br><span class="line">10	9500	张三丰	 总裁	     NaN	 50000	 8000.0	 20	    研发部	  成都</span><br><span class="line">11	9600	王大锤	 程序员	9800.0	8000	600.0	20	   研发部	 成都</span><br><span class="line">12	9700	张三丰	 总裁	     NaN	 60000	 6000.0	 20	    研发部	  成都</span><br><span class="line">13	9800	骆昊	  架构师	 7800.0	 30000	 5000.0	 20	    研发部	  成都</span><br><span class="line">14	9900	陈小刀	 分析师	9800.0	10000	1200.0	20	   研发部	 成都</span><br><span class="line">15	3577	杨过	  会计	  5566.0  2200	  NaN	  10	会计部	  北京</span><br><span class="line">16	3588	朱九真	 会计	     5566.0	 2500	 NaN	 10	   会计部	 北京</span><br><span class="line">17	5234	郭靖	  出纳	  5566.0  2000	  NaN	  10	会计部	  北京</span><br><span class="line">18	5566	宋远桥	 会计师	7800.0	4000	1000.0	10	  会计部	北京</span><br></pre></td></tr></table></figure>
<p><code>merge</code>函数的一个参数代表合并的左表、第二个参数代表合并的右表，有SQL编程经验的同学对这两个词是不是感觉到非常亲切。正如大家猜想的那样，<code>DataFrame</code>对象的合并跟数据库中的表连接非常类似，所以上面代码中的<code>how</code>代表了合并两张表的方式，有<code>left</code>、<code>right</code>、<code>inner</code>、<code>outer</code>四个选项；而<code>on</code>则代表了基于哪个列实现表的合并，相当于 SQL 表连接中的连表条件，如果左右两表对应的列列名不同，可以用<code>left_on</code>和<code>right_on</code>参数取代<code>on</code>参数分别进行指定。</p>
<p>如果对上面的代码稍作修改，将<code>how</code>参数修改为<code>'right'</code>，大家可以思考一下代码执行的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(all_emp_df, dept_df, how=<span class="string">&#x27;right&#x27;</span>, on=<span class="string">&#x27;dno&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>运行结果比之前的输出多出了如下所示的一行，这是因为<code>how='right'</code>代表右外连接，也就意味着右表<code>dept_df</code>中的数据会被完整的查出来，但是在<code>all_emp_df</code>中又没有编号为<code>40</code> 部门的员工，所以对应的位置都被填入了空值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">19	NaN    NaN    NaN    NaN    NaN     NaN    40    运维部    深圳</span><br></pre></td></tr></table></figure>
<h3 id="数据清洗"><a class="markdownIt-Anchor" href="#数据清洗"></a> 数据清洗</h3>
<p>通常，我们从 Excel、CSV 或数据库中获取到的数据并不是非常完美的，里面可能因为系统或人为的原因混入了重复值或异常值，也可能在某些字段上存在缺失值；再者，<code>DataFrame</code>中的数据也可能存在格式不统一、量纲不统一等各种问题。因此，在开始数据分析之前，对数据进行清洗就显得特别重要。</p>
<h4 id="缺失值"><a class="markdownIt-Anchor" href="#缺失值"></a> 缺失值</h4>
<p>可以使用<code>DataFrame</code>对象的<code>isnull</code>或<code>isna</code>方法来找出数据表中的缺失值，如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.isnull()</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.isna()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        ename   job	    mgr     sal     comm    dno</span><br><span class="line">eno						</span><br><span class="line">1359	False	False	False	False	False	False</span><br><span class="line">2056	False	False	False	False	False	False</span><br><span class="line">3088	False	False	False	False	False	False</span><br><span class="line">3211	False	False	False	False	True	False</span><br><span class="line">3233	False	False	False	False	True	False</span><br><span class="line">3244	False	False	False	False	True	False</span><br><span class="line">3251	False	False	False	False	True	False</span><br><span class="line">3344	False	False	False	False	False	False</span><br><span class="line">3577	False	False	False	False	True	False</span><br><span class="line">3588	False	False	False	False	True	False</span><br><span class="line">4466	False	False	False	False	True	False</span><br><span class="line">5234	False	False	False	False	True	False</span><br><span class="line">5566	False	False	False	False	False	False</span><br><span class="line">7800	False	False	True	False	False	False</span><br></pre></td></tr></table></figure>
<p>相对应的，<code>notnull</code>和<code>notna</code>方法可以将非空的值标记为<code>True</code>。如果想删除这些缺失值，可以使用<code>DataFrame</code>对象的<code>dropna</code>方法，该方法的<code>axis</code>参数可以指定沿着0轴还是1轴删除，也就是说当遇到空值时，是删除整行还是删除整列，默认是沿0轴进行删除的，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.dropna()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        ename   job      mgr	 sal    comm     dno</span><br><span class="line">eno						</span><br><span class="line">1359	胡一刀  销售员	3344.0	1800   200.0	30</span><br><span class="line">2056	乔峰    架构师	 7800.0	 5000	1500.0	 20</span><br><span class="line">3088	李莫愁  设计师	2056.0	3500   800.0	20</span><br><span class="line">3344	黄蓉    销售主管	7800.0	3000   800.0	30</span><br><span class="line">5566	宋远桥  会计师	7800.0	4000   1000.0	10</span><br></pre></td></tr></table></figure>
<p>如果要沿着1轴进行删除，可以使用下面的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.dropna(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        ename    job      sal    dno</span><br><span class="line">eno				</span><br><span class="line">1359	胡一刀   销售员    1800	30</span><br><span class="line">2056	乔峰     架构师	  5000	 20</span><br><span class="line">3088	李莫愁   设计师    3500	20</span><br><span class="line">3211	张无忌   程序员    3200	20</span><br><span class="line">3233	丘处机   程序员    3400	20</span><br><span class="line">3244	欧阳锋   程序员    3200	20</span><br><span class="line">3251	张翠山   程序员    4000	20</span><br><span class="line">3344	黄蓉     销售主管  3000	30</span><br><span class="line">3577	杨过     会计	   2200	  10</span><br><span class="line">3588	朱九真   会计	  2500	 10</span><br><span class="line">4466	苗人凤   销售员	 2500   30</span><br><span class="line">5234	郭靖     出纳      2000   10</span><br><span class="line">5566	宋远桥   会计师    4000   10</span><br><span class="line">7800	张三丰   总裁      9000   20</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：<code>DataFrame</code>对象的很多方法都有一个名为<code>inplace</code>的参数，该参数的默认值为<code>False</code>，表示我们的操作不会修改原来的<code>DataFrame</code>对象，而是将处理后的结果通过一个新的<code>DataFrame</code>对象返回。如果将该参数的值设置为<code>True</code>，那么我们的操作就会在原来的<code>DataFrame</code>上面直接修改，方法的返回值为<code>None</code>。简单的说，上面的操作并没有修改<code>emp_df</code>，而是返回了一个新的<code>DataFrame</code>对象。</p>
</blockquote>
<p>在某些特定的场景下，我们可以对空值进行填充，对应的方法是<code>fillna</code>，填充空值时可以使用指定的值（通过<code>value</code>参数进行指定），也可以用表格中前一个单元格（通过设置参数<code>method=ffill</code>）或后一个单元格（通过设置参数<code>method=bfill</code>）的值进行填充，当代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.fillna(value=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：填充的值如何选择也是一个值得探讨的话题，实际工作中，可能会使用某种统计量（如：均值、众数等）进行填充，或者使用某种插值法（如：随机插值法、拉格朗日插值法等）进行填充，甚至有可能通过回归模型、贝叶斯模型等对缺失数据进行填充。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        ename    job        mgr      sal     comm    dno</span><br><span class="line">eno</span><br><span class="line">1359	胡一刀    销售员	   3344.0	1800	200.0	30</span><br><span class="line">2056	乔峰	    分析师	    7800.0	 5000	 1500.0	 20</span><br><span class="line">3088	李莫愁	   设计师	   2056.0	3500	800.0	20</span><br><span class="line">3211	张无忌	   程序员	   2056.0	3200	0.0     20</span><br><span class="line">3233	丘处机	   程序员	   2056.0	3400	0.0	    20</span><br><span class="line">3244	欧阳锋	   程序员	   3088.0	3200	0.0     20</span><br><span class="line">3251	张翠山	   程序员	   2056.0	4000	0.0	    20</span><br><span class="line">3344	黄蓉	    销售主管   7800.0	3000	800.0	30</span><br><span class="line">3577	杨过	    会计	     5566.0	  2200	  0.0	  10</span><br><span class="line">3588	朱九真	   会计	    5566.0	 2500	 0.0	 10</span><br><span class="line">4466	苗人凤	   销售员	   3344.0	2500	0.0	    30</span><br><span class="line">5234	郭靖	    出纳	     5566.0	  2000	  0.0	  10</span><br><span class="line">5566	宋远桥	   会计师	   7800.0	4000	1000.0	10</span><br><span class="line">7800	张三丰	   总裁	    0.0      9000	 1200.0	 20</span><br></pre></td></tr></table></figure>
<h4 id="重复值"><a class="markdownIt-Anchor" href="#重复值"></a> 重复值</h4>
<p>接下来，我们先给之前的部门表添加两行数据，让部门表中名为“研发部”和“销售部”的部门各有两个。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dept_df.loc[<span class="number">50</span>] = &#123;<span class="string">&#x27;dname&#x27;</span>: <span class="string">&#x27;研发部&#x27;</span>, <span class="string">&#x27;dloc&#x27;</span>: <span class="string">&#x27;上海&#x27;</span>&#125;</span><br><span class="line">dept_df.loc[<span class="number">60</span>] = &#123;<span class="string">&#x27;dname&#x27;</span>: <span class="string">&#x27;销售部&#x27;</span>, <span class="string">&#x27;dloc&#x27;</span>: <span class="string">&#x27;长沙&#x27;</span>&#125;</span><br><span class="line">dept_df</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    dname  dloc</span><br><span class="line">dno		</span><br><span class="line">10	会计部	北京</span><br><span class="line">20	研发部	成都</span><br><span class="line">30	销售部	重庆</span><br><span class="line">40	运维部	天津</span><br><span class="line">50	研发部	上海</span><br><span class="line">60	销售部	长沙</span><br></pre></td></tr></table></figure>
<p>现在，我们的数据表中有重复数据了，我们可以通过<code>DataFrame</code>对象的<code>duplicated</code>方法判断是否存在重复值，该方法在不指定参数时默认判断行索引是否重复，我们也可以指定根据部门名称<code>dname</code>判断部门是否重复，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dept_df.duplicated(<span class="string">&#x27;dname&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dno</span><br><span class="line">10    False</span><br><span class="line">20    False</span><br><span class="line">30    False</span><br><span class="line">40    False</span><br><span class="line">50     True</span><br><span class="line">60     True</span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure>
<p>从上面的输出可以看到，<code>50</code>和<code>60</code>两个部门从部门名称上来看是重复的，如果要删除重复值，可以使用<code>drop_duplicates</code>方法，该方法的<code>keep</code>参数可以控制在遇到重复值时，保留第一项还是保留最后一项，或者多个重复项一个都不用保留，全部删除掉。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dept_df.drop_duplicates(<span class="string">&#x27;dname&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	dname	dloc</span><br><span class="line">dno		</span><br><span class="line">10	会计部	北京</span><br><span class="line">20	研发部	成都</span><br><span class="line">30	销售部	重庆</span><br><span class="line">40	运维部	天津</span><br></pre></td></tr></table></figure>
<p>将<code>keep</code>参数的值修改为<code>last</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dept_df.drop_duplicates(<span class="string">&#x27;dname&#x27;</span>, keep=<span class="string">&#x27;last&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	dname	dloc</span><br><span class="line">dno		</span><br><span class="line">10	会计部	北京</span><br><span class="line">40	运维部	天津</span><br><span class="line">50	研发部	上海</span><br><span class="line">60	销售部	长沙</span><br></pre></td></tr></table></figure>
<p>使用同样的方式，我们也可以清除<code>all_emp_df</code>中的重复数据，例如我们认定“ename”和“job”两个字段完全相同的就是重复数据，我们可以用下面的代码去除重复数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">all_emp_df.drop_duplicates([<span class="string">&#x27;ename&#x27;</span>, <span class="string">&#x27;job&#x27;</span>], inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：上面的<code>drop_duplicates</code>方法添加了参数<code>inplace=True</code>，该方法不会返回新的<code>DataFrame</code>对象，而是在原来的<code>DataFrame</code>对象上直接删除，大家可以查看<code>all_emp_df</code>看看是不是已经移除了重复的员工数据。</p>
</blockquote>
<h4 id="异常值"><a class="markdownIt-Anchor" href="#异常值"></a> 异常值</h4>
<p>异常值在统计学上的全称是疑似异常值，也称作离群点（outlier），异常值的分析也称作离群点分析。异常值是指样本中出现的“极端值”，数据值看起来异常大或异常小，其分布明显偏离其余的观测值。实际工作中，有些异常值可能是由系统或人为原因造成的，但有些异常值却不是，它们能够重复且稳定的出现，属于正常的极端值，例如很多游戏产品中头部玩家的数据往往都是离群的极端值。所以，我们既不能忽视异常值的存在，也不能简单地把异常值从数据分析中剔除。重视异常值的出现，分析其产生的原因，常常成为发现问题进而改进决策的契机。</p>
<p>异常值的检测有Z-score 方法、IQR 方法、DBScan 聚类、孤立森林等，这里我们对前两种方法做一个简单的介绍。</p>
<img src="/images/3sigma.png" style="zoom:100%;">
<p>如果数据服从正态分布，依据3σ法则，异常值被定义与平均值的偏差超过三倍标准差的值。在正态分布下，距离平均值3σ之外的值出现的概率为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>P</mi><mo stretchy="false">(</mo><mo stretchy="false">∣</mo><mi>x</mi><mo>−</mo><mi>μ</mi><mo stretchy="false">∣</mo><mo>&gt;</mo><mn>3</mn><mi>σ</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mn>0.003</mn></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{P(\lvert x - \mu \rvert \gt 3 \sigma) &lt; 0.003}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9em;vertical-align:-0.225em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mopen">∣</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">μ</span><span class="mclose">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord">0</span><span class="mord">3</span></span></span></span></span> ，属于小概率事件。如果数据不服从正态分布，那么可以用远离均值的多少倍的标准差来描述，这里的倍数就是Z-score。Z-score以标准差为单位去度量某一原始分数偏离平均值的距离，公式如下所示。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>z</mi><mo>=</mo><mfrac><mrow><mi>X</mi><mo>−</mo><mi>μ</mi></mrow><mi>σ</mi></mfrac></mrow><annotation encoding="application/x-tex">z = \frac {X - \mu} {\sigma}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.0463299999999998em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603299999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">μ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">∣</mo><mi>z</mi><mo stretchy="false">∣</mo><mo>&gt;</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\lvert z \rvert &gt; 3
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">∣</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span></span></p>
<p>Z-score需要根据经验和实际情况来决定，通常把远离标准差 3 倍距离以上的数据点视为离群点，下面的代给出了如何通过Z-score方法检测异常值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">detect_outliers_zscore</span>(<span class="params">data, threshold=<span class="number">3</span></span>):</span><br><span class="line">    avg_value = np.mean(data)</span><br><span class="line">    std_value = np.std(data)</span><br><span class="line">    z_score = np.<span class="built_in">abs</span>((data - avg_value) / std_value)</span><br><span class="line">    <span class="keyword">return</span> data[z_score &gt; threshold]</span><br></pre></td></tr></table></figure>
<p>IQR 方法中的 IQR（Inter-Quartile Range）代表四分位距离，即上四分位数（Q3）和下四分位数（Q1）的差值。通常情况下，可以认为小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>Q</mi><mn>1</mn><mo>−</mo><mn>1.5</mn><mo>×</mo><mi>I</mi><mi>Q</mi><mi>R</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{Q1 - 1.5 \times IQR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7899930000000001em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">Q</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">Q</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></span> 或大于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><mrow><mi>Q</mi><mn>3</mn><mo>+</mo><mn>1.5</mn><mo>×</mo><mi>I</mi><mi>Q</mi><mi>R</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\small{Q3 + 1.5 \times IQR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7899930000000001em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord mathnormal">Q</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">Q</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></span> 的就是异常值，而这种检测异常值的方法也是箱线图（后面会讲到）默认使用的方法。下面的代码给出了如何通过 IQR 方法检测异常值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">detect_outliers_iqr</span>(<span class="params">data, whis=<span class="number">1.5</span></span>):</span><br><span class="line">    q1, q3 = np.quantile(data, [<span class="number">0.25</span>, <span class="number">0.75</span>])</span><br><span class="line">    iqr = q3 - q1</span><br><span class="line">    lower, upper = q1 - whis * iqr, q3 + whis * iqr</span><br><span class="line">    <span class="keyword">return</span> data[(data &lt; lower) | (data &gt; upper)]</span><br></pre></td></tr></table></figure>
<p>如果要删除异常值，可以使用<code>DataFrame</code>对象的<code>drop</code>方法，该方法可以根据行索引或列索引删除指定的行或列。例如我们认为月薪低于<code>2000</code>或高于<code>8000</code>的是员工表中的异常值，可以用下面的代码删除对应的记录。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">emp_df.drop(emp_df[(emp_df.sal &gt; <span class="number">8000</span>) | (emp_df.sal &lt; <span class="number">2000</span>)].index)</span><br></pre></td></tr></table></figure>
<p>如果要替换掉异常值，可以通过给单元格赋值的方式来实现，也可以使用<code>replace</code>方法将指定的值替换掉。例如我们要将月薪为<code>1800</code>和<code>9000</code>的替换为月薪的平均值，补贴为<code>800</code>的替换为<code>1000</code>，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">avg_sal = np.mean(emp_df.sal).astype(<span class="built_in">int</span>)</span><br><span class="line">emp_df.replace(&#123;<span class="string">&#x27;sal&#x27;</span>: [<span class="number">1800</span>, <span class="number">9000</span>], <span class="string">&#x27;comm&#x27;</span>: <span class="number">800</span>&#125;, &#123;<span class="string">&#x27;sal&#x27;</span>: avg_sal, <span class="string">&#x27;comm&#x27;</span>: <span class="number">1000</span>&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="预处理"><a class="markdownIt-Anchor" href="#预处理"></a> 预处理</h4>
<p>对数据进行预处理也是一个很大的话题，它包含了对数据的拆解、变换、归约、离散化等操作。我们先来看看数据的拆解。如果数据表中的数据是一个时间日期，我们通常都需要从年、季度、月、日、星期、小时、分钟等维度对其进行拆解，如果时间日期是用字符串表示的，可以先通过<code>pandas</code>的<code>to_datetime</code>函数将其处理成时间日期。</p>
<p>在下面的例子中，我们先读取 Excel 文件，获取到一组销售数据，其中第一列就是销售日期，我们将其拆解为“月份”、“季度”和“星期”，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sales_df = pd.read_excel(</span><br><span class="line">    <span class="string">&#x27;data/2020年销售数据.xlsx&#x27;</span>,</span><br><span class="line">    usecols=[<span class="string">&#x27;销售日期&#x27;</span>, <span class="string">&#x27;销售区域&#x27;</span>, <span class="string">&#x27;销售渠道&#x27;</span>, <span class="string">&#x27;品牌&#x27;</span>, <span class="string">&#x27;销售额&#x27;</span>]</span><br><span class="line">)</span><br><span class="line">sales_df.info()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：上面代码中使用了相对路径来获取 Excel 文件，也就是说 Excel 文件在当前工作路径下名为<code>data</code>的文件夹中。如果需要上面例子中的 Excel 文件，可以通过下面的百度云盘地址进行获取。链接：<a href="https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g">https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g</a>，提取码：e7b4。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 1945 entries, 0 to 1944</span><br><span class="line">Data columns (total 5 columns):</span><br><span class="line"> #   Column  Non-Null Count  Dtype         </span><br><span class="line">---  ------  --------------  -----         </span><br><span class="line"> 0   销售日期    1945 non-null   datetime64[ns]</span><br><span class="line"> 1   销售区域    1945 non-null   object        </span><br><span class="line"> 2   销售渠道    1945 non-null   object        </span><br><span class="line"> 3   品牌        1945 non-null   object        </span><br><span class="line"> 4   销售额      1945 non-null   int64         </span><br><span class="line">dtypes: datetime64[ns](1), int64(1), object(3)</span><br><span class="line">memory usage: 76.1+ KB</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sales_df[<span class="string">&#x27;月份&#x27;</span>] = sales_df[<span class="string">&#x27;销售日期&#x27;</span>].dt.month</span><br><span class="line">sales_df[<span class="string">&#x27;季度&#x27;</span>] = sales_df[<span class="string">&#x27;销售日期&#x27;</span>].dt.quarter</span><br><span class="line">sales_df[<span class="string">&#x27;星期&#x27;</span>] = sales_df[<span class="string">&#x27;销售日期&#x27;</span>].dt.weekday</span><br><span class="line">sales_df</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	    销售日期	 销售区域	销售渠道	品牌	  销售额	月份	季度	星期</span><br><span class="line">0	    2020-01-01	上海	     拼多多	 八匹马   8217	    1	 1	   2</span><br><span class="line">1	    2020-01-01	上海	     抖音	      八匹马	6351	 1	  1	    2</span><br><span class="line">2	    2020-01-01	上海	     天猫	      八匹马	14365	 1	  1	    2</span><br><span class="line">3	    2020-01-01	上海	     天猫       八匹马	2366	 1	  1     2</span><br><span class="line">4	    2020-01-01	上海	     天猫 	  皮皮虾	15189	 1	  1     2</span><br><span class="line">...     ...         ...        ...       ...      ...     ...  ...   ...</span><br><span class="line">1940    2020-12-30	北京	     京东	      花花姑娘 6994     12	 4	   2</span><br><span class="line">1941    2020-12-30	福建	     实体	      八匹马	7663	 12	  4	    2</span><br><span class="line">1942    2020-12-31	福建	     实体	      花花姑娘 14795    12	 4	   3</span><br><span class="line">1943    2020-12-31	福建	     抖音	      八匹马	3481	 12	  4	    3</span><br><span class="line">1944    2020-12-31	福建	     天猫	      八匹马	2673	 12	  4	    3</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，通过日期时间类型的<code>Series</code>对象的<code>dt</code> 属性，获得一个访问日期时间的对象，通过该对象的<code>year</code>、<code>month</code>、<code>quarter</code>、<code>hour</code>等属性，就可以获取到年、月、季度、小时等时间信息，获取到的仍然是一个<code>Series</code>对象，它包含了一组时间信息，所以我们通常也将这个<code>dt</code>属性称为“日期时间向量”。</p>
<p>我们再来说一说字符串类型的数据的处理，我们先从指定的 Excel 文件中读取某招聘网站的招聘数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jobs_df = pd.read_csv(</span><br><span class="line">    <span class="string">&#x27;data/某招聘网站招聘数据.csv&#x27;</span>,</span><br><span class="line">    usecols=[<span class="string">&#x27;city&#x27;</span>, <span class="string">&#x27;companyFullName&#x27;</span>, <span class="string">&#x27;positionName&#x27;</span>, <span class="string">&#x27;salary&#x27;</span>]</span><br><span class="line">)</span><br><span class="line">jobs_df.info()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：上面代码中使用了相对路径来获取 CSV 文件，也就是说 CSV 文件在当前工作路径下名为<code>data</code>的文件夹中。如果需要上面例子中的 CSV 文件，可以通过下面的百度云盘地址进行获取。链接：<a href="https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g">https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g</a>，提取码：e7b4。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 3140 entries, 0 to 3139</span><br><span class="line">Data columns (total 4 columns):</span><br><span class="line"> #   Column           Non-Null Count  Dtype </span><br><span class="line">---  ------           --------------  ----- </span><br><span class="line"> 0   city             3140 non-null   object</span><br><span class="line"> 1   companyFullName  3140 non-null   object</span><br><span class="line"> 2   positionName     3140 non-null   object</span><br><span class="line"> 3   salary           3140 non-null   object</span><br><span class="line">dtypes: object(4)</span><br><span class="line">memory usage: 98.2+ KB</span><br></pre></td></tr></table></figure>
<p>查看前<code>5</code>条数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jobs_df.head()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    city    companyFullName              positionName    salary</span><br><span class="line">0   北京	  达疆网络科技（上海）有限公司    数据分析岗       15k-30k</span><br><span class="line">1   北京	  北京音娱时光科技有限公司        数据分析        10k-18k</span><br><span class="line">2   北京	  北京千喜鹤餐饮管理有限公司	     数据分析        20k-30k</span><br><span class="line">3   北京	  吉林省海生电子商务有限公司	     数据分析        33k-50k</span><br><span class="line">4   北京	  韦博网讯科技（北京）有限公司	数据分析        10k-15k</span><br></pre></td></tr></table></figure>
<p>上面的数据表一共有<code>3140</code>条数据，但并非所有的职位都是“数据分析”的岗位，如果要筛选出数据分析的岗位，可以通过检查<code>positionName</code>字段是否包含“数据分析”这个关键词，这里需要模糊匹配，应该如何实现呢？我们可以先获取<code>positionName</code>列，因为这个<code>Series</code>对象的<code>dtype</code>是字符串，所以可以通过<code>str</code>属性获取对应的字符串向量，然后就可以利用我们熟悉的字符串的方法来对其进行操作，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jobs_df = jobs_df[jobs_df.positionName.<span class="built_in">str</span>.contains(<span class="string">&#x27;数据分析&#x27;</span>)]</span><br><span class="line">jobs_df.shape</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1515, 4)</span><br></pre></td></tr></table></figure>
<p>可以看出，筛选后的数据还有<code>1515</code>条。接下来，我们还需要对<code>salary</code>字段进行处理，如果我们希望统计所有岗位的平均工资或每个城市的平均工资，首先需要将用范围表示的工资处理成其中间值，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jobs_df.salary.<span class="built_in">str</span>.extract(<span class="string">r&#x27;(\d+)[kK]?-(\d+)[kK]?&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：上面的代码通过正则表达式捕获组从字符串中抽取出两组数字，分别对应工资的下限和上限，对正则表达式不熟悉的读者，可以阅读我的知乎专栏“从零开始学Python”中的<a href="https://zhuanlan.zhihu.com/p/158929767">《正则表达式的应用》</a>一文。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        0     1</span><br><span class="line">0	    15    30</span><br><span class="line">1	    10	  18</span><br><span class="line">2       20    30</span><br><span class="line">3       33    50</span><br><span class="line">4       10    15</span><br><span class="line">...     ...   ...</span><br><span class="line">3065    8     10</span><br><span class="line">3069    6     10</span><br><span class="line">3070    2     4</span><br><span class="line">3071    6     12</span><br><span class="line">3088    8     12</span><br></pre></td></tr></table></figure>
<p>需要提醒大家的是，抽取出来的两列数据都是字符串类型的值，我们需要将其转换成<code>int</code>类型，才能计算平均值，对应的方法是<code>DataFrame</code>对象的<code>applymap</code>方法，该方法的参数是一个函数，而该函数会作用于<code>DataFrame</code>中的每个元素。完成这一步之后，我们就可以使用<code>apply</code>方法将上面的<code>DataFrame</code>处理成中间值，<code>apply</code>方法的参数也是一个函数，可以通过指定<code>axis</code>参数使其作用于<code>DataFrame</code> 对象的行或列，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp_df = jobs_df.salary.<span class="built_in">str</span>.extract(<span class="string">r&#x27;(\d+)[kK]?-(\d+)[kK]?&#x27;</span>).applymap(<span class="built_in">int</span>)</span><br><span class="line">temp_df.apply(np.mean, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0       22.5</span><br><span class="line">1       14.0</span><br><span class="line">2       25.0</span><br><span class="line">3       41.5</span><br><span class="line">4       12.5</span><br><span class="line">        ... </span><br><span class="line">3065    9.0</span><br><span class="line">3069    8.0</span><br><span class="line">3070    3.0</span><br><span class="line">3071    9.0</span><br><span class="line">3088    10.0</span><br><span class="line">Length: 1515, dtype: float64</span><br></pre></td></tr></table></figure>
<p>接下来，我们可以用上面的结果替换掉原来的<code>salary</code>列或者增加一个新的列来表示职位对应的工资，完整的代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp_df = jobs_df.salary.<span class="built_in">str</span>.extract(<span class="string">r&#x27;(\d+)[kK]?-(\d+)[kK]?&#x27;</span>).applymap(<span class="built_in">int</span>)</span><br><span class="line">jobs_df[<span class="string">&#x27;salary&#x27;</span>] = temp_df.apply(np.mean, axis=<span class="number">1</span>)</span><br><span class="line">jobs_df.head()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    city    companyFullName              positionName    salary</span><br><span class="line">0   北京	  达疆网络科技（上海）有限公司    数据分析岗       22.5</span><br><span class="line">1   北京	  北京音娱时光科技有限公司        数据分析        14.0</span><br><span class="line">2   北京	  北京千喜鹤餐饮管理有限公司	     数据分析        25.0</span><br><span class="line">3   北京	  吉林省海生电子商务有限公司	     数据分析        41.5</span><br><span class="line">4   北京	  韦博网讯科技（北京）有限公司	数据分析        12.5</span><br></pre></td></tr></table></figure>
<p><code>applymap</code>和<code>apply</code>两个方法在数据预处理的时候经常用到，<code>Series</code>对象也有<code>apply</code>方法，也是用于数据的预处理，但是<code>DataFrame</code>对象还有一个名为<code>transform</code> 的方法，也是通过传入的函数对数据进行变换，类似<code>Series</code>对象的<code>map</code>方法。需要强调的是，<code>apply</code>方法具有归约效果的，简单的说就是能将较多的数据处理成较少的数据或一条数据；而<code>transform</code>方法没有归约效果，只能对数据进行变换，原来有多少条数据，处理后还是有多少条数据。</p>
<p>如果要对数据进行深度的分析和挖掘，字符串、日期时间这样的非数值类型都需要处理成数值，因为非数值类型没有办法计算相关性，也没有办法进行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathsize="0.9em"><msup><mi>χ</mi><mn>2</mn></msup></mstyle></mrow><annotation encoding="application/x-tex">\small{\chi^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.88836em;vertical-align:-0.174996em;"></span><span class="mord sizing reset-size6 size5"><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7926266666666666em;"><span style="top:-2.963em;margin-right:0.05555555555555556em;"><span class="pstrut" style="height:2.6em;"></span><span class="sizing reset-size5 size2 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span> 检验等操作。对于字符串类型，通常可以其分为以下三类，再进行对应的处理。</p>
<ol>
<li>有序变量（Ordinal Variable）：字符串表示的数据有顺序关系，那么可以对字符串进行序号化处理。</li>
<li>分类变量（Categorical Variable）/ 名义变量（Nominal Variable）：字符串表示的数据没有大小关系和等级之分，那么就可以使用独热编码的方式处理成哑变量（虚拟变量）矩阵。</li>
<li>定距变量（Scale Variable）：字符串本质上对应到一个有大小高低之分的数据，而且可以进行加减运算，那么只需要将字符串处理成对应的数值即可。</li>
</ol>
<p>对于第1类和第3类，我们可以用上面提到的<code>apply</code>或<code>transform</code>方法来处理，也可以利用<code>scikit-learn</code>中的<code>OrdinalEncoder</code>处理第1类字符串，这个我们在后续的课程中会讲到。对于第2类字符串，可以使用<code>pandas</code>的<code>get_dummies()</code>函数来生成哑变量（虚拟变量）矩阵，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">persons_df = pd.DataFrame(</span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">&#x27;姓名&#x27;</span>: [<span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="string">&#x27;马超&#x27;</span>, <span class="string">&#x27;黄忠&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;职业&#x27;</span>: [<span class="string">&#x27;医生&#x27;</span>, <span class="string">&#x27;医生&#x27;</span>, <span class="string">&#x27;程序员&#x27;</span>, <span class="string">&#x27;画家&#x27;</span>, <span class="string">&#x27;教师&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;学历&#x27;</span>: [<span class="string">&#x27;研究生&#x27;</span>, <span class="string">&#x27;大专&#x27;</span>, <span class="string">&#x27;研究生&#x27;</span>, <span class="string">&#x27;高中&#x27;</span>, <span class="string">&#x27;本科&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">persons_df</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	姓名	职业	学历</span><br><span class="line">0	关羽	医生	研究生</span><br><span class="line">1	张飞	医生	大专</span><br><span class="line">2	赵云	程序员	研究生</span><br><span class="line">3	马超	画家	高中</span><br><span class="line">4	黄忠	教师	本科</span><br></pre></td></tr></table></figure>
<p>将职业处理成哑变量矩阵。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.get_dummies(persons_df[<span class="string">&#x27;职业&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    医生 教师  画家  程序员</span><br><span class="line">0	1    0    0    0</span><br><span class="line">1	1    0    0    0</span><br><span class="line">2	0    0    0    1</span><br><span class="line">3	0    0    1    0</span><br><span class="line">4	0    1    0    0</span><br></pre></td></tr></table></figure>
<p>将学历处理成大小不同的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handle_education</span>(<span class="params">x</span>):</span><br><span class="line">    edu_dict = &#123;<span class="string">&#x27;高中&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;大专&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;本科&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;研究生&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> edu_dict.get(x, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">persons_df[<span class="string">&#x27;学历&#x27;</span>].apply(handle_education)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0    10</span><br><span class="line">1     3</span><br><span class="line">2    10</span><br><span class="line">3     1</span><br><span class="line">4     5</span><br><span class="line">Name: 学历, dtype: int64</span><br></pre></td></tr></table></figure>
<p>我们再来说说数据离散化。离散化也叫分箱，如果变量的取值是连续值，那么它的取值有无数种可能，在进行数据分组的时候就会非常的不方便，这个时候将连续变量离散化就显得非常重要。之所以把离散化叫做分箱，是因为我们可以预先设置一些箱子，每个箱子代表了数据取值的范围，这样就可以将连续的值分配到不同的箱子中，从而实现离散化。下面的例子读取了2018年北京积分落户数据，我们可以根据落户积分对数据进行分组，具体的做法如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">luohu_df = pd.read_csv(<span class="string">&#x27;data/2018年北京积分落户数据.csv&#x27;</span>, index_col=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">luohu_df.score.describe()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count    6019.000000</span><br><span class="line">mean       95.654552</span><br><span class="line">std         4.354445</span><br><span class="line">min        90.750000</span><br><span class="line">25%        92.330000</span><br><span class="line">50%        94.460000</span><br><span class="line">75%        97.750000</span><br><span class="line">max       122.590000</span><br><span class="line">Name: score, dtype: float64</span><br></pre></td></tr></table></figure>
<p>可以看出，落户积分的最大值是<code>122.59</code>，最小值是<code>90.75</code>，那么我们可以构造一个从<code>90</code>分到<code>125</code>分，每<code>5</code>分一组的<code>7</code>个箱子，<code>pandas</code>的<code>cut</code>函数可以帮助我们首先数据分箱，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bins = np.arange(<span class="number">90</span>, <span class="number">126</span>, <span class="number">5</span>)</span><br><span class="line">pd.cut(luohu_df.score, bins, right=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：<code>cut</code>函数的<code>right</code>参数默认值为<code>True</code>，表示箱子左开右闭；修改为<code>False</code>可以让箱子的右边界为开区间，左边界为闭区间，大家看看下面的输出就明白了。</p>
</blockquote>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id</span><br><span class="line">1       [120, 125)</span><br><span class="line">2       [120, 125)</span><br><span class="line">3       [115, 120)</span><br><span class="line">4       [115, 120)</span><br><span class="line">5       [115, 120)</span><br><span class="line">           ...    </span><br><span class="line">6015      [90, 95)</span><br><span class="line">6016      [90, 95)</span><br><span class="line">6017      [90, 95)</span><br><span class="line">6018      [90, 95)</span><br><span class="line">6019      [90, 95)</span><br><span class="line">Name: score, Length: 6019, dtype: category</span><br><span class="line">Categories (7, interval[int64, left]): [[90, 95) &lt; [95, 100) &lt; [100, 105) &lt; [105, 110) &lt; [110, 115) &lt; [115, 120) &lt; [120, 125)]</span><br></pre></td></tr></table></figure>
<p>我们可以根据分箱的结果对数据进行分组，然后使用聚合函数对每个组进行统计，这是数据分析中经常用到的操作，下一个章节会为大家介绍。除此之外，<code>pandas</code>还提供了一个名为<code>qcut</code>的函数，可以指定分位数对数据进行分箱，有兴趣的读者可以自行研究。</p>
<h3 id="数据透视"><a class="markdownIt-Anchor" href="#数据透视"></a> 数据透视</h3>
<p>经过前面的学习，我们已经将数据准备就绪而且变成了我们想要的样子，接下来就是最为重要的数据透视阶段了。当我们拿到一大堆数据的时候，如何从数据中迅速的解读出有价值的信息，把繁杂的数据变成容易解读的统计图表并再此基础上产生业务洞察，这就是数据分析要解决的核心问题。</p>
<h4 id="获取描述性统计信息"><a class="markdownIt-Anchor" href="#获取描述性统计信息"></a> 获取描述性统计信息</h4>
<p>首先，我们可以获取数据的描述性统计信息，通过描述性统计信息，我们可以了解数据的集中趋势和离散趋势。</p>
<p>例如，我们有如下所示的学生成绩表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = np.random.randint(<span class="number">50</span>, <span class="number">101</span>, (<span class="number">5</span>, <span class="number">3</span>))</span><br><span class="line">names = (<span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="string">&#x27;马超&#x27;</span>, <span class="string">&#x27;黄忠&#x27;</span>)</span><br><span class="line">courses = (<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>)</span><br><span class="line">df = pd.DataFrame(data=scores, columns=courses, index=names)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     语文   数学   英语</span><br><span class="line">关羽  96    72    73</span><br><span class="line">张飞  72    70	97</span><br><span class="line">赵云  74    51	79</span><br><span class="line">马超  100   54	54</span><br><span class="line">黄忠  89    100	88</span><br></pre></td></tr></table></figure>
<p>我们可以通过<code>DataFrame</code>对象的方法<code>mean</code>、<code>max</code>、<code>min</code>、<code>std</code>、<code>var</code>等方法分别获取每个学生或每门课程的平均分、最高分、最低分、标准差、方差等信息，也可以直接通过<code>describe</code>方法直接获取描述性统计信息，代码如下所示。</p>
<p>计算每门课程成绩的平均分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.mean()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语文    86.2</span><br><span class="line">数学    69.4</span><br><span class="line">英语    78.2</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>
<p>计算每个学生成绩的平均分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.mean(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关羽    80.333333</span><br><span class="line">张飞    79.666667</span><br><span class="line">赵云    68.000000</span><br><span class="line">马超    69.333333</span><br><span class="line">黄忠    92.333333</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>
<p>计算每门课程成绩的方差。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.var()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语文    161.2</span><br><span class="line">数学    379.8</span><br><span class="line">英语    265.7</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：通过方差可以看出，数学成绩波动最大，两极分化可能更严重。</p>
</blockquote>
<p>获取每门课程的描述性统计信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.describe()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        语文        数学         英语</span><br><span class="line">count   5.000000	5.000000	5.000000</span><br><span class="line">mean    86.200000	69.400000	78.200000</span><br><span class="line">std     12.696456	19.488458	16.300307</span><br><span class="line">min     72.000000	51.000000	54.000000</span><br><span class="line">25%     74.000000	54.000000	73.000000</span><br><span class="line">50%     89.000000	70.000000	79.000000</span><br><span class="line">75%     96.000000	72.000000	88.000000</span><br><span class="line">max     100.000000	100.000000	97.000000</span><br></pre></td></tr></table></figure>
<h4 id="排序和取头部值"><a class="markdownIt-Anchor" href="#排序和取头部值"></a> 排序和取头部值</h4>
<p>如果需要对数据进行排序，可以使用<code>DataFrame</code>对象的<code>sort_values</code>方法，该方法的<code>by</code>参数可以指定根据哪个列或哪些列进行排序，而<code>ascending</code>参数可以指定升序或是降序。例如，下面的代码展示了如何将学生表按语文成绩排降序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sort_values(by=<span class="string">&#x27;语文&#x27;</span>, ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      语文   数学   英语</span><br><span class="line">马超	100    54	  54</span><br><span class="line">关羽	96     72     73</span><br><span class="line">黄忠	89     100    88</span><br><span class="line">赵云	74     51     79</span><br><span class="line">张飞	72     70     97</span><br></pre></td></tr></table></figure>
<p>如果<code>DataFrame</code>数据量很大，排序将是一个非常耗费时间的操作。有的时候我们只需要获得排前N名或后N名的数据，这个时候其实没有必要对整个数据进行排序，而是直接利用堆结构找出Top-N的数据。<code>DataFrame</code>的<code>nlargest</code>和<code>nsmallest</code>方法就提供对Top-N操作的支持，代码如下所示。</p>
<p>找出语文成绩前3名的学生信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.nlargest(<span class="number">3</span>, <span class="string">&#x27;语文&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      语文   数学   英语</span><br><span class="line">马超	100    54	  54</span><br><span class="line">关羽	96     72     73</span><br><span class="line">黄忠	89     100    88</span><br></pre></td></tr></table></figure>
<p>找出数学成绩最低的3名学生的信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.nsmallest(<span class="number">3</span>, <span class="string">&#x27;数学&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">      语文  数学  英语</span><br><span class="line">赵云  74    51	79</span><br><span class="line">马超  100   54	54</span><br><span class="line">张飞  72    70	97</span><br></pre></td></tr></table></figure>
<h4 id="分组聚合"><a class="markdownIt-Anchor" href="#分组聚合"></a> 分组聚合</h4>
<p>我们先从之前使用过的 Excel 文件中读取2020年销售数据，然后再为大家演示如何进行分组聚合操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&#x27;data/2020年销售数据.xlsx&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    销售日期	 销售区域   销售渠道  销售订单     品牌    售价  销售数量</span><br><span class="line">0   2020-01-01  上海       拼多多    182894-455  八匹马  99    83</span><br><span class="line">1   2020-01-01  上海       抖音      205635-402  八匹马  219   29</span><br><span class="line">2   2020-01-01  上海       天猫      205654-021  八匹马  169   85</span><br><span class="line">3   2020-01-01  上海       天猫      205654-519  八匹马  169   14</span><br><span class="line">4   2020-01-01  上海       天猫      377781-010  皮皮虾  249   61</span><br></pre></td></tr></table></figure>
<p>如果我们要统计每个销售区域的销售总额，可以先通过“售价”和“销售数量”计算出销售额，为<code>DataFrame</code>添加一个列，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;销售额&#x27;</span>] = df[<span class="string">&#x27;售价&#x27;</span>] * df[<span class="string">&#x27;销售数量&#x27;</span>]</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    销售日期	 销售区域   销售渠道  销售订单     品牌    售价  销售数量  销售额</span><br><span class="line">0   2020-01-01  上海       拼多多    182894-455  八匹马  99    83        8217</span><br><span class="line">1   2020-01-01  上海       抖音      205635-402  八匹马  219   29        6351</span><br><span class="line">2   2020-01-01  上海       天猫      205654-021  八匹马  169   85        14365</span><br><span class="line">3   2020-01-01  上海       天猫      205654-519  八匹马  169   14        2366</span><br><span class="line">4   2020-01-01  上海       天猫      377781-010  皮皮虾  249   61        15189</span><br></pre></td></tr></table></figure>
<p>然后再根据“销售区域”列对数据进行分组，这里我们使用的是<code>DataFrame</code>对象的<code>groupby</code>方法。分组之后，我们取“销售额”这个列在分组内进行求和处理，代码和结果如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.groupby(<span class="string">&#x27;销售区域&#x27;</span>).销售额.<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">销售区域</span><br><span class="line">上海    11610489</span><br><span class="line">北京    12477717</span><br><span class="line">安徽      895463</span><br><span class="line">广东     1617949</span><br><span class="line">江苏     2304380</span><br><span class="line">浙江      687862</span><br><span class="line">福建    10178227</span><br><span class="line">Name: 销售额, dtype: int64</span><br></pre></td></tr></table></figure>
<p>如果我们要统计每个月的销售总额，我们可以将“销售日期”作为groupby`方法的参数，当然这里需要先将“销售日期”处理成月，代码和结果如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.groupby(df[<span class="string">&#x27;销售日期&#x27;</span>].dt.month).销售额.<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">销售日期</span><br><span class="line">1     5409855</span><br><span class="line">2     4608455</span><br><span class="line">3     4164972</span><br><span class="line">4     3996770</span><br><span class="line">5     3239005</span><br><span class="line">6     2817936</span><br><span class="line">7     3501304</span><br><span class="line">8     2948189</span><br><span class="line">9     2632960</span><br><span class="line">10    2375385</span><br><span class="line">11    2385283</span><br><span class="line">12    1691973</span><br><span class="line">Name: 销售额, dtype: int64</span><br></pre></td></tr></table></figure>
<p>接下来我们将难度升级，统计每个销售区域每个月的销售总额，这又该如何处理呢？事实上，<code>groupby</code>方法的第一个参数可以是一个列表，列表中可以指定多个分组的依据，大家看看下面的代码和输出结果就明白了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.groupby([<span class="string">&#x27;销售区域&#x27;</span>, df[<span class="string">&#x27;销售日期&#x27;</span>].dt.month]).销售额.<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">销售区域  销售日期</span><br><span class="line">上海    1       1679125</span><br><span class="line">        2       1689527</span><br><span class="line">        3       1061193</span><br><span class="line">        4       1082187</span><br><span class="line">        5        841199</span><br><span class="line">        6        785404</span><br><span class="line">        7        863906</span><br><span class="line">        8        734937</span><br><span class="line">        9       1107693</span><br><span class="line">        10       412108</span><br><span class="line">       11       825169</span><br><span class="line">       12       528041</span><br><span class="line">北京    1       1878234</span><br><span class="line">        2       1807787</span><br><span class="line">        3       1360666</span><br><span class="line">        4       1205989</span><br><span class="line">        5        807300</span><br><span class="line">        6       1216432</span><br><span class="line">        7       1219083</span><br><span class="line">        8        645727</span><br><span class="line">        9        390077</span><br><span class="line">        10       671608</span><br><span class="line">        11       678668</span><br><span class="line">        12       596146</span><br><span class="line">安徽    4        341308</span><br><span class="line">        5        554155</span><br><span class="line">广东    3        388180</span><br><span class="line">        8        469390</span><br><span class="line">        9        365191</span><br><span class="line">        11       395188</span><br><span class="line">江苏    4        537079</span><br><span class="line">        7        841032</span><br><span class="line">        10       710962</span><br><span class="line">        12       215307</span><br><span class="line">浙江    3        248354</span><br><span class="line">        8        439508</span><br><span class="line">福建    1       1852496</span><br><span class="line">        2       1111141</span><br><span class="line">        3       1106579</span><br><span class="line">        4        830207</span><br><span class="line">        5       1036351</span><br><span class="line">        6        816100</span><br><span class="line">        7        577283</span><br><span class="line">        8        658627</span><br><span class="line">        9        769999</span><br><span class="line">        10       580707</span><br><span class="line">        11       486258</span><br><span class="line">        12       352479</span><br><span class="line">Name: 销售额, dtype: int64</span><br></pre></td></tr></table></figure>
<p>如果希望统计出每个区域的销售总额以及每个区域单笔金额的最高和最低，我们可以在<code>DataFrame</code>或<code>Series</code>对象上使用<code>agg</code>方法并指定多个聚合函数，代码和结果如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.groupby(<span class="string">&#x27;销售区域&#x27;</span>).销售额.agg([<span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">           sum     max   min</span><br><span class="line">销售区域                        </span><br><span class="line">上海    11610489  116303   948</span><br><span class="line">北京    12477717  133411   690</span><br><span class="line">安徽      895463   68502  1683</span><br><span class="line">广东     1617949  120807   990</span><br><span class="line">江苏     2304380  114312  1089</span><br><span class="line">浙江      687862   90909  3927</span><br><span class="line">福建    10178227   87527   897</span><br></pre></td></tr></table></figure>
<p>如果希望自定义聚合后的列的名字，可以使用如下所示的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.groupby(<span class="string">&#x27;销售区域&#x27;</span>).销售额.agg(销售总额=<span class="string">&#x27;sum&#x27;</span>, 单笔最高=<span class="string">&#x27;max&#x27;</span>, 单笔最低=<span class="string">&#x27;min&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">          销售总额    单笔最高  单笔最低</span><br><span class="line">销售区域                        </span><br><span class="line">上海      11610489     116303     948</span><br><span class="line">北京      12477717     133411     690</span><br><span class="line">安徽        895463      68502    1683</span><br><span class="line">广东       1617949     120807     990</span><br><span class="line">江苏       2304380     114312    1089</span><br><span class="line">浙江        687862      90909    3927</span><br><span class="line">福建      10178227      87527     897</span><br></pre></td></tr></table></figure>
<p>如果需要对多个列使用不同的聚合函数，例如“统计每个销售区域销售额的总和以及销售数量的最低值和最高值”，我们可以按照下面的方式来操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.groupby(<span class="string">&#x27;销售区域&#x27;</span>)[[<span class="string">&#x27;销售额&#x27;</span>, <span class="string">&#x27;销售数量&#x27;</span>]].agg(&#123;</span><br><span class="line">    <span class="string">&#x27;销售额&#x27;</span>: <span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;销售数量&#x27;</span>: [<span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">           销售额  销售数量    </span><br><span class="line">           sum    max min</span><br><span class="line">销售区域                   </span><br><span class="line">上海    11610489  100  10</span><br><span class="line">北京    12477717  100  10</span><br><span class="line">安徽      895463   98  16</span><br><span class="line">广东     1617949   98  10</span><br><span class="line">江苏     2304380  100  11</span><br><span class="line">浙江      687862   95  20</span><br><span class="line">福建    10178227  100  10</span><br></pre></td></tr></table></figure>
<h4 id="透视表和交叉表"><a class="markdownIt-Anchor" href="#透视表和交叉表"></a> 透视表和交叉表</h4>
<p>上面的例子中，“统计每个销售区域每个月的销售总额”会产生一个看起来很长的结果，在实际工作中我们通常把那些行很多列很少的表成为“窄表”，如果我们不想得到这样的一个“窄表”，可以使用<code>DataFrame</code>的<code>pivot_table</code>方法或者是<code>pivot_table</code>函数来生成透视表。透视表的本质就是对数据进行分组聚合操作，<strong>根据 A 列对 B 列进行统计</strong>，如果大家有使用 Excel 的经验，相信对透视表这个概念一定不会陌生。例如，我们要“统计每个销售区域的销售总额”，那么“销售区域”就是我们的 A 列，而“销售额”就是我们的 B 列，在<code>pivot_table</code>函数中分别对应<code>index</code>和<code>values</code>参数，这两个参数都可以是单个列或者多个列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.pivot_table(df, index=<span class="string">&#x27;销售区域&#x27;</span>, values=<span class="string">&#x27;销售额&#x27;</span>, aggfunc=<span class="string">&#x27;sum&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">           销售额</span><br><span class="line">销售区域          </span><br><span class="line">上海    11610489</span><br><span class="line">北京    12477717</span><br><span class="line">安徽      895463</span><br><span class="line">广东     1617949</span><br><span class="line">江苏     2304380</span><br><span class="line">浙江      687862</span><br><span class="line">福建    10178227</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：上面的结果操作跟之前用<code>groupby</code>的方式得到的结果有一些区别，<code>groupby</code>操作后，如果对单个列进行聚合，得到的结果是一个<code>Series</code>对象，而上面的结果是一个<code>DataFrame</code> 对象。</p>
</blockquote>
<p>如果要统计每个销售区域每个月的销售总额，也可以使用<code>pivot_table</code>函数，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;月份&#x27;</span>] = df[<span class="string">&#x27;销售日期&#x27;</span>].dt.month</span><br><span class="line">pd.pivot_table(df, index=[<span class="string">&#x27;销售区域&#x27;</span>, <span class="string">&#x27;月份&#x27;</span>], values=<span class="string">&#x27;销售额&#x27;</span>, aggfunc=<span class="string">&#x27;sum&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>上面的操作结果是一个<code>DataFrame</code>，但也是一个长长的“窄表”，如果希望做成一个行比较少列比较多的“宽表”，可以将<code>index</code>参数中的列放到<code>columns</code>参数中，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.pivot_table(df, index=<span class="string">&#x27;销售区域&#x27;</span>, columns=<span class="string">&#x27;月份&#x27;</span>, values=<span class="string">&#x27;销售额&#x27;</span>, aggfunc=<span class="string">&#x27;sum&#x27;</span>, fill_value=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：<code>pivot_table</code>函数的<code>fill_value=0</code>会将空值处理为<code>0</code>。</p>
</blockquote>
<p>输出：</p>
<img src="/images/pivot_table_1.png" style="zoom:50%;">
<p>使用<code>pivot_table</code>函数时，还可以通过添加<code>margins</code>和<code>margins_name</code>参数对分组聚合的结果做一个汇总，具体的操作和效果如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.pivot_table(df, index=<span class="string">&#x27;销售区域&#x27;</span>, columns=<span class="string">&#x27;月份&#x27;</span>, values=<span class="string">&#x27;销售额&#x27;</span>, aggfunc=<span class="string">&#x27;sum&#x27;</span>, fill_value=<span class="number">0</span>, margins=<span class="literal">True</span>, margins_name=<span class="string">&#x27;总计&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<img src="/images/pivot_table_2.png" style="zoom:50%;">
<p>交叉表就是一种特殊的透视表，它不需要先构造一个<code>DataFrame</code>对象，而是直接通过数组或<code>Series</code>对象指定两个或多个因素进行运算得到统计结果。例如，我们要统计每个销售区域的销售总额，也可以按照如下所示的方式来完成，我们先准备三组数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sales_area, sales_month, sales_amount = df[<span class="string">&#x27;销售区域&#x27;</span>], df[<span class="string">&#x27;月份&#x27;</span>], df[<span class="string">&#x27;销售额&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>使用<code>crosstab</code>函数生成交叉表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.crosstab(index=sales_area, columns=sales_month, values=sales_amount, aggfunc=<span class="string">&#x27;sum&#x27;</span>).fillna(<span class="number">0</span>).astype(<span class="string">&#x27;i8&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：上面的代码使用了<code>DataFrame</code>对象的<code>fillna</code>方法将空值处理为0，再使用<code>astype</code>方法将数据类型处理成整数。</p>
</blockquote>
<h3 id="数据呈现"><a class="markdownIt-Anchor" href="#数据呈现"></a> 数据呈现</h3>
<p>一图胜千言，我们对数据进行透视的结果，最终要通过图表的方式呈现出来，因为图表具有极强的表现力，能够让我们迅速的解读数据中隐藏的价值。和<code>Series</code>一样，<code>DataFrame</code>对象提供了<code>plot</code>方法来支持绘图，底层仍然是通过<code>matplotlib</code>库实现图表的渲染。关于<code>matplotlib</code>的内容，我们在下一个章节进行详细的探讨，这里我们只简单的讲解<code>plot</code>方法的用法。</p>
<p>例如，我们想通过一张柱状图来比较“每个销售区域的销售总额”，可以直接在透视表上使用<code>plot</code>方法生成柱状图。我们先导入<code>matplotlib.pyplot</code>模块，通过修改绘图的参数使其支持中文显示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;FZJKai-Z03S&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：上面的<code>FZJKai-Z03S</code>是我电脑上已经安装的一种支持中文的字体的名称，字体的名称可以通过查看用户主目录下<code>.matplotlib</code>文件夹下名为<code>fontlist-v330.json</code>的文件来获得，而这个文件在执行上面的命令后就会生成。</p>
</blockquote>
<p>使用魔法指令配置生成矢量图。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%config InlineBackend.figure_format = <span class="string">&#x27;svg&#x27;</span></span><br></pre></td></tr></table></figure>
<p>绘制“每个销售区域销售总额”的柱状图。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = pd.pivot_table(df, index=<span class="string">&#x27;销售区域&#x27;</span>, values=<span class="string">&#x27;销售额&#x27;</span>, aggfunc=<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">temp.plot(figsize=(<span class="number">8</span>, <span class="number">4</span>), kind=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明</strong>：上面的第3行代码会将横轴刻度上的文字旋转到0度，第4行代码会显示图像。</p>
</blockquote>
<p>输出：</p>
<img src="/images/sales_bar_graph.png" style="zoom:45%;">
<p>如果要绘制饼图，可以修改<code>plot</code>方法的<code>kind</code>参数为<code>pie</code>，然后使用定制饼图的参数对图表加以定制，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp.sort_values(by=<span class="string">&#x27;销售额&#x27;</span>, ascending=<span class="literal">False</span>).plot(</span><br><span class="line">    figsize=(<span class="number">6</span>, <span class="number">6</span>),</span><br><span class="line">    kind=<span class="string">&#x27;pie&#x27;</span>,</span><br><span class="line">    y=<span class="string">&#x27;销售额&#x27;</span>,</span><br><span class="line">    ylabel=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    autopct=<span class="string">&#x27;%.2f%%&#x27;</span>,</span><br><span class="line">    pctdistance=<span class="number">0.8</span>,</span><br><span class="line">    wedgeprops=<span class="built_in">dict</span>(linewidth=<span class="number">1</span>, width=<span class="number">0.35</span>),</span><br><span class="line">    legend=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<img src="/images/sales_pie_graph.png" style="zoom:35%;">
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
